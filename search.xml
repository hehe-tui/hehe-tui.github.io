<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Samba介绍与安装</title>
      <link href="2021/05/13/Samba%E4%BB%8B%E7%BB%8D%E4%B8%8E%E5%AE%89%E8%A3%85/"/>
      <url>2021/05/13/Samba%E4%BB%8B%E7%BB%8D%E4%B8%8E%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h2 id="Samba简介"><a href="#Samba简介" class="headerlink" title="Samba简介"></a>Samba简介</h2><p>Samba是在Linux和UNIX系统上实现SMB协议的一个免费软件，由服务器及客户端程序构成。可以在各个操作系统之间实现资源共享。<br>Samba包含smbd和 nmbd两个关键程序，可以实施四种基本的现代CIFS服务：</p><ul><li>文件和打印服务</li><li>认证与授权<br>Smbd 提供“共享模式”和“用户模式”的身份验证和授权，可以通过要求密码来保护共享文件和打印服务。<br>共享模式：可以将密码分配给共享目录或打印机，然后将这个单一密码提供给允许使用共享的每个人。<br>用户模式：每个用户都有自己的用户名和密码，系统管理员可以分别授予或拒绝访问。</li><li>名称解析<br>名称解析有两种形式：广播和点对点<br>客户端将其NetBIOS名称和IP地址发送到NBNS服务器，该服务器将信息保存在简单的数据库中，当客户端要与另一个客户端通话时，它将另一个客户端的名称发送到NBNS服务器。如果名称在列表中，则NBNS递回IP地址。不同子网中的客户端可以共享同一台NBNS服务器。</li><li>服务公告（浏览）<br>在LAN上，参与的计算机进行选举，以决定其中的哪些计算机将成为本地主浏览器（LMB）。然后，“优胜者”通过声明一个特殊的NetBIOS名称来标识自己。LMB的工作是保留可用服务的列表。<br>域主浏览器（DMB）可以在路由网络上跨NT域协调浏览列表。使用NBNS，LMB将找到其DMB，以交换和合并浏览列表。<br><a href="https://wiki.samba.org/">Samba官网</a><h2 id="Samba安装"><a href="#Samba安装" class="headerlink" title="Samba安装"></a>Samba安装</h2><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><table><thead><tr><th>服务器名</th><th>操作系统</th><th>IP</th></tr></thead><tbody><tr><td>Samba</td><td>CentOS7</td><td>192.168.100.101</td></tr></tbody></table></li></ul><h4 id="源码安装-Samba"><a href="#源码安装-Samba" class="headerlink" title="源码安装 Samba"></a>源码安装 Samba</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[root@samba ~]# yum install -y epel-release </span><br><span class="line">[root@samba ~]# yum install -y python3 python3-devel perl-Parse-Yapp libtasn1-devel libunistring-devel zlib-devel gmp-devel libffi-devel libldap2-dev lmdb openldap-devel m4 gcc lmdb-devel flex wget</span><br><span class="line">[root@samba ~]# wget https://gmplib.org/download/gmp/gmp-6.2.1.tar.xz &amp;&amp; xz -d gmp-6.2.1.tar.xz &amp;&amp; tar -xvf gmp-6.2.1.tar &amp;&amp; cd gmp-6.2.1</span><br><span class="line">[root@localhost gmp-6.2.1]# ./configure</span><br><span class="line">[root@localhost gmp-6.2.1]# make &amp;&amp; make check &amp;&amp; make install</span><br><span class="line">[root@samba gmp-6.2.1]# export GMP_CFLAGS=&quot;-I/usr/local/include&quot; GMP_LIBS=&quot;-L/usr/local/lib -lgmp&quot;</span><br><span class="line"></span><br><span class="line">[root@samba ~]# wget https://ftp.gnu.org/gnu/nettle/nettle-3.7.2.tar.gz &amp;&amp; tar -xzvf nettle-3.7.2.tar.gz &amp;&amp; cd nettle-3.7.2</span><br><span class="line">[root@samba nettle-3.7.2]# ./configure --prefix=/usr --enable-static --enable-mini-gmp</span><br><span class="line">[root@samba nettle-3.7.2]# make &amp;&amp; make install</span><br><span class="line">[root@samba nettle-3.7.2]# chmod -v 755 /usr/lib64/lib&#123;hogweed,nettle&#125;.so &amp;&amp; install -v -m755 -d /usr/share/doc/nettle-3.7.2 &amp;&amp; install -v -m644 nettle.html /usr/share/doc/nettle-3.7.2</span><br><span class="line">[root@samba nettle-3.7.2]# nettle-hash --version</span><br><span class="line">## 查看 nettle 版本</span><br><span class="line">nettle-hash (nettle <span class="number">3.7</span><span class="number">.2</span>)</span><br><span class="line"></span><br><span class="line">[root@samba ~]# wget https://ftp.gnu.org/gnu/libtasn1/libtasn1-4.16.0.tar.gz &amp;&amp; tar -xzvf libtasn1-4.16.0.tar.gz &amp;&amp; cd libtasn1-4.16.0</span><br><span class="line">[root@samba libtasn1-4.16.0]# export CFLAGS=&quot;-std=c99&quot;</span><br><span class="line">[root@samba libtasn1-4.16.0]# ./configure --prefix=/usr --disable-static</span><br><span class="line">[root@samba libtasn1-4.16.0]# make &amp;&amp; make install</span><br><span class="line">[root@samba libtasn1-4.16.0]# export CFLAGS=&quot;&quot;</span><br><span class="line"></span><br><span class="line">[root@samba ~]# wget ftp://sourceware.org/pub/libffi/libffi-3.3.tar.gz &amp;&amp; tar xf libffi-3.3.tar.gz &amp;&amp; cd libffi-3.3</span><br><span class="line">[root@samba libffi-3.3]# ./configure --prefix=/usr</span><br><span class="line">[root@samba libffi-3.3]# make &amp;&amp; make install</span><br><span class="line">[root@samba libffi-3.3]# export LD_LIBRARY_PATH=/usr/libffi-3.3:$LD_LIBRARY_PATH</span><br><span class="line"></span><br><span class="line">[root@samba ~]# wget ftp://ftp.gnu.org/gnu/libidn/libidn2-2.3.0.tar.gz &amp;&amp; tar -xzvf libidn2-2.3.0.tar.gz &amp;&amp; cd libidn2-2.3.0</span><br><span class="line">[root@samba libidn2-2.3.0]# ./configure --prefix=/usr --disable-static</span><br><span class="line">[root@samba libidn2-2.3.0]# make &amp;&amp; make install</span><br><span class="line">[root@samba libidn2-2.3.0]# export LIBIDN2_CFLAGS=&quot;-I/usr/include&quot; LIBIDN2_LIBS=&quot;-L/usr/lib -lidn2&quot;</span><br><span class="line"></span><br><span class="line">[root@samba ~]# wget https://www.gnupg.org/ftp/gcrypt/gnutls/v3.7/gnutls-3.7.1.tar.xz &amp;&amp; xz -d gnutls-3.7.1.tar.xz &amp;&amp; tar -xvf gnutls-3.7.1.tar &amp;&amp; cd gnutls-3.7.1</span><br><span class="line">[root@samba gnutls-3.7.1]# ./configure --prefix=/usr --docdir=/usr/share/doc/gnutls-3.7.1 --without-p11-kit </span><br><span class="line">[root@samba gnutls-3.7.1]# make &amp;&amp; make install</span><br><span class="line">[root@samba gnutls-3.7.1]# ldconfig &amp;&amp; gnutls-cli -v</span><br><span class="line">gnutls-cli <span class="number">3.7</span><span class="number">.1</span></span><br><span class="line">Copyright (C) <span class="number">2000</span>-<span class="number">2020</span> Free Software Foundation, and others, all rights reserved.</span><br><span class="line">This is free software. It is licensed <span class="keyword">for</span> use, modification and</span><br><span class="line">redistribution under the terms <span class="keyword">of</span> the GNU General Public License,</span><br><span class="line">version <span class="number">3</span> or later &lt;http:<span class="comment">//gnu.org/licenses/gpl.html&gt;</span></span><br><span class="line"></span><br><span class="line">Please send bug reports to:  <span class="xml"><span class="tag">&lt;<span class="name">bugs@gnutls.org</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">[root@samba ~]# wget https://download.samba.org/pub/samba/stable/samba-4.14.3.tar.gz &amp;&amp; tar xf samba-4.14.3.tar.gz &amp;&amp; cd samba-4.14.3</span></span><br><span class="line"><span class="xml">[root@samba samba-4.14.3]# ln -sf /usr/lib/pkgconfig/gnutls.pc /usr/lib64/pkgconfig/gnutls.pc</span></span><br><span class="line"><span class="xml">[root@samba samba-4.14.3]# ln -sf /usr/lib/libgnutls.so /usr/lib64/libgnutls.so</span></span><br><span class="line"><span class="xml">[root@samba samba-4.14.3]# ln -sf /usr/lib/libgnutls.so.30 /usr/lib64/libgnutls.so.30</span></span><br><span class="line"><span class="xml">[root@samba samba-4.14.3]# ln -sf /usr/lib/pkgconfig/libidn2.pc  /usr/lib64/pkgconfig/libidn2.pc</span></span><br><span class="line"><span class="xml">[root@samba samba-4.14.3]# ./configure --disable-python --without-ad-dc --without-json --without-libarchive  --without-acl-support --without-pam --with-shared-modules=&#x27;!vfs_snapper&#x27;</span></span><br><span class="line"><span class="xml">[root@samba samba-4.14.3]# make &amp;&amp; make install</span></span><br></pre></td></tr></table></figure><h4 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[root@samba ~]# vim /etc/ld.so.conf</span><br><span class="line">···</span><br><span class="line">/usr/local/samba/lib</span><br><span class="line">## 加入一行/usr/local/samba/lib</span><br><span class="line">···</span><br><span class="line">[root@samba ~]# ldconfig</span><br><span class="line">## 执行ldconfig命令让配置生效</span><br><span class="line">[root@samba ~]# vim /usr/local/samba/etc/smb.conf</span><br><span class="line">## 创建配置文件</span><br><span class="line">[root@samba ~]# ln –s  /usr/local/samba/etc/smb.conf   /usr/local/samba/lib/smb.conf </span><br><span class="line">[root@samba ~]# /usr/local/samba/bin/testparm</span><br><span class="line">## 如果没有任何错误，说明samba已经安装成功</span><br><span class="line">Load smb config files <span class="keyword">from</span> /usr/local/samba/etc/smb.conf</span><br><span class="line">Loaded services file OK.</span><br><span class="line">Weak crypto is allowed</span><br><span class="line">Server role: ROLE_STANDALONE</span><br><span class="line"></span><br><span class="line">Press enter to see a dump <span class="keyword">of</span> your service definitions</span><br></pre></td></tr></table></figure><h3 id="共享模式"><a href="#共享模式" class="headerlink" title="共享模式"></a>共享模式</h3><h4 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line">[root@samba ~]# vim /usr/local/samba/etc/smb.conf</span><br><span class="line">...</span><br><span class="line">[<span class="built_in">global</span>]</span><br><span class="line">        workgroup = SAMBA          </span><br><span class="line">        ## 工作组名称</span><br><span class="line">        security = user            </span><br><span class="line">        ## 设置用户访问samba服务器的验证方式</span><br><span class="line">        ## 1. share：用户访问Samba Server不需要提供用户名和口令, 安全性能较低。</span><br><span class="line">        ## 2. user：Samba Server共享目录只能被授权的用户访问,由Samba Server负责检查账号和密码的正确性。账号和密码要在本Samba Server中建立。</span><br><span class="line">        ## 3. server：依靠其他Windows NT/2000或Samba Server来验证用户的账号和密码,是一种代理验证。此种安全模式下,系统管理员可以把所有的Windows用户和口令集中到一个NT系统上,使用 Windows NT进行Samba认证, 远程服务器可以自动认证全部用户和口令,如果认证失败,Samba将使用用户级安全模式作为替代的方式。</span><br><span class="line">        ## 4. domain：域安全级别,使用主域控制器(PDC)来完成认证。</span><br><span class="line">        ## passdb backend = tdbsam    </span><br><span class="line">        ## 定义用户后台类型</span><br><span class="line">        ## printing = cups</span><br><span class="line">        ## 设置共享打印机的配置文件</span><br><span class="line">        ## printcap name = cups</span><br><span class="line">        ## Samba共享打印机的类型。</span><br><span class="line">        ## 现在支持的打印系统有：bsd, sysv, plp, lprng, aix, hpux, qnx</span><br><span class="line">        ## load printers = yes</span><br><span class="line">        ## 打印共享功能</span><br><span class="line">        ## cups options = raw</span><br><span class="line">        ## 打印机选项</span><br><span class="line">        map to guest = Bad User </span><br><span class="line">        ## 添加此项，开启匿名用户访问</span><br><span class="line">[public]</span><br><span class="line">##添加的share文件</span><br><span class="line">        path=<span class="regexp">/samba/</span>public</span><br><span class="line">        ##路径</span><br><span class="line">        public=yes</span><br><span class="line">        ##公共访问</span><br><span class="line">        browseable=yes</span><br><span class="line">        ##能够访问</span><br><span class="line">        writable=yes</span><br><span class="line">        ##允许有写的权限</span><br><span class="line">        create mask=<span class="number">0</span>644</span><br><span class="line">        ##设置权限</span><br><span class="line">        directory mask=<span class="number">0</span>755</span><br><span class="line">...</span><br><span class="line">[root@samba ~]# mkdir -p /samba/public</span><br><span class="line">[root@samba ~]# chmod 777 -R /samba/public</span><br></pre></td></tr></table></figure><h4 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line">[root@samba ~]# /usr/local/samba/sbin/nmbd start</span><br><span class="line">[root@samba ~]# /usr/local/samba/sbin/smbd start</span><br></pre></td></tr></table></figure><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p><img src="https://pic.imgdb.cn/item/6094aae7d1a9ae528fabac04.png"><br><img src="https://pic.imgdb.cn/item/6094aa99d1a9ae528fa9022e.png"><br>创建一个测试文件</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[root@samba ~]# cd /samba/public</span><br><span class="line">[root@samba public]# ll</span><br><span class="line">总用量 <span class="number">0</span></span><br><span class="line">-rw-r--r--. <span class="number">1</span> nobody nobody <span class="number">0</span> <span class="number">5</span>月   <span class="number">6</span> <span class="number">17</span>:<span class="number">50</span> test.txt</span><br></pre></td></tr></table></figure><p>回到Linux服务器可以看到我们共享的文件是匿名访问的</p><h3 id="用户模式"><a href="#用户模式" class="headerlink" title="用户模式"></a>用户模式</h3><h4 id="修改配置文件-1"><a href="#修改配置文件-1" class="headerlink" title="修改配置文件"></a>修改配置文件</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line">[root@samba ~]# vim /usr/local/samba/etc/smb.conf</span><br><span class="line">...</span><br><span class="line">[<span class="built_in">global</span>]</span><br><span class="line">        workgroup = SAMBA</span><br><span class="line">        security = user</span><br><span class="line">        passdb backend = tdbsam</span><br><span class="line">        ## printing = cups</span><br><span class="line">        ## printcap name = cups</span><br><span class="line">        ## load printers = yes</span><br><span class="line">        ## cups options = raw</span><br><span class="line">        ## map to guest = Bad User </span><br><span class="line">        ## 注释匿名用户访问</span><br><span class="line">[private]</span><br><span class="line">##添加的share文件</span><br><span class="line">        path=<span class="regexp">/samba/</span>private</span><br><span class="line">        ## 路径</span><br><span class="line">        ## public=yes</span><br><span class="line">        ## 公共访问</span><br><span class="line">        browseable=yes</span><br><span class="line">        ## 能够访问</span><br><span class="line">        ## writable=yes</span><br><span class="line">        ##允许有写的权限</span><br><span class="line">        create mask=<span class="number">0</span>644</span><br><span class="line">        ## 设置权限</span><br><span class="line">        directory mask=<span class="number">0</span>755</span><br><span class="line">        valid users=shuaige liangzai    </span><br><span class="line">        ## 允许访问的用户</span><br><span class="line">        write list=shuaige               </span><br><span class="line">        ## 允许写入的用户   </span><br><span class="line">        ## hosts deny=xx.xx.xx.xx  </span><br><span class="line">        ## 拒绝xx.xx.xx.xx访问    </span><br><span class="line">...</span><br><span class="line">[root@samba ~]# mkdir -p /samba/private</span><br><span class="line">[root@samba ~]# chmod 777 -R /samba/private/</span><br></pre></td></tr></table></figure><h4 id="添加用户并设置密码"><a href="#添加用户并设置密码" class="headerlink" title="添加用户并设置密码"></a>添加用户并设置密码</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[root@jjh samba]# useradd shuaige</span><br><span class="line">## 创建用户</span><br><span class="line">[root@jjh samba]# /usr/local/samba/bin/smbpasswd -a shuaige</span><br><span class="line">## 给用户设置密码</span><br><span class="line">New SMB password:</span><br><span class="line">Retype <span class="keyword">new</span> SMB password:</span><br><span class="line">Added user shuaige.</span><br><span class="line">[root@samba public]# useradd liangzai</span><br><span class="line">[root@samba public]# /usr/local/samba/bin/smbpasswd -a liangzai</span><br><span class="line">New SMB password:</span><br><span class="line">Retype <span class="keyword">new</span> SMB password:</span><br><span class="line">Added user liangzai.</span><br><span class="line">[root@samba public]# /usr/local/samba/bin/pdbedit -L</span><br><span class="line">## 列出smb用户列表</span><br><span class="line">shuaige:<span class="number">1000</span>:</span><br><span class="line">liangzai:<span class="number">1001</span>:</span><br></pre></td></tr></table></figure><h4 id="启动服务-1"><a href="#启动服务-1" class="headerlink" title="启动服务"></a>启动服务</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line">[root@samba ~]# /usr/local/samba/sbin/nmbd start</span><br><span class="line">[root@samba ~]# /usr/local/samba/sbin/smbd start</span><br></pre></td></tr></table></figure><h4 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h4><p><img src="https://pic.imgdb.cn/item/6094aab6d1a9ae528faa1603.png"><br><img src="https://pic.imgdb.cn/item/6094aa89d1a9ae528fa86085.png"><br>清除登录记录<br><img src="https://pic.imgdb.cn/item/6094aaadd1a9ae528fa9b800.png"><br><img src="https://pic.imgdb.cn/item/6094aaa1d1a9ae528fa94b47.png"><br><img src="https://pic.imgdb.cn/item/6094aa84d1a9ae528fa8330f.png"><br>可以看到用户liangzai没有写权限</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[root@samba bin]# cd /samba/private/</span><br><span class="line">[root@samba private]# ll</span><br><span class="line">总用量 <span class="number">0</span></span><br><span class="line">-rw-r--r--. <span class="number">1</span> shuaige shuaige <span class="number">0</span> <span class="number">5</span>月   <span class="number">6</span> <span class="number">18</span>:<span class="number">40</span> shuaige.txt</span><br></pre></td></tr></table></figure><p>未完待续…</p>]]></content>
      
      
      <categories>
          
          <category> 共享服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Samba </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Prometheus介绍与安装</title>
      <link href="2021/01/28/Prometheus%E4%BB%8B%E7%BB%8D%E4%B8%8E%E5%AE%89%E8%A3%85/"/>
      <url>2021/01/28/Prometheus%E4%BB%8B%E7%BB%8D%E4%B8%8E%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h2 id="Prometheus简介"><a href="#Prometheus简介" class="headerlink" title="Prometheus简介"></a>Prometheus简介</h2><p>Prometheus是最初在SoundCloud上构建的开源系统监视和警报工具包 。自2012年成立以来，许多公司和组织都采用了Prometheus，该项目拥有非常活跃的开发人员和用户社区。现在，它是一个独立的开源项目，并且独立于任何公司进行维护。为了强调这一点并阐明项目的治理结构，Prometheus在2016年加入了 Cloud Native Computing Foundation，这是继Kubernetes之后的第二个托管项目。</p><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul><li>一个多维数据模型，其中包含通过度量标准名称和键/值对标识的时间序列数据</li><li>PromQL，一种灵活的查询语言 ，可利用此维度</li><li>不依赖分布式存储；单服务器节点是自治的</li><li>时间序列收集通过HTTP上的拉模型进行</li><li>通过中间网关支持推送时间序列</li><li>通过服务发现或静态配置发现目标</li><li>多种图形和仪表板支持模式<h3 id="体系"><a href="#体系" class="headerlink" title="体系"></a>体系</h3><img src="https://img.imgdb.cn/item/601264c73ffa7d37b3b5a3b6.jpg"><h2 id="Prometheus安装"><a href="#Prometheus安装" class="headerlink" title="Prometheus安装"></a>Prometheus安装</h2><h3 id="GO安装"><a href="#GO安装" class="headerlink" title="GO安装"></a>GO安装</h3><a href="https://golang.google.cn/">GO官网</a><figure class="highlight"><table><tr><td class="code"><pre><span class="line">[root@prometheus ~]# wget https://golang.google.cn/dl/go1.15.7.linux-amd64.tar.gz</span><br><span class="line">[root@prometheus ~]# tar -zxvf go1.15.7.linux-amd64.tar.gz -C /usr/local/</span><br><span class="line">[root@prometheus ~]# vim /etc/profile</span><br><span class="line">···</span><br><span class="line"><span class="keyword">export</span> PATH=$PATH:<span class="regexp">/usr/</span>local/go/bin</span><br><span class="line">···</span><br><span class="line"># 配置环境变量</span><br><span class="line">[root@prometheus ~]# source /etc/profile</span><br><span class="line">[root@prometheus ~]# go version</span><br><span class="line">go version go1<span class="number">.15</span><span class="number">.7</span> linux/amd64</span><br><span class="line"># 查看go版本</span><br></pre></td></tr></table></figure><h3 id="Prometheus安装-1"><a href="#Prometheus安装-1" class="headerlink" title="Prometheus安装"></a>Prometheus安装</h3><a href="https://prometheus.io/">Prometheus官网</a><figure class="highlight"><table><tr><td class="code"><pre><span class="line">[root@prometheus ~]# wget https://github.com/prometheus/prometheus/releases/download/v2.24.1/prometheus-2.24.1.linux-amd64.tar.gz</span><br><span class="line">[root@prometheus ~]# tar -zxvf prometheus-2.24.1.linux-amd64.tar.gz -C /usr/local/</span><br><span class="line">[root@prometheus ~]# ln -sv /usr/local/prometheus-2.24.1.linux-amd64/ /usr/local/Prometheus</span><br><span class="line">‘/usr/local/Prometheus’ -&gt; ‘/usr/local/prometheus-<span class="number">2.24</span><span class="number">.1</span>.linux-amd64/’</span><br><span class="line">[root@prometheus ~]# /usr/local/Prometheus/prometheus --config.file=/usr/local/Prometheus/prometheus.yml &amp;</span><br><span class="line"># 启动promethus服务</span><br></pre></td></tr></table></figure>打开 <a href="http://localhost:9090/">http://localhost:9090/</a> ,可查看普罗米修斯自带的监控页面<br><img src="https://img.imgdb.cn/item/60114bb03ffa7d37b32a1a85.png"><h3 id="Grafana安装"><a href="#Grafana安装" class="headerlink" title="Grafana安装"></a>Grafana安装</h3><a href="https://grafana.com/">Grafana官网</a><figure class="highlight"><table><tr><td class="code"><pre><span class="line">[root@prometheus ~]# wget https://dl.grafana.com/oss/release/grafana-7.3.7.linux-amd64.tar.gz</span><br><span class="line">[root@prometheus ~]# tar -zxvf grafana-7.3.7.linux-amd64.tar.gz -C /usr/local/</span><br><span class="line">[root@prometheus ~]# cd /usr/local/grafana-7.3.7/</span><br><span class="line">[root@prometheus grafana-7.3.7]# ./bin/grafana-server web &amp;</span><br></pre></td></tr></table></figure>打开 <a href="http://localhost:3000/">http://localhost:3000/</a> ,验证是否成功<br><img src="https://img.imgdb.cn/item/60114be03ffa7d37b32a2e27.png"><br>账号：admin<br>密码：admin<h4 id="添加prometheus数据源"><a href="#添加prometheus数据源" class="headerlink" title="添加prometheus数据源"></a>添加prometheus数据源</h4>点击界面的 “Add data source”<br><img src="https://img.imgdb.cn/item/60114ff33ffa7d37b32c3ec9.jpg"><br>选择Prometheus<br><img src="https://img.imgdb.cn/item/6011501a3ffa7d37b32c55ba.jpg"><br>Dashboards页面选择 “Prometheus 2.0 Stats”<br><img src="https://img.imgdb.cn/item/6011515a3ffa7d37b32cfe2c.jpg"><br>Settings页面填写 prometheus 地址并保存<br><img src="https://img.imgdb.cn/item/601150863ffa7d37b32c9247.jpg"><br>切换到 “Prometheus 2.0 Stats” 查看整个监控页面<br><img src="https://img.imgdb.cn/item/601151a23ffa7d37b32d1fb8.jpg"><h3 id="添加常用监控项"><a href="#添加常用监控项" class="headerlink" title="添加常用监控项"></a>添加常用监控项</h3><h4 id="MariaDB监控"><a href="#MariaDB监控" class="headerlink" title="MariaDB监控"></a>MariaDB监控</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line">[root@prometheus ~]# vim /usr/local/Prometheus/prometheus.yml</span><br><span class="line">···</span><br><span class="line"># MySQL监控</span><br><span class="line">  - job_name: <span class="string">&#x27;MariaDB&#x27;</span></span><br><span class="line">    static_configs:</span><br><span class="line">    - targets: [<span class="string">&#x27;192.168.0.63:9104&#x27;</span>]</span><br><span class="line"># 默认mysqld-exporter端口为9104</span><br><span class="line">···</span><br><span class="line">[root@prometheus ~]# pkill prometheus</span><br><span class="line">[root@prometheus ~]# /usr/local/Prometheus/prometheus --config.file=/usr/local/Prometheus/prometheus.yml &amp;</span><br><span class="line"># 重启下 Prometheus </span><br></pre></td></tr></table></figure>MariaDB 安装方法此处略<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[root@mariadb ~]# wget https://github.com/prometheus/mysqld_exporter/releases/download/v0.12.1/mysqld_exporter-0.12.1.linux-amd64.tar.gz</span><br><span class="line">[root@mariadb ~]# tar -zxvf mysqld_exporter-0.12.1.linux-amd64.tar.gz -C /usr/local/</span><br><span class="line">[root@mariadb ~]# cd /usr/local/mysqld_exporter-0.12.1.linux-amd64/</span><br><span class="line">[root@mariadb mysqld_exporter-0.12.1.linux-amd64]# vim .my.cnf</span><br><span class="line">[client]</span><br><span class="line">user=root</span><br><span class="line">password=password</span><br><span class="line"># 设置配置文件，user为数据库登录用户，password为这个用户的密码</span><br><span class="line">[root@mariadb mysqld_exporter-0.12.1.linux-amd64]# /usr/local/mysqld_exporter-0.12.1.linux-amd64/mysqld_exporter --config.my-cnf=&quot;/usr/local/mysqld_exporter-0.12.1.linux-amd64/.my.cnf&quot; &amp;</span><br><span class="line">[<span class="number">1</span>] <span class="number">24834</span></span><br><span class="line">INFO[<span class="number">0</span>000] Starting mysqld_exporter (version=<span class="number">0.12</span><span class="number">.1</span>, branch=HEAD, revision=<span class="number">48667</span>bf7c3b438b5e93b259f3d17b70a7c9aff96)  source=<span class="string">&quot;mysqld_exporter.go:257&quot;</span></span><br><span class="line">INFO[<span class="number">0</span>000] Build context (go=go1<span class="number">.12</span><span class="number">.7</span>, user=root@<span class="number">0</span>b3e56a7bc0a, date=<span class="number">20190729</span>-<span class="number">12</span>:<span class="number">35</span>:<span class="number">58</span>)  source=<span class="string">&quot;mysqld_exporter.go:258&quot;</span></span><br><span class="line">INFO[<span class="number">0</span>000] Enabled scrapers:                             source=<span class="string">&quot;mysqld_exporter.go:269&quot;</span></span><br><span class="line">INFO[<span class="number">0</span>000]  --collect.global_status                      source=<span class="string">&quot;mysqld_exporter.go:273&quot;</span></span><br><span class="line">INFO[<span class="number">0</span>000]  --collect.global_variables                   source=<span class="string">&quot;mysqld_exporter.go:273&quot;</span></span><br><span class="line">INFO[<span class="number">0</span>000]  --collect.slave_status                       source=<span class="string">&quot;mysqld_exporter.go:273&quot;</span></span><br><span class="line">INFO[<span class="number">0</span>000]  --collect.info_schema.innodb_cmp             source=<span class="string">&quot;mysqld_exporter.go:273&quot;</span></span><br><span class="line">INFO[<span class="number">0</span>000]  --collect.info_schema.innodb_cmpmem          source=<span class="string">&quot;mysqld_exporter.go:273&quot;</span></span><br><span class="line">INFO[<span class="number">0</span>000]  --collect.info_schema.query_response_time    source=<span class="string">&quot;mysqld_exporter.go:273&quot;</span></span><br><span class="line">INFO[<span class="number">0</span>000] Listening on :<span class="number">9104</span>                            source=<span class="string">&quot;mysqld_exporter.go:283&quot;</span></span><br><span class="line"># 启动mysqld-exporter</span><br><span class="line">[root@mariadb ~]# mysql -uroot -p</span><br><span class="line">Enter password: </span><br><span class="line">Welcome to the MariaDB monitor.  Commands end <span class="keyword">with</span> ; or \g.</span><br><span class="line">Your MariaDB connection id is <span class="number">28834</span></span><br><span class="line">Server version: <span class="number">10.5</span><span class="number">.8</span>-MariaDB MariaDB Server</span><br><span class="line"></span><br><span class="line">Copyright (c) <span class="number">2000</span>, <span class="number">2018</span>, Oracle, MariaDB Corporation Ab and others.</span><br><span class="line"></span><br><span class="line">Type <span class="string">&#x27;help;&#x27;</span> or <span class="string">&#x27;\h&#x27;</span> <span class="keyword">for</span> help. Type <span class="string">&#x27;\c&#x27;</span> to clear the current input statement.</span><br><span class="line"></span><br><span class="line">MariaDB [(none)]&gt; grant all on jumpserver.* to <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;%&#x27;</span>identified by <span class="string">&#x27;password&#x27;</span>;   </span><br><span class="line">Query OK, <span class="number">0</span> rows affected (<span class="number">0.001</span> sec)</span><br></pre></td></tr></table></figure>访问 <a href="http://localhost:9090/">http://localhost:9090/</a><br><img src="https://img.imgdb.cn/item/60124f963ffa7d37b3a85b8c.jpg"><br>Grafana 添加MariaDB数据源<br><img src="https://img.imgdb.cn/item/601152e33ffa7d37b32dc15f.jpg"><br>添加需要被监控的数据库及相关信息<br><img src="https://img.imgdb.cn/item/601153503ffa7d37b32dfd0b.jpg"><br>查看监控<br><img src="https://img.imgdb.cn/item/601251be3ffa7d37b3a96852.jpg"><h4 id="Redis监控"><a href="#Redis监控" class="headerlink" title="Redis监控"></a>Redis监控</h4><a href="https://github.com/oliver006/redis_exporter">redis_exporter</a><figure class="highlight"><table><tr><td class="code"><pre><span class="line">[root@redis ~]# git clone https://github.com/oliver006/redis_exporter.git</span><br><span class="line">[root@redis ~]# cd redis_exporter</span><br><span class="line">[root@redis redis_exporter]# go build .</span><br><span class="line">go: github.com/gomodule/redigo@v1<span class="number">.8</span><span class="number">.3</span>: Get <span class="string">&quot;https://proxy.golang.org/github.com/gomodule/redigo/@v/v1.8.3.mod&quot;</span>: dial tcp <span class="number">172.217</span><span class="number">.27</span><span class="number">.145</span>:<span class="number">443</span>: i/o timeout</span><br><span class="line"># 这个异常的原因是因为某些特殊原因, 我们无法下载墙外的依赖, 所以我们需要去代理服务器进行下载</span><br><span class="line">[root@redis redis_exporter]# vim /etc/profile</span><br><span class="line">···</span><br><span class="line"><span class="keyword">export</span> GOPROXY=https:<span class="comment">//goproxy.io/</span></span><br><span class="line">[root@redis redis_exporter]# go build .</span><br><span class="line">[root@redis redis_exporter]# ./redis_exporter --version</span><br><span class="line">INFO[<span class="number">0</span>000] Redis Metrics Exporter &lt;&lt;&lt; filled <span class="keyword">in</span> by build &gt;&gt;&gt;    build date: &lt;&lt;&lt; filled <span class="keyword">in</span> by build &gt;&gt;&gt;    sha1: &lt;&lt;&lt; filled <span class="keyword">in</span> by build &gt;&gt;&gt;    Go: go1<span class="number">.15</span><span class="number">.7</span>    GOOS: linux    GOARCH: amd64 </span><br><span class="line">[root@redis redis_exporter]# ./redis_exporter -redis.addr 192.168.0.64:6379 -redis.password &quot;password&quot; &amp; </span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="code"><pre><span class="line">[root@prometheus ~]# vim /usr/local/Prometheus/prometheus.yml</span><br><span class="line">···</span><br><span class="line"># Redis监控</span><br><span class="line">  - job_name: <span class="string">&#x27;Redis&#x27;</span></span><br><span class="line">    static_configs:</span><br><span class="line">    - targets: [<span class="string">&#x27;192.168.0.64:9121&#x27;</span>]               </span><br><span class="line"># 默认redis-exporter端口为9121</span><br><span class="line">···</span><br><span class="line">[root@prometheus ~]# pkill prometheus</span><br><span class="line">[root@prometheus ~]# /usr/local/Prometheus/prometheus --config.file=/usr/local/Prometheus/prometheus.yml &amp;</span><br><span class="line"># 重启下 Prometheus </span><br></pre></td></tr></table></figure>访问 <a href="http://localhost:9090/">http://localhost:9090/</a><br><img src="https://img.imgdb.cn/item/601262b23ffa7d37b3b414b3.jpg"><br>访问 <a href="http://localhost:3000/">http://localhost:3000/</a><br><img src="https://img.imgdb.cn/item/601263153ffa7d37b3b46cd4.jpg"><br>未完待续。。。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 监控 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Prometheus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JumpServer介绍与安装</title>
      <link href="2021/01/25/JumpServer%E4%BB%8B%E7%BB%8D%E4%B8%8E%E5%AE%89%E8%A3%85/"/>
      <url>2021/01/25/JumpServer%E4%BB%8B%E7%BB%8D%E4%B8%8E%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h2 id="JumpServer简介"><a href="#JumpServer简介" class="headerlink" title="JumpServer简介"></a>JumpServer简介</h2><ul><li>JumpServer 是全球首款完全开源的堡垒机, 使用 GNU GPL v2.0 开源协议, 是符合 4A 的专业运维审计系统。</li><li>JumpServer 使用 Python / Django 进行开发, 遵循 Web 2.0 规范, 配备了业界领先的 Web Terminal 解决方案, 交互界面美观、用户体验好。</li><li>JumpServer 采纳分布式架构, 支持多机房跨区域部署, 中心节点提供 API, 各机房部署登录节点, 可横向扩展、无并发访问限制。</li><li>JumpServer 现已支持管理 SSH、 Telnet、 RDP、 VNC 协议资产。<h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3></li><li>开源：零门槛，线上快速获取和安装</li><li>分布式：轻松支持大规模并发访问</li><li>无插件：仅需浏览器，极致的 Web Terminal 使用体验</li><li>多云支持：一套系统，同时管理不同云上面的资产</li><li>云端存储：审计录像云端存储，永不丢失</li><li>多租户：一套系统，多个子公司和部门同时使用； 多应用支持: 数据库，Windows远程应用，Kubernetes</li></ul><p>参考<a href="https://docs.jumpserver.org/zh/master/">JumpServer官网</a></p><h2 id="JumpServer安装"><a href="#JumpServer安装" class="headerlink" title="JumpServer安装"></a>JumpServer安装</h2><p>推荐使用外置 数据库 和 Redis, 方便日后扩展升级</p><table><thead><tr><th align="center">服务器名</th><th align="center">操作系统</th><th align="center">IP</th></tr></thead><tbody><tr><td align="center">JumpServer</td><td align="center">CentOS 7</td><td align="center">192.168.0.36</td></tr><tr><td align="center">MariaDB</td><td align="center">CentOS 7</td><td align="center">192.168.0.63</td></tr><tr><td align="center">Redis</td><td align="center">CentOS 7</td><td align="center">192.168.0.64</td></tr></tbody></table><ul><li>Redis &gt;= 5.0.0</li><li>MySQL &gt;= 5.7</li><li>MariaDB &gt;= 10.2<h3 id="MariaDB安装"><a href="#MariaDB安装" class="headerlink" title="MariaDB安装"></a>MariaDB安装</h3>参考<a href="https://downloads.mariadb.org/mariadb/repositories/#distro=CentOS&distro_release=centos7-amd64--centos7&mirror=tuna&version=10.5">MariaDB官网</a><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[root@mariadb ~]# vim /etc/yum.repos.d/MariaDB.repo </span><br><span class="line">[mariadb]</span><br><span class="line">名称= MariaDB</span><br><span class="line">baseurl = http:<span class="comment">//yum.mariadb.org/10.5/centos7-amd64</span></span><br><span class="line">gpgkey = https:<span class="comment">//yum.mariadb.org/RPM-GPG-KEY-MariaDB</span></span><br><span class="line">gpgcheck = <span class="number">1</span></span><br><span class="line">[root@mariadb ~]# yum install MariaDB-server MariaDB-client -y</span><br><span class="line">[root@mariadb ~]# systemctl start mariadb</span><br><span class="line">[root@mariadb ~]# mysql -u root -p</span><br><span class="line">Enter password: </span><br><span class="line">Welcome to the MariaDB monitor.  Commands end <span class="keyword">with</span> ; or \g.</span><br><span class="line">Your MariaDB connection id is <span class="number">3</span></span><br><span class="line">Server version: <span class="number">10.5</span><span class="number">.8</span>-MariaDB MariaDB Server</span><br><span class="line"></span><br><span class="line">Copyright (c) <span class="number">2000</span>, <span class="number">2018</span>, Oracle, MariaDB Corporation Ab and others.</span><br><span class="line"></span><br><span class="line">Type <span class="string">&#x27;help;&#x27;</span> or <span class="string">&#x27;\h&#x27;</span> <span class="keyword">for</span> help. Type <span class="string">&#x27;\c&#x27;</span> to clear the current input statement.</span><br><span class="line"></span><br><span class="line">MariaDB [(none)]&gt; alter user <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> identified by <span class="string">&#x27;password&#x27;</span>;</span><br><span class="line">Query OK, <span class="number">0</span> rows affected (<span class="number">0.001</span> sec)</span><br><span class="line"># 设个密码</span><br><span class="line">MariaDB [(none)]&gt; create database jumpserver <span class="keyword">default</span> charset <span class="string">&#x27;utf8&#x27;</span>;</span><br><span class="line">Query OK, <span class="number">1</span> row affected (<span class="number">0.000</span> sec)</span><br><span class="line"></span><br><span class="line">MariaDB [(none)]&gt; grant all on jumpserver.* to <span class="string">&#x27;jumpserver&#x27;</span>@<span class="string">&#x27;%&#x27;</span>identified by <span class="string">&#x27;password&#x27;</span>;</span><br><span class="line">Query OK, <span class="number">0</span> rows affected (<span class="number">0.001</span> sec)</span><br><span class="line"></span><br><span class="line">MariaDB [(none)]&gt; flush privileges;</span><br><span class="line">Query OK, <span class="number">0</span> rows affected (<span class="number">0.000</span> sec)</span><br></pre></td></tr></table></figure><h3 id="Redis安装"><a href="#Redis安装" class="headerlink" title="Redis安装"></a>Redis安装</h3>参考<a href="https://redis.io/">Redis官网</a><br>之前的文章有说过Redis的安装，此次略<figure class="highlight"><table><tr><td class="code"><pre><span class="line">[root@redis ~]# vim /usr/local/redis-6.0.9/conf/redis.conf</span><br><span class="line">···</span><br><span class="line">requirepass password</span><br><span class="line">···</span><br><span class="line"># 设置密码后无密码可以登陆，但是无法操作</span><br></pre></td></tr></table></figure><h3 id="JumpServer安装-1"><a href="#JumpServer安装-1" class="headerlink" title="JumpServer安装"></a>JumpServer安装</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[root@jumpserver ~]# cd /opt</span><br><span class="line">[root@jumpserver opt]# wget https://github.com/jumpserver/installer/releases/download/v2.7.0/jumpserver-installer-v2.7.0.tar.gz</span><br><span class="line">[root@jumpserver opt]# tar -xf jumpserver-installer-v2.7.0.tar.gz</span><br><span class="line">[root@jumpserver opt]# cd jumpserver-installer-v2.7.0</span><br><span class="line">[root@jumpserver jumpserver-installer-v2.7.0]# export DOCKER_IMAGE_PREFIX=docker.mirrors.ustc.edu.cn</span><br><span class="line">[root@jumpserver jumpserver-installer-v2.7.0]# cat config-example.txt</span><br><span class="line"># 说明</span><br><span class="line">#### 这是项目总的配置文件, 会作为环境变量加载到各个容器中</span><br><span class="line">#### 格式必须是 KEY=VALUE 不能有空格等</span><br><span class="line"></span><br><span class="line"># Compose项目设置</span><br><span class="line">COMPOSE_PROJECT_NAME=jms</span><br><span class="line">COMPOSE_HTTP_TIMEOUT=<span class="number">3600</span></span><br><span class="line">DOCKER_CLIENT_TIMEOUT=<span class="number">3600</span></span><br><span class="line">DOCKER_SUBNET=<span class="number">192.168</span><span class="number">.250</span><span class="number">.0</span>/<span class="number">24</span></span><br><span class="line"></span><br><span class="line">## IPV6</span><br><span class="line">DOCKER_SUBNET_IPV6=<span class="number">2001</span>:db8:<span class="number">10</span>::/<span class="number">64</span></span><br><span class="line">USE_IPV6=<span class="number">0</span></span><br><span class="line"></span><br><span class="line">### 持久化目录, 安装启动后不能再修改, 除非移动原来的持久化到新的位置</span><br><span class="line">VOLUME_DIR=<span class="regexp">/opt/</span>jumpserver</span><br><span class="line"></span><br><span class="line">## 是否使用外部MYSQL和REDIS</span><br><span class="line">USE_EXTERNAL_MYSQL=<span class="number">0</span></span><br><span class="line">USE_EXTERNAL_REDIS=<span class="number">0</span></span><br><span class="line"></span><br><span class="line">## Nginx 配置，这个Nginx是用来分发路径到不同的服务</span><br><span class="line">HTTP_PORT=<span class="number">8080</span></span><br><span class="line">HTTPS_PORT=<span class="number">8443</span></span><br><span class="line">SSH_PORT=<span class="number">2222</span></span><br><span class="line"></span><br><span class="line">## LB 配置, 这个Nginx是HA时可以启动负载均衡到不同的主机</span><br><span class="line">USE_LB=<span class="number">0</span></span><br><span class="line">LB_HTTP_PORT=<span class="number">80</span></span><br><span class="line">LB_HTTPS_PORT=<span class="number">443</span></span><br><span class="line">LB_SSH_PORT=<span class="number">2223</span></span><br><span class="line"></span><br><span class="line">## Task 配置</span><br><span class="line">USE_TASK=<span class="number">1</span></span><br><span class="line"></span><br><span class="line">## XPack</span><br><span class="line">USE_XPACK=<span class="number">0</span></span><br><span class="line"></span><br><span class="line"># Koko配置</span><br><span class="line">CORE_HOST=http:<span class="comment">//core:8080</span></span><br><span class="line">ENABLE_PROXY_PROTOCOL=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line"># Core 配置</span><br><span class="line">### 启动后不能再修改，否则密码等等信息无法解密</span><br><span class="line">SECRET_KEY=</span><br><span class="line">BOOTSTRAP_TOKEN=</span><br><span class="line">LOG_LEVEL=INFO</span><br><span class="line"># SESSION_COOKIE_AGE=86400</span><br><span class="line"># SESSION_EXPIRE_AT_BROWSER_CLOSE=false</span><br><span class="line"></span><br><span class="line">## MySQL数据库配置</span><br><span class="line">DB_ENGINE=mysql</span><br><span class="line">DB_HOST=mysql</span><br><span class="line">DB_PORT=<span class="number">3306</span></span><br><span class="line">DB_USER=root</span><br><span class="line">DB_PASSWORD=</span><br><span class="line">DB_NAME=jumpserver</span><br><span class="line"></span><br><span class="line">## Redis配置</span><br><span class="line">REDIS_HOST=redis</span><br><span class="line">REDIS_PORT=<span class="number">6379</span></span><br><span class="line">REDIS_PASSWORD=</span><br><span class="line"></span><br><span class="line">### Keycloak 配置方式</span><br><span class="line">### AUTH_OPENID=true</span><br><span class="line">### BASE_SITE_URL=https://jumpserver.company.com/</span><br><span class="line">### AUTH_OPENID_SERVER_URL=https://keycloak.company.com/auth</span><br><span class="line">### AUTH_OPENID_REALM_NAME=cmp</span><br><span class="line">### AUTH_OPENID_CLIENT_ID=jumpserver</span><br><span class="line">### AUTH_OPENID_CLIENT_SECRET=</span><br><span class="line">### AUTH_OPENID_SHARE_SESSION=true</span><br><span class="line">### AUTH_OPENID_IGNORE_SSL_VERIFICATION=true</span><br><span class="line"></span><br><span class="line"># Guacamole 配置</span><br><span class="line">JUMPSERVER_SERVER=http:<span class="comment">//core:8080</span></span><br><span class="line">JUMPSERVER_KEY_DIR=<span class="regexp">/config/gu</span>acamole/data/key/</span><br><span class="line">JUMPSERVER_RECORD_PATH=<span class="regexp">/config/gu</span>acamole/data/record/</span><br><span class="line">JUMPSERVER_DRIVE_PATH=<span class="regexp">/config/gu</span>acamole/data/drive/</span><br><span class="line">JUMPSERVER_ENABLE_DRIVE=<span class="literal">true</span></span><br><span class="line">JUMPSERVER_CLEAR_DRIVE_SESSION=<span class="literal">true</span></span><br><span class="line">JUMPSERVER_CLEAR_DRIVE_SCHEDULE=<span class="number">24</span></span><br><span class="line"></span><br><span class="line"># Mysql 容器配置</span><br><span class="line">MYSQL_ROOT_PASSWORD=</span><br><span class="line">MYSQL_DATABASE=jumpserver</span><br><span class="line"></span><br><span class="line">[root@jumpserver jumpserver-installer-v2.7.0]# ./jmsctl.sh install</span><br><span class="line">···</span><br><span class="line"><span class="number">7.</span> 配置 MySQL</span><br><span class="line">是否使用外部 MySQL? (y/n)  (默认为 n): y</span><br><span class="line">请输入 mysql 的主机地址 (无默认值): <span class="number">192.168</span><span class="number">.0</span><span class="number">.63</span></span><br><span class="line">请输入 mysql 的端口 (默认为 <span class="number">3306</span>): </span><br><span class="line">请输入 mysql 的数据库 (默认为 jumpserver): jumpserver</span><br><span class="line">请输入 mysql 的用户名 (无默认值): jumpserver</span><br><span class="line">请输入 mysql 的密码 (无默认值): password</span><br><span class="line">完成</span><br><span class="line"></span><br><span class="line"><span class="number">8.</span> 配置 Redis</span><br><span class="line">是否使用外部 Redis? (y/n)  (默认为 n): y</span><br><span class="line">请输入 Redis 的主机地址 (无默认值): <span class="number">192.168</span><span class="number">.0</span><span class="number">.64</span></span><br><span class="line">请输入 Redis 的端口 (默认为 <span class="number">6379</span>): <span class="number">6379</span></span><br><span class="line">请输入 Redis 的密码 (无默认值): password</span><br><span class="line">完成</span><br><span class="line">···</span><br></pre></td></tr></table></figure>访问 <a href="http://localhost:8080/">http://localhost:8080/</a><br><img src="https://img.imgdb.cn/item/600e60913ffa7d37b3dfc3a6.jpg"><br>可以看到基本搭建成功<br>默认用户: admin  默认密码: admin<br><img src="https://img.imgdb.cn/item/600e614f3ffa7d37b3e04288.jpg"><br>未完待续。。。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 堡垒机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JumpServer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL增量备份与恢复</title>
      <link href="2021/01/17/MySQL%E5%A2%9E%E9%87%8F%E5%A4%87%E4%BB%BD%E4%B8%8E%E6%81%A2%E5%A4%8D/"/>
      <url>2021/01/17/MySQL%E5%A2%9E%E9%87%8F%E5%A4%87%E4%BB%BD%E4%B8%8E%E6%81%A2%E5%A4%8D/</url>
      
        <content type="html"><![CDATA[<h2 id="MySQL增量备份概念"><a href="#MySQL增量备份概念" class="headerlink" title="MySQL增量备份概念"></a>MySQL增量备份概念</h2><p>使用mseldump进行完全备份，备份的数据中有重复数据，备份时间与恢复时间长。而增量备份就是备份自上一次备份之后增加或改变的文件或内容。</p><h3 id="增量备份的特点"><a href="#增量备份的特点" class="headerlink" title="增量备份的特点"></a>增量备份的特点</h3><ul><li>没有重复数据，备份量不大，时间短</li><li>恢复麻烦<br>需要上次完全备份及完全备份之后所有的增量备份才能恢复，而且要对所有增量备份进行逐个反推恢复</li></ul><p>MySQL没有提供直接的增量备份办法，可以通过MySQL提供的二进制日志(binary logs)间接实现增量备份。</p><h3 id="MySQL二进制日志对备份的意义"><a href="#MySQL二进制日志对备份的意义" class="headerlink" title="MySQL二进制日志对备份的意义"></a>MySQL二进制日志对备份的意义</h3><ul><li>二进制日志保存了所有更新或者可能更新数据库的操作</li><li>二进制日志在启动 MySQL服务器后开始记录，并在文件达到max_binlog_size 所设置的大小或者接收到 flush logs 命令后重新创建新的日志文件</li><li>只需定时执行 flush logs 方法重新创建新的日志，生成二进制文件序列，并及时把这些日志保存到安全的地方就完成了一个时间段的增量备份</li></ul><p>要进行MySQL的增量备份，首先要开启二进制日志功能，开启MySQl的二进制日志功能。<br>方法一：MySQL的配置文件的 [mysqld] 项中加入log-bin=文件存放路径/文件前缀，如 log-bin=mysql-bin 然后重启 mysqld 服务。默认此配置存在。<br>方法二：使用 mysqld–log-bin=文件存放路径/文件前缀，重启 mysqld 服务</p><h3 id="增量恢复的方法"><a href="#增量恢复的方法" class="headerlink" title="增量恢复的方法"></a>增量恢复的方法</h3><ul><li>一般的恢复：备份的二进制日志内容全部恢复<br>格式：mysqlbinlog [–no-defaults] 增量备份文件 | mysql -u 用户名 -p 密码</li><li>基于时间点的恢复：便于跳过某个发生错误的时间点实现数据恢复<br>格式：<br>从日志开头截止到某个时间点的恢复：<br>mysqlbinlog [–no-defaults] –stop-datetime=’年-月-日 小时:分钟:秒’ 二进制日志 | mysq -u 用户名 -p 密码<br>从某个时间点到日志结尾的恢复：<br>mysqlbinlog [–no-defaults] –start-datetime=’年-月-日 小时:分钟:秒’ 二进制日志 | mysql -u 用户名 -p 密码<br>从某个时间点到某个时间点的恢复：<br>mysqlbinlog [–no-defaults] –start-datetime=’年-月-日 小时:分钟:秒’ –stop-datetime=’年-月-日 小时:分钟:秒’ 二进制日志 | mysql -u 用户名 -p 密码</li><li>基于位置的恢复：可能在同一时间点既有错误的操作也有正确的操作，基于位置进行恢复更加精准<br>格式：<br>mysqlbinlog-stop-position=’操作id’ 二进制日志 | mysql -u 用户名 -p 密码<br>mysqlbinlog-start-position=’操作id’ 二进制日志 | mysql -u 用户名 -p 密码<h3 id="举个栗子"><a href="#举个栗子" class="headerlink" title="举个栗子"></a>举个栗子</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[root@mysql ~]# /etc/init.d/mysqld start</span><br><span class="line">Starting MySQL. SUCCESS! </span><br><span class="line">[root@mysql ~]# mysql -u root -p</span><br><span class="line">Enter password: </span><br><span class="line">Welcome to the MySQL monitor.  Commands end <span class="keyword">with</span> ; or \g.</span><br><span class="line">Your MySQL connection id is <span class="number">8</span></span><br><span class="line">Server version: <span class="number">8.0</span><span class="number">.22</span> Source distribution</span><br><span class="line"></span><br><span class="line">Copyright (c) <span class="number">2000</span>, <span class="number">2020</span>, Oracle and/or its affiliates. All rights reserved.</span><br><span class="line"></span><br><span class="line">Oracle is a registered trademark <span class="keyword">of</span> Oracle Corporation and/or its</span><br><span class="line">affiliates. Other names may be trademarks <span class="keyword">of</span> their respective</span><br><span class="line">owners.</span><br><span class="line"></span><br><span class="line">Type <span class="string">&#x27;help;&#x27;</span> or <span class="string">&#x27;\h&#x27;</span> <span class="keyword">for</span> help. Type <span class="string">&#x27;\c&#x27;</span> to clear the current input statement.</span><br><span class="line"></span><br><span class="line">mysql&gt; </span><br></pre></td></tr></table></figure><h4 id="中文无法输入问题"><a href="#中文无法输入问题" class="headerlink" title="中文无法输入问题"></a>中文无法输入问题</h4>这里死活打不出中文，但是命令行是可以的，问题定位：<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[root@mysql bin]# vim /etc/my.cnf</span><br><span class="line">[client]</span><br><span class="line">···</span><br><span class="line">#<span class="keyword">default</span>-character-set=utf8</span><br><span class="line">...</span><br><span class="line">[mysqld]</span><br><span class="line">...</span><br><span class="line">#character-set-server=utf8</span><br><span class="line">···</span><br></pre></td></tr></table></figure>这俩要注释掉，重启后可以输入中文，尚不清楚原因是啥。。。<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">mysql&gt; mysql&gt; create database client;</span><br><span class="line">Query OK, <span class="number">1</span> row affected (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; mysql&gt; use client;</span><br><span class="line">Database changed</span><br><span class="line">mysql&gt; create table user_info(身份证 char(<span class="number">20</span>)not <span class="literal">null</span>,姓名 char(<span class="number">20</span>)not <span class="literal">null</span>,性别 char(<span class="number">4</span>),用户ID char(<span class="number">10</span>) not <span class="literal">null</span>);</span><br><span class="line">Query OK, <span class="number">0</span> rows affected (<span class="number">0.02</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; insert into user_info values(<span class="string">&#x27;001&#x27;</span>,<span class="string">&#x27;靓仔&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="string">&#x27;01&#x27;</span>);</span><br><span class="line">Query OK, <span class="number">1</span> row affected (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; insert into user_info values(<span class="string">&#x27;002&#x27;</span>,<span class="string">&#x27;帅哥&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="string">&#x27;02&#x27;</span>);</span><br><span class="line">Query OK, <span class="number">1</span> row affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; insert into user_info values(<span class="string">&#x27;003&#x27;</span>,<span class="string">&#x27;妹子&#x27;</span>,<span class="string">&#x27;女&#x27;</span>,<span class="string">&#x27;03&#x27;</span>);</span><br><span class="line">Query OK, <span class="number">1</span> row affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * <span class="keyword">from</span> user_info;</span><br><span class="line">+-----------+--------+--------+----------+</span><br><span class="line">| 身份证    | 姓名   | 性别   | 用户ID   |</span><br><span class="line">+-----------+--------+--------+----------+</span><br><span class="line">| <span class="number">0</span>01       | 靓仔   | 男     | <span class="number">0</span>1       |</span><br><span class="line">| <span class="number">0</span>02       | 帅哥   | 男     | <span class="number">0</span>2       |</span><br><span class="line">| <span class="number">0</span>03       | 妹子   | 女     | <span class="number">0</span>3       |</span><br><span class="line">+-----------+--------+--------+----------+</span><br><span class="line"><span class="number">3</span> rows <span class="keyword">in</span> set (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h4 id="先进行一次完全备份"><a href="#先进行一次完全备份" class="headerlink" title="先进行一次完全备份"></a>先进行一次完全备份</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[root@mysql ~]# mkdir back</span><br><span class="line">[root@mysql ~]# mysqldump -uroot -p client user_info &gt; back/client_user_info-$(date +%F).sql</span><br><span class="line">Enter password: </span><br><span class="line">[root@mysql ~]# mysqldump -uroot -p client &gt; back/client-$(date +%F).sql</span><br><span class="line">Enter password: </span><br><span class="line">[root@mysql ~]# ls back/</span><br><span class="line">client-<span class="number">2021</span>-<span class="number">0</span>1-<span class="number">17.</span>sql  client_user_info-<span class="number">2021</span>-<span class="number">0</span>1-<span class="number">17.</span>sql</span><br></pre></td></tr></table></figure><h4 id="进行一次日志回滚，生成新的二进制日志"><a href="#进行一次日志回滚，生成新的二进制日志" class="headerlink" title="进行一次日志回滚，生成新的二进制日志"></a>进行一次日志回滚，生成新的二进制日志</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">mysql&gt; show master logs;</span><br><span class="line">+---------------+-----------+-----------+</span><br><span class="line">| Log_name      | File_size | Encrypted |</span><br><span class="line">+---------------+-----------+-----------+</span><br><span class="line">| binlog<span class="number">.000001</span> |       <span class="number">156</span> | No        |</span><br><span class="line">| binlog<span class="number">.000002</span> |       <span class="number">847</span> | No        |</span><br><span class="line">| binlog<span class="number">.000003</span> |       <span class="number">360</span> | No        |</span><br><span class="line">| binlog<span class="number">.000004</span> |       <span class="number">179</span> | No        |</span><br><span class="line">| binlog<span class="number">.000005</span> |       <span class="number">767</span> | No        |</span><br><span class="line">| binlog<span class="number">.000006</span> |       <span class="number">156</span> | No        |</span><br><span class="line">| binlog<span class="number">.000007</span> |      <span class="number">1370</span> | No        |</span><br><span class="line">+---------------+-----------+-----------+</span><br><span class="line"><span class="number">7</span> rows <span class="keyword">in</span> set (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; flush logs;</span><br><span class="line">Query OK, <span class="number">0</span> rows affected (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; show master logs;</span><br><span class="line">+---------------+-----------+-----------+</span><br><span class="line">| Log_name      | File_size | Encrypted |</span><br><span class="line">+---------------+-----------+-----------+</span><br><span class="line">| binlog<span class="number">.000001</span> |       <span class="number">156</span> | No        |</span><br><span class="line">| binlog<span class="number">.000002</span> |       <span class="number">847</span> | No        |</span><br><span class="line">| binlog<span class="number">.000003</span> |       <span class="number">360</span> | No        |</span><br><span class="line">| binlog<span class="number">.000004</span> |       <span class="number">179</span> | No        |</span><br><span class="line">| binlog<span class="number">.000005</span> |       <span class="number">767</span> | No        |</span><br><span class="line">| binlog<span class="number">.000006</span> |       <span class="number">156</span> | No        |</span><br><span class="line">| binlog<span class="number">.000007</span> |      <span class="number">1414</span> | No        |</span><br><span class="line">| binlog<span class="number">.000008</span> |       <span class="number">156</span> | No        |</span><br><span class="line">+---------------+-----------+-----------+</span><br><span class="line"><span class="number">8</span> rows <span class="keyword">in</span> set (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h4 id="继续录入新的数据"><a href="#继续录入新的数据" class="headerlink" title="继续录入新的数据"></a>继续录入新的数据</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">mysql&gt; use client;</span><br><span class="line">Reading table information <span class="keyword">for</span> completion <span class="keyword">of</span> table and column names</span><br><span class="line">You can turn off <span class="built_in">this</span> feature to get a quicker startup <span class="keyword">with</span> -A</span><br><span class="line"></span><br><span class="line">Database changed</span><br><span class="line">mysql&gt; insert into user_info values(<span class="string">&#x27;004&#x27;</span>,<span class="string">&#x27;男票&#x27;</span>,<span class="string">&#x27;女&#x27;</span>,<span class="string">&#x27;04&#x27;</span>);</span><br><span class="line">Query OK, <span class="number">1</span> row affected (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; insert into user_info values(<span class="string">&#x27;005&#x27;</span>,<span class="string">&#x27;女票&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="string">&#x27;05&#x27;</span>);</span><br><span class="line">Query OK, <span class="number">1</span> row affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * <span class="keyword">from</span> user_info;</span><br><span class="line">+-----------+--------+--------+----------+</span><br><span class="line">| 身份证    | 姓名   | 性别   | 用户ID   |</span><br><span class="line">+-----------+--------+--------+----------+</span><br><span class="line">| <span class="number">0</span>01       | 靓仔   | 男     | <span class="number">0</span>1       |</span><br><span class="line">| <span class="number">0</span>02       | 帅哥   | 男     | <span class="number">0</span>2       |</span><br><span class="line">| <span class="number">0</span>03       | 妹子   | 女     | <span class="number">0</span>3       |</span><br><span class="line">| <span class="number">0</span>04       | 男票   | 女     | <span class="number">0</span>4       |</span><br><span class="line">| <span class="number">0</span>05       | 女票   | 男     | <span class="number">0</span>5       |</span><br><span class="line">+-----------+--------+--------+----------+</span><br><span class="line"><span class="number">5</span> rows <span class="keyword">in</span> set (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h4 id="进行增量备份"><a href="#进行增量备份" class="headerlink" title="进行增量备份"></a>进行增量备份</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line">mysql&gt; flush logs;</span><br><span class="line">Query OK, <span class="number">0</span> rows affected (<span class="number">0.02</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; show master logs;</span><br><span class="line">+---------------+-----------+-----------+</span><br><span class="line">| Log_name      | File_size | Encrypted |</span><br><span class="line">+---------------+-----------+-----------+</span><br><span class="line">| binlog<span class="number">.000001</span> |       <span class="number">156</span> | No        |</span><br><span class="line">| binlog<span class="number">.000002</span> |       <span class="number">847</span> | No        |</span><br><span class="line">| binlog<span class="number">.000003</span> |       <span class="number">360</span> | No        |</span><br><span class="line">| binlog<span class="number">.000004</span> |       <span class="number">179</span> | No        |</span><br><span class="line">| binlog<span class="number">.000005</span> |       <span class="number">767</span> | No        |</span><br><span class="line">| binlog<span class="number">.000006</span> |       <span class="number">156</span> | No        |</span><br><span class="line">| binlog<span class="number">.000007</span> |      <span class="number">1414</span> | No        |</span><br><span class="line">| binlog<span class="number">.000008</span> |       <span class="number">818</span> | No        |</span><br><span class="line">| binlog<span class="number">.000009</span> |       <span class="number">156</span> | No        |</span><br><span class="line">+---------------+-----------+-----------+</span><br><span class="line"><span class="number">9</span> rows <span class="keyword">in</span> set (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; mysql&gt; show binlog events <span class="keyword">in</span> <span class="string">&#x27;binlog.000009&#x27;</span>;</span><br><span class="line"># 查看新操作的日志记录</span><br></pre></td></tr></table></figure><h4 id="模拟删除误操作"><a href="#模拟删除误操作" class="headerlink" title="模拟删除误操作"></a>模拟删除误操作</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[root@mysql ~]# mysql -uroot -p -e &#x27;select * from client.user_info;&#x27;</span><br><span class="line">Enter password: </span><br><span class="line">+-----------+--------+--------+----------+</span><br><span class="line">| 身份证    | 姓名   | 性别   | 用户ID   |</span><br><span class="line">+-----------+--------+--------+----------+</span><br><span class="line">| <span class="number">0</span>01       | 靓仔   | 男     | <span class="number">0</span>1       |</span><br><span class="line">| <span class="number">0</span>02       | 帅哥   | 男     | <span class="number">0</span>2       |</span><br><span class="line">| <span class="number">0</span>03       | 妹子   | 女     | <span class="number">0</span>3       |</span><br><span class="line">| <span class="number">0</span>04       | 男票   | 女     | <span class="number">0</span>4       |</span><br><span class="line">| <span class="number">0</span>05       | 女票   | 男     | <span class="number">0</span>5       |</span><br><span class="line">+-----------+--------+--------+----------+</span><br><span class="line">mysql&gt; drop table client.user_info;</span><br><span class="line">Query OK, <span class="number">0</span> rows affected (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * <span class="keyword">from</span> user_info;</span><br><span class="line">ERROR <span class="number">1146</span> (<span class="number">42</span>S02): Table <span class="string">&#x27;client.user_info&#x27;</span> doesn<span class="string">&#x27;t exist</span></span><br></pre></td></tr></table></figure><h4 id="恢复完全备份"><a href="#恢复完全备份" class="headerlink" title="恢复完全备份"></a>恢复完全备份</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[root@mysql ~]# mysql -uroot -p client &lt; back/client_user_info-2021-01-17.sql </span><br><span class="line">Enter password: </span><br><span class="line">[root@mysql ~]# mysql -uroot -p -e &#x27;select * from client.user_info;&#x27;</span><br><span class="line">Enter password: </span><br><span class="line">+-----------+--------+--------+----------+</span><br><span class="line">| 身份证    | 姓名   | 性别   | 用户ID   |</span><br><span class="line">+-----------+--------+--------+----------+</span><br><span class="line">| <span class="number">0</span>01       | 靓仔   | 男     | <span class="number">0</span>1       |</span><br><span class="line">| <span class="number">0</span>02       | 帅哥   | 男     | <span class="number">0</span>2       |</span><br><span class="line">| <span class="number">0</span>03       | 妹子   | 女     | <span class="number">0</span>3       |</span><br><span class="line">+-----------+--------+--------+----------+</span><br></pre></td></tr></table></figure><h4 id="恢复增量备份"><a href="#恢复增量备份" class="headerlink" title="恢复增量备份"></a>恢复增量备份</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[root@mysql ~]# mysqlbinlog /data/mysql/binlog.000008 | mysql -uroot -p </span><br><span class="line">Enter password: </span><br><span class="line">[root@mysql ~]# mysql -uroot -p -e &#x27;select * from client.user_info;&#x27;</span><br><span class="line">Enter password: </span><br><span class="line">+-----------+--------+--------+----------+</span><br><span class="line">| 身份证    | 姓名   | 性别   | 用户ID   |</span><br><span class="line">+-----------+--------+--------+----------+</span><br><span class="line">| <span class="number">0</span>01       | 靓仔   | 男     | <span class="number">0</span>1       |</span><br><span class="line">| <span class="number">0</span>02       | 帅哥   | 男     | <span class="number">0</span>2       |</span><br><span class="line">| <span class="number">0</span>03       | 妹子   | 女     | <span class="number">0</span>3       |</span><br><span class="line">| <span class="number">0</span>04       | 男票   | 女     | <span class="number">0</span>4       |</span><br><span class="line">| <span class="number">0</span>05       | 女票   | 男     | <span class="number">0</span>5       |</span><br><span class="line">+-----------+--------+--------+----------+</span><br></pre></td></tr></table></figure>9是备份后的，8才是真正备份的操作，我说咋没恢复过来。。。<h5 id="基于时间点的增量备份操作"><a href="#基于时间点的增量备份操作" class="headerlink" title="基于时间点的增量备份操作"></a>基于时间点的增量备份操作</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[root@mysql ~]# mysql -uroot -p -e &#x27;drop table client.user_info;&#x27;</span><br><span class="line">Enter password: </span><br><span class="line">[root@mysql ~]# mysql -uroot -p -e &#x27;select * from client.user_info;&#x27;</span><br><span class="line">Enter password: </span><br><span class="line">ERROR <span class="number">1146</span> (<span class="number">42</span>S02) at line <span class="number">1</span>: Table <span class="string">&#x27;client.user_info&#x27;</span> doesn<span class="string">&#x27;t exist</span></span><br><span class="line"><span class="string">[root@mysql ~]# mysql -uroot -p client &lt; back/client_user_info-2021-01-17.sql </span></span><br><span class="line"><span class="string">Enter password: </span></span><br><span class="line"><span class="string">[root@mysql ~]# mysql -uroot -p -e &#x27;</span>select * <span class="keyword">from</span> client.user_info;<span class="string">&#x27;</span></span><br><span class="line"><span class="string">Enter password: </span></span><br><span class="line"><span class="string">+-----------+--------+--------+----------+</span></span><br><span class="line"><span class="string">| 身份证    | 姓名   | 性别   | 用户ID   |</span></span><br><span class="line"><span class="string">+-----------+--------+--------+----------+</span></span><br><span class="line"><span class="string">| 001       | 靓仔   | 男     | 01       |</span></span><br><span class="line"><span class="string">| 002       | 帅哥   | 男     | 02       |</span></span><br><span class="line"><span class="string">| 003       | 妹子   | 女     | 03       |</span></span><br><span class="line"><span class="string">+-----------+--------+--------+----------+</span></span><br><span class="line"><span class="string">[root@mysql ~]# mysqlbinlog --no-defaults /data/mysql/binlog.000008 </span></span><br><span class="line"><span class="string"># 查看日志操作记录</span></span><br></pre></td></tr></table></figure><h6 id="仅恢复男票的数据"><a href="#仅恢复男票的数据" class="headerlink" title="仅恢复男票的数据"></a>仅恢复男票的数据</h6><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[root@mysql ~]# mysqlbinlog --no-defaults --stop-datetime=&#x27;2021-01-17 15:59:43&#x27; /data/mysql/binlog.000008|mysql -uroot -p</span><br><span class="line"></span><br><span class="line">Enter password: </span><br><span class="line">[root@mysql ~]# mysql -uroot -p -e &#x27;select * from client.user_info;&#x27;</span><br><span class="line">Enter password: </span><br><span class="line">+-----------+--------+--------+----------+</span><br><span class="line">| 身份证    | 姓名   | 性别   | 用户ID   |</span><br><span class="line">+-----------+--------+--------+----------+</span><br><span class="line">| <span class="number">0</span>01       | 靓仔   | 男     | <span class="number">0</span>1       |</span><br><span class="line">| <span class="number">0</span>02       | 帅哥   | 男     | <span class="number">0</span>2       |</span><br><span class="line">| <span class="number">0</span>03       | 妹子   | 女     | <span class="number">0</span>3       |</span><br><span class="line">| <span class="number">0</span>04       | 男票   | 女     | <span class="number">0</span>4       |</span><br><span class="line">+-----------+--------+--------+----------+</span><br></pre></td></tr></table></figure><h6 id="仅恢复女票的数据"><a href="#仅恢复女票的数据" class="headerlink" title="仅恢复女票的数据"></a>仅恢复女票的数据</h6><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[root@mysql ~]# mysqlbinlog --no-defaults --start-datetime=&#x27;2021-01-17 15:59:43 &#x27; /data/mysql/binlog.000008|mysql -uroot -p</span><br><span class="line">Enter password: </span><br><span class="line">[root@mysql ~]# mysql -uroot -p -e &#x27;select * from client.user_info;&#x27;</span><br><span class="line">Enter password: </span><br><span class="line">+-----------+--------+--------+----------+</span><br><span class="line">| 身份证    | 姓名   | 性别   | 用户ID   |</span><br><span class="line">+-----------+--------+--------+----------+</span><br><span class="line">| <span class="number">0</span>01       | 靓仔   | 男     | <span class="number">0</span>1       |</span><br><span class="line">| <span class="number">0</span>02       | 帅哥   | 男     | <span class="number">0</span>2       |</span><br><span class="line">| <span class="number">0</span>03       | 妹子   | 女     | <span class="number">0</span>3       |</span><br><span class="line">| <span class="number">0</span>05       | 女票   | 男     | <span class="number">0</span>5       |</span><br><span class="line">+-----------+--------+--------+----------+</span><br></pre></td></tr></table></figure><h5 id="基于位置的增量备份操作"><a href="#基于位置的增量备份操作" class="headerlink" title="基于位置的增量备份操作"></a>基于位置的增量备份操作</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[root@mysql ~]# mysql -uroot -p -e &#x27;drop table client.user_info;&#x27;</span><br><span class="line">Enter password: </span><br><span class="line">[root@mysql ~]# mysql -uroot -p -e &#x27;select * from client.user_info;&#x27;</span><br><span class="line">Enter password: </span><br><span class="line">ERROR <span class="number">1146</span> (<span class="number">42</span>S02) at line <span class="number">1</span>: Table <span class="string">&#x27;client.user_info&#x27;</span> doesn<span class="string">&#x27;t exist</span></span><br><span class="line"><span class="string">[root@mysql ~]# mysql -uroot -p client &lt; back/client_user_info-2021-01-17.sql </span></span><br><span class="line"><span class="string">Enter password: </span></span><br><span class="line"><span class="string">[root@mysql ~]# mysql -uroot -p -e &#x27;</span>select * <span class="keyword">from</span> client.user_info;<span class="string">&#x27;</span></span><br><span class="line"><span class="string">Enter password: </span></span><br><span class="line"><span class="string">+-----------+--------+--------+----------+</span></span><br><span class="line"><span class="string">| 身份证    | 姓名   | 性别   | 用户ID   |</span></span><br><span class="line"><span class="string">+-----------+--------+--------+----------+</span></span><br><span class="line"><span class="string">| 001       | 靓仔   | 男     | 01       |</span></span><br><span class="line"><span class="string">| 002       | 帅哥   | 男     | 02       |</span></span><br><span class="line"><span class="string">| 003       | 妹子   | 女     | 03       |</span></span><br><span class="line"><span class="string">+-----------+--------+--------+----------+</span></span><br></pre></td></tr></table></figure><h6 id="仅恢复男票的数据-1"><a href="#仅恢复男票的数据-1" class="headerlink" title="仅恢复男票的数据"></a>仅恢复男票的数据</h6><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[root@mysql ~]# mysqlbinlog --no-defaults --stop-position=&#x27;465&#x27; /data/mysql/binlog.000008|mysql -uroot -p</span><br><span class="line">Enter password: </span><br><span class="line">[root@mysql ~]# mysql -uroot -p -e &#x27;select * from client.user_info;&#x27;</span><br><span class="line">Enter password: </span><br><span class="line">+-----------+--------+--------+----------+</span><br><span class="line">| 身份证    | 姓名   | 性别   | 用户ID   |</span><br><span class="line">+-----------+--------+--------+----------+</span><br><span class="line">| <span class="number">0</span>01       | 靓仔   | 男     | <span class="number">0</span>1       |</span><br><span class="line">| <span class="number">0</span>02       | 帅哥   | 男     | <span class="number">0</span>2       |</span><br><span class="line">| <span class="number">0</span>03       | 妹子   | 女     | <span class="number">0</span>3       |</span><br><span class="line">| <span class="number">0</span>04       | 男票   | 女     | <span class="number">0</span>4       |</span><br><span class="line">+-----------+--------+--------+----------+</span><br></pre></td></tr></table></figure><h6 id="仅恢复女票的数据-1"><a href="#仅恢复女票的数据-1" class="headerlink" title="仅恢复女票的数据"></a>仅恢复女票的数据</h6><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[root@mysql ~]# mysqlbinlog --no-defaults --start-position=&#x27;434&#x27; /data/mysql/binlog.000008|mysql -uroot -p</span><br><span class="line">Enter password: </span><br><span class="line">[root@mysql ~]# mysql -uroot -p -e &#x27;select * from client.user_info;&#x27;</span><br><span class="line">Enter password: </span><br><span class="line">+-----------+--------+--------+----------+</span><br><span class="line">| 身份证    | 姓名   | 性别   | 用户ID   |</span><br><span class="line">+-----------+--------+--------+----------+</span><br><span class="line">| <span class="number">0</span>01       | 靓仔   | 男     | <span class="number">0</span>1       |</span><br><span class="line">| <span class="number">0</span>02       | 帅哥   | 男     | <span class="number">0</span>2       |</span><br><span class="line">| <span class="number">0</span>03       | 妹子   | 女     | <span class="number">0</span>3       |</span><br><span class="line">| <span class="number">0</span>05       | 女票   | 男     | <span class="number">0</span>5       |</span><br><span class="line">+-----------+--------+--------+----------+</span><br></pre></td></tr></table></figure>未完待续。。。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Codis介绍与安装</title>
      <link href="2021/01/13/Codis%E4%BB%8B%E7%BB%8D%E4%B8%8E%E5%AE%89%E8%A3%85/"/>
      <url>2021/01/13/Codis%E4%BB%8B%E7%BB%8D%E4%B8%8E%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h2 id="Codis简介"><a href="#Codis简介" class="headerlink" title="Codis简介"></a>Codis简介</h2><p>Codis 是一个分布式 Redis 解决方案, 对于上层的应用来说, 连接到 Codis Proxy 和连接原生的 Redis Server 没有明显的区别 (不支持的命令列表), 上层应用可以像使用单机的 Redis 一样使用, Codis 底层会处理请求的转发, 不停机的数据迁移等工作, 所有后边的一切事情, 对于前面的客户端来说是透明的, 可以简单的认为后边连接的是一个内存无限大的 Redis 服务。</p><ul><li>codis-proxy 是客户端连接的 Redis 代理服务, codis-proxy 本身实现了 Redis 协议, 表现得和一个原生的 Redis 没什么区别 (就像 Twemproxy), 对于一个业务来说, 可以部署多个 codis-proxy, codis-proxy 本身是无状态的.</li><li>codis-config 是 Codis 的管理工具, 支持包括, 添加/删除 Redis 节点, 添加/删除 Proxy 节点, 发起数据迁移等操作. codis-config 本身还自带了一个 http server, 会启动一个 dashboard, 用户可以直接在浏览器上观察 Codis 集群的运行状态.</li><li>codis-server 是 Codis 项目维护的一个 Redis 分支, 基于 2.8.13 开发, 加入了 slot 的支持和原子的数据迁移指令. Codis 上层的 codis-proxy 和 codis-config 只能和这个版本的 Redis 交互才能正常运行.</li></ul><p>Codis 依赖 ZooKeeper 来存放数据路由表和 codis-proxy 节点的元信息, codis-config 发起的命令都会通过 ZooKeeper 同步到各个存活的 codis-proxy</p><p>Codis 支持按照 Namespace 区分不同的产品, 拥有不同的 product name 的产品, 各项配置都不会冲突</p><h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><ul><li>自动平衡</li><li>使用非常简单</li><li>图形化的面板和管理工具</li><li>支持绝大多数 Redis 命令，完全兼容twemproxy</li><li>支持 Redis 原生客户端</li><li>安全而且透明的数据移植，可根据需要轻松添加和删除节点</li><li>提供命令行接口</li><li>RESTful APIs</li></ul><p>参考<a href="https://github.com/CodisLabs/codis">Codis官网</a></p><h2 id="Codis部署"><a href="#Codis部署" class="headerlink" title="Codis部署"></a>Codis部署</h2><h3 id="Go安装"><a href="#Go安装" class="headerlink" title="Go安装"></a>Go安装</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[root@codis ~]# yum install -y git gcc make g++ gcc-c++ automake openssl-devel zlib-*</span><br><span class="line">[root@codis ~]# wget https://golang.google.cn/dl/go1.15.6.linux-amd64.tar.gz</span><br><span class="line">[root@codis ~]# wget https://github.com/CodisLabs/codis/releases/download/3.2.2/codis3.2.2-go1.8.5-linux.tar.gz</span><br><span class="line">[root@codis ~]# tar -zxvf go1.15.6.linux-amd64.tar.gz -C /usr/local/</span><br><span class="line">[root@codis ~]# vim /etc/profile</span><br><span class="line">···</span><br><span class="line">export GOROOT=/usr/local/go   #设置为go安装的路径</span><br><span class="line">export GOPATH=/usr/local/gopath  #默认安装包的路径</span><br><span class="line"><span class="keyword">export</span> PATH=$PATH:$GOROOT/bin:$GOPATH/bin</span><br><span class="line">[root@codis ~]# source /etc/profile</span><br><span class="line">[root@codis ~]# go version</span><br><span class="line">go version go1<span class="number">.15</span><span class="number">.6</span> linux/amd64</span><br></pre></td></tr></table></figure><h3 id="jdk安装"><a href="#jdk安装" class="headerlink" title="jdk安装"></a>jdk安装</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[root@codis ~]# ls</span><br><span class="line">go1<span class="number">.15</span><span class="number">.6</span>.linux-amd64.tar.gz jdk-<span class="number">8</span>u202-linux-x64.tar.gz</span><br><span class="line">[root@codis ~]# tar -zxvf jdk-8u202-linux-x64.tar.gz -C /usr/local/</span><br><span class="line">[root@codis ~]# vim /etc/profile</span><br><span class="line">···</span><br><span class="line">#java config</span><br><span class="line"><span class="keyword">export</span> JAVA_HOME=<span class="regexp">/usr/</span>local/jdk1<span class="number">.8</span><span class="number">.0_202</span></span><br><span class="line"><span class="keyword">export</span> JRE_HOME=<span class="regexp">/usr/</span>local/jdk1<span class="number">.8</span><span class="number">.0_202</span>/jre</span><br><span class="line"><span class="keyword">export</span> CLASSPATH=.:$&#123;JAVA_HOME&#125;/jre/lib/rt.jar:$&#123;JAVA_HOME&#125;/lib/dt.jar:$&#123;JAVA_HOME&#125;/lib/tools.jar</span><br><span class="line"><span class="keyword">export</span> PATH=$PATH:$&#123;JAVA_HOME&#125;/bin</span><br><span class="line">[root@codis ~]# source /etc/profile</span><br><span class="line">[root@codis ~]# java -version</span><br><span class="line">java version <span class="string">&quot;1.8.0_202&quot;</span></span><br><span class="line">Java(TM) SE Runtime Environment (build <span class="number">1.8</span><span class="number">.0_202</span>-b08)</span><br><span class="line">Java HotSpot(TM) <span class="number">64</span>-Bit Server VM (build <span class="number">25.202</span>-b08, mixed mode)</span><br></pre></td></tr></table></figure><h3 id="ZooKeeper安装"><a href="#ZooKeeper安装" class="headerlink" title="ZooKeeper安装"></a>ZooKeeper安装</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[root@codis ~]# wget http://mirror.bit.edu.cn/apache/zookeeper/zookeeper-3.6.2/apache-zookeeper-3.6.2-bin.tar.gz</span><br><span class="line">[root@codis ~]# tar -zxvf apache-zookeeper-3.6.2-bin.tar.gz -C /usr/local/</span><br><span class="line">[root@codis ~]# cd /usr/local/apache-zookeeper-3.6.2-bin/conf</span><br><span class="line">[root@codis conf]# cp zoo_sample.cfg zoo.cfg</span><br><span class="line">[root@codis conf]# vim zoo.cfg</span><br><span class="line">···</span><br><span class="line">dataDir=<span class="regexp">/usr/</span>local/apache-zookeeper-<span class="number">3.6</span><span class="number">.2</span>-bin/data</span><br><span class="line">···</span><br><span class="line">[root@codis conf]# cd ..</span><br><span class="line">[root@codis apache-zookeeper-3.6.2-bin]# mkdir data</span><br><span class="line">[root@codis apache-zookeeper-3.6.2-bin]# cd data/</span><br><span class="line">[root@codis data]# vim myid</span><br><span class="line"><span class="number">1</span></span><br><span class="line">[root@codis data]# /usr/local/apache-zookeeper-3.6.2-bin//bin/zkServer.sh start</span><br><span class="line">ZooKeeper JMX enabled by <span class="keyword">default</span></span><br><span class="line">Using config: <span class="regexp">/usr/</span>local/apache-zookeeper-<span class="number">3.6</span><span class="number">.2</span>-bin/bin/../conf/zoo.cfg</span><br><span class="line">Starting zookeeper ... STARTED</span><br></pre></td></tr></table></figure><h3 id="Codis安装"><a href="#Codis安装" class="headerlink" title="Codis安装"></a>Codis安装</h3><p>Codis 源代码需要下载到 $GOPATH/src/github.com/CodisLabs/codis</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">[root@codis data]# cd</span><br><span class="line">[root@codis ~]# mkdir -p $GOPATH/src/github.com/CodisLabs</span><br><span class="line"># 目录结构一定要是,gopath的自定义，后面的目录需要新建和官网一样，不一样要报错</span><br><span class="line">[root@codis ~]# cd $_ &amp;&amp; git clone https://github.com/CodisLabs/codis.git -b release3.2</span><br><span class="line">[root@codis ~]# cd $GOPATH/src/github.com/CodisLabs/codis</span><br><span class="line">[root@codis codis]# make</span><br></pre></td></tr></table></figure><h4 id="启动codis-dashboard"><a href="#启动codis-dashboard" class="headerlink" title="启动codis-dashboard"></a>启动codis-dashboard</h4><p>脚本启动 dashboard，并查看 dashboard 日志确认启动是否有异常</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[root@codis codis]# ./admin/codis-dashboard-admin.sh start</span><br><span class="line">/usr/local/gopath/src/github.com/CodisLabs/codis/admin/../config/dashboard.toml</span><br><span class="line">starting codis-dashboard ... </span><br><span class="line">[root@codis codis]# tail -100 ./log/codis-dashboard.log.2021-01-13</span><br><span class="line">···</span><br><span class="line"><span class="number">2021</span>/<span class="number">0</span>1/<span class="number">13</span> <span class="number">14</span>:<span class="number">22</span>:<span class="number">28</span> main.go:<span class="number">171</span>: [WARN] [<span class="number">0xc0001caea0</span>] dashboard online failed [<span class="number">10</span>]</span><br></pre></td></tr></table></figure><p>执行报错</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[root@codis codis]# cd /tmp/codis/data/codis3/codis-demo/</span><br><span class="line">[root@codis codis-demo]# ls</span><br><span class="line">topom</span><br><span class="line">[root@codis codis-demo]# rm topom </span><br><span class="line">rm: remove regular file ‘topom’? y</span><br></pre></td></tr></table></figure><p>etcd已经有/ codis3 / codis-service / topom了，删除掉再启动就好</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[root@codis codis]# ./admin/codis-dashboard-admin.sh start</span><br><span class="line">/usr/local/gopath/src/github.com/CodisLabs/codis/admin/../config/dashboard.toml</span><br><span class="line">starting codis-dashboard ... </span><br><span class="line">[root@codis codis]# tail -100 ./log/codis-dashboard.log.2021-01-13</span><br><span class="line">···</span><br><span class="line"><span class="number">2021</span>/<span class="number">0</span>1/<span class="number">13</span> <span class="number">14</span>:<span class="number">33</span>:<span class="number">33</span> main.go:<span class="number">179</span>: [WARN] [<span class="number">0xc00009d680</span>] dashboard is working ...</span><br></pre></td></tr></table></figure><h4 id="启动codis-proxy"><a href="#启动codis-proxy" class="headerlink" title="启动codis-proxy"></a>启动codis-proxy</h4><p>脚本启动 codis-proxy，并查看 proxy 日志确认启动是否有异常</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[root@codis codis]# ./admin/codis-proxy-admin.sh start</span><br><span class="line">/usr/local/gopath/src/github.com/CodisLabs/codis/admin/../config/proxy.toml</span><br><span class="line">starting codis-proxy ... </span><br><span class="line">[root@codis codis]# tail -100 ./log/codis-proxy.log.2021-01-13</span><br><span class="line">···</span><br><span class="line"><span class="number">2021</span>/<span class="number">0</span>1/<span class="number">13</span> <span class="number">14</span>:<span class="number">43</span>:<span class="number">0</span>8 main.go:<span class="number">343</span>: [WARN] rpc online proxy seems OK</span><br><span class="line"><span class="number">2021</span>/<span class="number">0</span>1/<span class="number">13</span> <span class="number">14</span>:<span class="number">43</span>:<span class="number">0</span>9 main.go:<span class="number">233</span>: [WARN] [<span class="number">0xc00018c580</span>] proxy is working ...</span><br></pre></td></tr></table></figure><h4 id="启动codis-server"><a href="#启动codis-server" class="headerlink" title="启动codis-server"></a>启动codis-server</h4><p>脚本启动 codis-server，并查看 redis 日志确认启动是否有异常</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[root@codis codis]# ./admin/codis-server-admin.sh start</span><br><span class="line">/usr/local/gopath/src/github.com/CodisLabs/codis/admin/../config/redis.conf</span><br><span class="line">starting codis-server ... </span><br><span class="line">[root@codis codis]# tail -100 /tmp/redis_6379.log</span><br><span class="line">···</span><br><span class="line"><span class="number">3006</span>:M <span class="number">13</span> Jan <span class="number">14</span>:<span class="number">46</span>:<span class="number">31.533</span> * The server is now ready to accept connections on port <span class="number">6379</span></span><br></pre></td></tr></table></figure><h4 id="启动codis-fe"><a href="#启动codis-fe" class="headerlink" title="启动codis-fe"></a>启动codis-fe</h4><p>脚本启动 codis-fe，并查看 fe 日志确认启动是否有异常</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[root@codis codis]# ./admin/codis-fe-admin.sh start</span><br><span class="line"></span><br><span class="line">starting codis-fe ... </span><br><span class="line">[root@codis codis]# tail -100 ./log/codis-fe.log.2021-01-13</span><br><span class="line"><span class="number">2021</span>/<span class="number">0</span>1/<span class="number">13</span> <span class="number">14</span>:<span class="number">49</span>:<span class="number">32</span> main.go:<span class="number">101</span>: [WARN] set ncpu = <span class="number">2</span></span><br><span class="line"><span class="number">2021</span>/<span class="number">0</span>1/<span class="number">13</span> <span class="number">14</span>:<span class="number">49</span>:<span class="number">32</span> main.go:<span class="number">104</span>: [WARN] set listen = <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:<span class="number">9090</span></span><br><span class="line"><span class="number">2021</span>/<span class="number">0</span>1/<span class="number">13</span> <span class="number">14</span>:<span class="number">49</span>:<span class="number">32</span> main.go:<span class="number">120</span>: [WARN] set assets = <span class="regexp">/usr/</span>local/gopath/src/github.com/CodisLabs/codis/bin/assets</span><br><span class="line"><span class="number">2021</span>/<span class="number">0</span>1/<span class="number">13</span> <span class="number">14</span>:<span class="number">49</span>:<span class="number">32</span> main.go:<span class="number">162</span>: [WARN] set --filesystem = <span class="regexp">/tmp/</span>codis</span><br><span class="line"><span class="number">2021</span>/<span class="number">0</span>1/<span class="number">13</span> <span class="number">14</span>:<span class="number">49</span>:<span class="number">32</span> main.go:<span class="number">216</span>: [WARN] option --pidfile = <span class="regexp">/usr/</span>local/gopath/src/github.com/CodisLabs/codis/bin/codis-fe.pid</span><br></pre></td></tr></table></figure><h4 id="通过fe添加group"><a href="#通过fe添加group" class="headerlink" title="通过fe添加group"></a>通过fe添加group</h4><p>通过web浏览器访问集群管理页面(fe地址:XX.XX.XX.XX:9090) 选择我们刚搭建的集群 codis-demo，在 Proxy 栏可看到我们已经启动的 Proxy， 但是 Group 栏为空，因为我们启动的 codis-server 并未加入到集群 添加 NEW GROUP，NEW GROUP 行输入 1，再点击 NEW GROUP 即可添加 Codis Server，Add Server 行输入我们刚刚启动的 codis-server 地址，添加到我们刚新建的 Group，然后再点击 Add Server 按钮即可，如下图所示：<br><img src="https://img.imgdb.cn/item/5ffe9e333ffa7d37b3c44d22.png"></p><h4 id="通过fe初始化slot"><a href="#通过fe初始化slot" class="headerlink" title="通过fe初始化slot"></a>通过fe初始化slot</h4><p>新增的集群 slot 状态是 offline，因此我们需要对它进行初始化（将 1024 个 slot 分配到各个 group），而初始化最快的方法可通过 fe 提供的 rebalance all slots 按钮来做，如下图所示，点击此按钮，我们即快速完成了一个集群的搭建。<br><img src="https://img.imgdb.cn/item/5ffe9e393ffa7d37b3c4526c.png"><br>未完待续。。。</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Codis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL完全备份与恢复</title>
      <link href="2021/01/12/MySQL%E5%AE%8C%E5%85%A8%E5%A4%87%E4%BB%BD%E4%B8%8E%E6%81%A2%E5%A4%8D/"/>
      <url>2021/01/12/MySQL%E5%AE%8C%E5%85%A8%E5%A4%87%E4%BB%BD%E4%B8%8E%E6%81%A2%E5%A4%8D/</url>
      
        <content type="html"><![CDATA[<h2 id="数据库备份的分类"><a href="#数据库备份的分类" class="headerlink" title="数据库备份的分类"></a>数据库备份的分类</h2><ul><li>从物理与逻辑的角度，备份可以分为物理备份和逻辑备份。<br>（1）物理备份:对数据库操作系统的物理文件（如数据文件、日志文件等）的备份。<br>物理备份又可分为脱机备份（冷备份）和联机备份（热备份）。<br>1、冷备份:是在关闭数据库的时候进行的<br>2、热备份:数据库处于运行状态，这种备份方法依赖于数据库的日志文件<br>3、温备份:数据库锁定表格（不可写入但可读）的状态下进行的<br>（2）逻辑备份:对数据库逻辑组件（如表等数据库对象）的备份</li><li>从数据库的备份策略角度，备份可分为完全备份、差异备份和增量备份<br>（1）完全备份:每次对数据进行完整的备份<br>对整个数据库的备份、数据库结构和文件结构的备份，保存的是备份完成时刻的数据月异备份与增量备份的基础。<br>优点:备份与恢复操作简单方便<br>缺点:数据存在大量的重复；占用大量的空间；备份与恢复时间长<br>（2）差异备份:备份那些自从上次完全备份之后被修改过的所有文件<br>备份的时间节点是从上次完整备份起，备份数据量会越来越大。恢复数据时，只需恢复上次的完全备份与最近的一次差异备份。<br>（3）增量备份:只有那些在上次完全备份或者增量备份后被修改的文件才会被备份<br>以上次完整备份或上次的增量备份的时间为时间点，仅备份这之间的数据变化，因而备份的数据量小，占用空间小，备份速度快。但恢复时，需要从上一次的完整备份起到最后一次增量备份依次恢复，如中间某次的备份数据损坏，将导致数据的丢失。<h2 id="举个栗子"><a href="#举个栗子" class="headerlink" title="举个栗子"></a>举个栗子</h2><h3 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h3><h4 id="查看linux的版本"><a href="#查看linux的版本" class="headerlink" title="查看linux的版本"></a>查看linux的版本</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[root@mysql ~]# cat /etc/redhat-release</span><br><span class="line">CentOS Linux release <span class="number">7.8</span><span class="number">.2003</span> (Core)</span><br></pre></td></tr></table></figure><h4 id="CMake源码安装"><a href="#CMake源码安装" class="headerlink" title="CMake源码安装"></a>CMake源码安装</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[root@mysql ~]# yum -y install gcc-c++ pcre pcre-devel zlib zlib-devel openssl openssl-devel mlocate bzip2 lrzsz ncurses-devel</span><br><span class="line">[root@mysql ~]# wget https://github.com/Kitware/CMake/releases/download/v3.19.2/cmake-3.19.2.tar.gz</span><br><span class="line">[root@mysql ~]# tar -zxvf cmake-3.19.2.tar.gz -C /usr/local/</span><br><span class="line">[root@mysql ~]# cd /usr/local/cmake-3.19.2/</span><br><span class="line">[root@mysql cmake-3.19.2]# ./configure</span><br><span class="line">[root@mysql cmake-3.19.2]# gmake &amp;&amp; make install</span><br><span class="line">[root@mysql cmake-3.19.2]# cmake --version</span><br><span class="line">cmake version <span class="number">3.19</span><span class="number">.2</span></span><br><span class="line"></span><br><span class="line">CMake suite maintained and supported by Kitware (kitware.com/cmake).</span><br></pre></td></tr></table></figure><h4 id="gcc升级"><a href="#gcc升级" class="headerlink" title="gcc升级"></a>gcc升级</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line">[root@mysql ~]# yum -y install centos-release-scl devtoolset-9-gcc devtoolset-9-gcc-c++ devtoolset-9-binutils</span><br><span class="line">[root@mysql ~]# scl enable devtoolset-9 bash</span><br><span class="line">[root@mysql ~]# echo &quot;source /opt/rh/devtoolset-9/enable&quot; &gt;&gt;/etc/profile</span><br><span class="line">[root@mysql ~]# source /etc/profile</span><br></pre></td></tr></table></figure><h4 id="MySQL源码安装"><a href="#MySQL源码安装" class="headerlink" title="MySQL源码安装"></a>MySQL源码安装</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[root@mysql ~]# yum -y remove mari*</span><br><span class="line">[root@mysql ~]# wget https://dev.mysql.com/get/Downloads/MySQL-8.0/mysql-boost-8.0.22.tar.gz</span><br><span class="line">[root@mysql ~]# tar -zxvf mysql-boost-8.0.22.tar.gz -C /usr/local/</span><br><span class="line">[root@mysql ~]# cd /usr/local/mysql-8.0.22/</span><br><span class="line">[root@mysql mysql-8.0.22]# groupadd mysql</span><br><span class="line">[root@mysql mysql-8.0.22]# useradd -r -g mysql -s /sbin/nologin mysql</span><br><span class="line">[root@mysql mysql-8.0.22]# mkdir -p /usr/local/mysql</span><br><span class="line">[root@mysql mysql-8.0.22]# mkdir -p /data/mysql/</span><br><span class="line">[root@mysql mysql-8.0.22]# chown -R mysql.mysql /usr/local/mysql/</span><br><span class="line">[root@mysql mysql-8.0.22]# chown -R mysql.mysql /data/mysql/</span><br><span class="line">[root@mysql mysql-8.0.22]# chmod -R 755 /data/mysql/</span><br><span class="line">[root@mysql mysql-8.0.22]# chmod -R 755 /usr/local/mysql/</span><br><span class="line">[root@mysql mysql-8.0.22]# cmake . -DCMAKE_INSTALL_PREFIX=/usr/local/mysql -DMYSQL_DATADIR=/data/mysql -DSYSCONFDIR=/etc -DMYSQL_TCP_PORT=3306 -DWITH_BOOST=/usr/local/mysql-8.0.22/boost -DDEFAULT_CHARSET=utf8 -DDEFAULT_COLLATION=utf8_general_ci -DENABLED_LOCAL_INFILE=ON -DWITH_INNODB_MEMCACHED=ON -DWITH_INNOBASE_STORAGE_ENGINE=1 -DWITH_FEDERATED_STORAGE_ENGINE=1 -DWITH_BLACKHOLE_STORAGE_ENGINE=1 -DWITH_ARCHIVE_STORAGE_ENGINE=1 -DWITHOUT_EXAMPLE_STORAGE_ENGINE=1 -DWITH_PERFSCHEMA_STORAGE_ENGINE=1 -DFORCE_INSOURCE_BUILD=1</span><br><span class="line">[root@mysql mysql-8.0.22]# make &amp;&amp; make install</span><br><span class="line">[root@mysql mysql-8.0.22]# cd bin/</span><br><span class="line">[root@mysql bin]# ./mysqld --initialize-insecure --user=mysql --basedir=/usr/local/mysql --datadir=/data/mysql</span><br><span class="line">[root@mysql bin]# vim /etc/my.cnf</span><br><span class="line">[client]</span><br><span class="line">port=<span class="number">3306</span></span><br><span class="line">socket=<span class="regexp">/tmp/my</span>sql.sock</span><br><span class="line">#<span class="keyword">default</span>-character-set=utf8</span><br><span class="line">#user=root</span><br><span class="line">#password=<span class="number">123456</span></span><br><span class="line">[mysqld]</span><br><span class="line">server-id=<span class="number">1</span></span><br><span class="line">#skip-grant-tables</span><br><span class="line">port=<span class="number">3306</span></span><br><span class="line">user=mysql</span><br><span class="line">max_connections=<span class="number">200</span></span><br><span class="line">socket=<span class="regexp">/tmp/my</span>sql.sock</span><br><span class="line">basedir=<span class="regexp">/usr/</span>local/mysql</span><br><span class="line">datadir=<span class="regexp">/data/my</span>sql</span><br><span class="line">pid-file=<span class="regexp">/data/my</span>sql/mysql.pid</span><br><span class="line">init-connect=<span class="string">&#x27;SET NAMES utf8&#x27;</span></span><br><span class="line">#character-set-server=utf8</span><br><span class="line"><span class="keyword">default</span>-storage-engine=INNODB</span><br><span class="line">log_error=<span class="regexp">/data/my</span>sql/mysql-error.log</span><br><span class="line">slow_query_log_file=<span class="regexp">/data/my</span>sql/mysql-slow.log</span><br><span class="line">[mysqldump]</span><br><span class="line">quick</span><br><span class="line">max_allowed_packet=<span class="number">16</span>M</span><br><span class="line">[root@mysql bin]# echo &quot;PATH=/usr/local/mysql/bin:$PATH&quot; &gt;&gt; /etc/profile</span><br><span class="line">[root@mysql bin]# source /etc/profile</span><br><span class="line">[root@mysql bin]# cp /usr/local/mysql-8.0.22/support-files/mysql.server /etc/init.d/mysqld</span><br><span class="line">[root@mysql bin]# vim /etc/init.d/mysqld</span><br><span class="line">···</span><br><span class="line">basedir=<span class="regexp">/usr/</span>local/mysql</span><br><span class="line">datadir=<span class="regexp">/data/my</span>sql</span><br><span class="line">···</span><br><span class="line">[root@mysql bin]# chmod +x /etc/init.d/mysqld</span><br><span class="line">[root@mysql bin]# /etc/init.d/mysqld start</span><br><span class="line">[root@mysql bin]# mysql -u root -p</span><br><span class="line">Enter password: </span><br><span class="line">Welcome to the MySQL monitor.  Commands end <span class="keyword">with</span> ; or \g.</span><br><span class="line">Your MySQL connection id is <span class="number">12</span></span><br><span class="line">Server version: <span class="number">8.0</span><span class="number">.22</span> Source distribution</span><br><span class="line"></span><br><span class="line">Copyright (c) <span class="number">2000</span>, <span class="number">2020</span>, Oracle and/or its affiliates. All rights reserved.</span><br><span class="line"></span><br><span class="line">Oracle is a registered trademark <span class="keyword">of</span> Oracle Corporation and/or its</span><br><span class="line">affiliates. Other names may be trademarks <span class="keyword">of</span> their respective</span><br><span class="line">owners.</span><br><span class="line"></span><br><span class="line">Type <span class="string">&#x27;help;&#x27;</span> or <span class="string">&#x27;\h&#x27;</span> <span class="keyword">for</span> help. Type <span class="string">&#x27;\c&#x27;</span> to clear the current input statement.</span><br><span class="line"></span><br><span class="line">mysql&gt; </span><br></pre></td></tr></table></figure>MySQL初步搭建完成<h3 id="完全备份与恢复"><a href="#完全备份与恢复" class="headerlink" title="完全备份与恢复"></a>完全备份与恢复</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[root@mysql ~]# mysql -u root -p</span><br><span class="line">Enter password: </span><br><span class="line">Welcome to the MySQL monitor.  Commands end <span class="keyword">with</span> ; or \g.</span><br><span class="line">Your MySQL connection id is <span class="number">15</span></span><br><span class="line">Server version: <span class="number">8.0</span><span class="number">.22</span> Source distribution</span><br><span class="line"></span><br><span class="line">Copyright (c) <span class="number">2000</span>, <span class="number">2020</span>, Oracle and/or its affiliates. All rights reserved.</span><br><span class="line"></span><br><span class="line">Oracle is a registered trademark <span class="keyword">of</span> Oracle Corporation and/or its</span><br><span class="line">affiliates. Other names may be trademarks <span class="keyword">of</span> their respective</span><br><span class="line">owners.</span><br><span class="line"></span><br><span class="line">Type <span class="string">&#x27;help;&#x27;</span> or <span class="string">&#x27;\h&#x27;</span> <span class="keyword">for</span> help. Type <span class="string">&#x27;\c&#x27;</span> to clear the current input statement.</span><br><span class="line"></span><br><span class="line">mysql&gt; create database auth;</span><br><span class="line">Query OK, <span class="number">1</span> row affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; use auth;</span><br><span class="line">Database changed</span><br><span class="line">mysql&gt; create table user(name char(<span class="number">10</span>)not <span class="literal">null</span>,ID int(<span class="number">48</span>));</span><br><span class="line">Query OK, <span class="number">0</span> rows affected, <span class="number">1</span> warning (<span class="number">0.02</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; insert into user values(<span class="string">&#x27;liangzai&#x27;</span>,<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line">Query OK, <span class="number">1</span> row affected (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * <span class="keyword">from</span> user;</span><br><span class="line">+----------+------+</span><br><span class="line">| name     | ID   |</span><br><span class="line">+----------+------+</span><br><span class="line">| liangzai |    <span class="number">1</span> |</span><br><span class="line">+----------+------+</span><br><span class="line"><span class="number">1</span> row <span class="keyword">in</span> set (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h4 id="mysqldump备份"><a href="#mysqldump备份" class="headerlink" title="mysqldump备份"></a>mysqldump备份</h4>MySQL自带的备份工具，相当方便对MySQl进行备份。通过该命令工具可以将制定的库、表或全部的库导出为SQL脚本，在需要恢复时可进行数据恢复。</li><li>对单个库进行完全备份<br>格式：mysqldump -u 用户名 -p [密码] [选项] [数据库名] &gt; /备份路径/备份文件名<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[root@mysql ~]# mkdir backup</span><br><span class="line">[root@mysql ~]# mysqldump -uroot -p auth &gt; backup/auth-$(date +%Y%m%d).sql</span><br><span class="line">[root@mysql ~]# echo $?</span><br><span class="line">[root@mysql ~]# ls backup/</span><br><span class="line">auth-<span class="number">20210112.</span>sql</span><br></pre></td></tr></table></figure></li><li>对多个库进行完全备份<br>格式：mysqldump -u 用户名 -p [密码] [选项] –databases库名1 [库名2] &gt; /备份路径/备份文件名<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[root@mysql ~]# mysqldump -u root -p --databases mysql auth &gt; backup/mysql+auth-$(date +%Y%m%d).sql</span><br><span class="line">[root@mysql ~]# ls backup/</span><br><span class="line">mysql+auth-<span class="number">20210112.</span>sql</span><br></pre></td></tr></table></figure></li><li>对所有库进行完全备份<br>格式: mysqldump -u 用户名 -p [密码] [选项] –all-databases 备份路径/备份文件名<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[root@mysql ~]# mysqldump -u root -p --opt --all-databases &gt; backup/mysql_all.$(date +%Y%m%d).sql</span><br><span class="line"># 加快备份速度,当备份数据量大时使用</span><br><span class="line">[root@mysql ~]# ls backup/</span><br><span class="line">mysql_all<span class="number">.20210112</span>.sql</span><br></pre></td></tr></table></figure></li><li>对表进行完全备份<br>格式: mysqldump -u 用户名 -p [密码] [选项] 数据库名 表名 &gt; /备份路径/备份文件名<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[root@mysql ~]# mysqldump -u root -p auth user &gt; backup/auth_user-$(date +%Y%m%d).sql</span><br><span class="line">[root@mysql ~]# ls backup/</span><br><span class="line">auth_user-<span class="number">20210112.</span>sql</span><br></pre></td></tr></table></figure></li><li>对表结构的备份<br>格式: mysqldump -u 用户名 p [密码] -d 数据名 表名 &gt; /备份路径/备份文件名<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[root@mysql ~]# mysqldump -u root -p -d mysql user &gt; backup/des_mysql_user-$(date +%Y%m%d).sql</span><br><span class="line">[root@mysql ~]# ls backup/</span><br><span class="line">des_mysql_user-<span class="number">20210112.</span>sql</span><br></pre></td></tr></table></figure><h4 id="数据恢复"><a href="#数据恢复" class="headerlink" title="数据恢复"></a>数据恢复</h4><h5 id="source命令"><a href="#source命令" class="headerlink" title="source命令"></a>source命令</h5>执行 source 备份路径<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">mysql&gt; show databases;</span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| auth               |</span><br><span class="line">| information_schema |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| sys                |</span><br><span class="line">+--------------------+</span><br><span class="line"><span class="number">5</span> rows <span class="keyword">in</span> set (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; drop database auth;</span><br><span class="line">Query OK, <span class="number">1</span> row affected (<span class="number">0.02</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; show databases;</span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| sys                |</span><br><span class="line">+--------------------+</span><br><span class="line"><span class="number">4</span> rows <span class="keyword">in</span> set (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; source backup/auth-<span class="number">20210112.</span>sql</span><br><span class="line"></span><br><span class="line">mysql&gt; show databases;</span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| auth               |</span><br><span class="line">| information_schema |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| sys                |</span><br><span class="line">+--------------------+</span><br><span class="line"><span class="number">5</span> rows <span class="keyword">in</span> set (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h5 id="mysql命令"><a href="#mysql命令" class="headerlink" title="mysql命令"></a>mysql命令</h5>mysql -u 用户名 -p [密码] &lt; 库备份脚本的路径<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[root@mysql ~]# mysql -u root -p -e &#x27;show databases;&#x27;</span><br><span class="line">Enter password: </span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| auth               |</span><br><span class="line">| information_schema |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| sys                |</span><br><span class="line">+--------------------+</span><br><span class="line">[root@mysql ~]# mysql -u root -p -e &#x27;drop database auth;&#x27;</span><br><span class="line">Enter password: </span><br><span class="line">[root@mysql ~]# mysql -u root -p -e &#x27;show databases;&#x27;</span><br><span class="line">Enter password: </span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| sys                |</span><br><span class="line">+--------------------+</span><br><span class="line">[root@mysql ~]# mysql -u root -p &lt; backup/mysql_all.20210112.sql </span><br><span class="line">Enter password: </span><br><span class="line">[root@mysql ~]# mysql -u root -p -e &#x27;show databases;&#x27;</span><br><span class="line">Enter password: </span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| auth               |</span><br><span class="line">| information_schema |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| sys                |</span><br><span class="line">+--------------------+</span><br></pre></td></tr></table></figure>mysql -u 用户名 -p [密码] 库名 &lt;表备份脚本的路径<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[root@mysql ~]# mysql -u root -p -e &#x27;drop table auth.user;&#x27;</span><br><span class="line">Enter password: </span><br><span class="line">[root@mysql ~]# mysql -u root -p -e &#x27;select * from auth.user;&#x27;</span><br><span class="line">Enter password: </span><br><span class="line">ERROR <span class="number">1146</span> (<span class="number">42</span>S02) at line <span class="number">1</span>: Table <span class="string">&#x27;auth.user&#x27;</span> doesn<span class="string">&#x27;t exist</span></span><br><span class="line"><span class="string">[root@mysql ~]# mysql -u root -p auth &lt; backup/auth_user-20210112.sql </span></span><br><span class="line"><span class="string">Enter password: </span></span><br><span class="line"><span class="string">[root@mysql ~]# mysql -u root -p -e &#x27;</span>select * <span class="keyword">from</span> auth.user;<span class="string">&#x27;</span></span><br><span class="line"><span class="string">Enter password: </span></span><br><span class="line"><span class="string">+----------+------+</span></span><br><span class="line"><span class="string">| name     | ID   |</span></span><br><span class="line"><span class="string">+----------+------+</span></span><br><span class="line"><span class="string">| liangzai |    1 |</span></span><br><span class="line"><span class="string">+----------+------+</span></span><br></pre></td></tr></table></figure>未完待续…</li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx缓存加速</title>
      <link href="2020/12/31/Nginx%E7%BC%93%E5%AD%98%E5%8A%A0%E9%80%9F/"/>
      <url>2020/12/31/Nginx%E7%BC%93%E5%AD%98%E5%8A%A0%E9%80%9F/</url>
      
        <content type="html"><![CDATA[<h2 id="Nginx-缓存加速概述"><a href="#Nginx-缓存加速概述" class="headerlink" title="Nginx 缓存加速概述"></a>Nginx 缓存加速概述</h2><h3 id="Nginx支持类似Squid的缓存功能"><a href="#Nginx支持类似Squid的缓存功能" class="headerlink" title="Nginx支持类似Squid的缓存功能"></a>Nginx支持类似Squid的缓存功能</h3><ul><li>把URL以及相关信息当成key,用MD5编码哈希后，把数据文件保存在硬盘上。只能为指定的URL或者状态码设置过期时间，并不支持类似squid的purge命令来手动清除指定缓存页面。</li><li>可通过第三方的ngx_ cache_purge 来清除指定的URL缓存。</li><li>Nginx的缓存加速功能是由proxy_cache和fastcgi_cache 两个功能模块完成的。<h3 id="Nginx缓存加速特点"><a href="#Nginx缓存加速特点" class="headerlink" title="Nginx缓存加速特点"></a>Nginx缓存加速特点</h3></li><li>缓存功能十分稳定，运行速度不逊于squid, 对多核CPU的利用率比其他的开源软件也要好，支持高并发请求数，能同时承受更多的访问请求。<h2 id="Nginx-缓存加速案例"><a href="#Nginx-缓存加速案例" class="headerlink" title="Nginx 缓存加速案例"></a>Nginx 缓存加速案例</h2></li></ul><table><thead><tr><th align="center">服务器名</th><th align="center">操作系统</th><th align="center">IP</th></tr></thead><tbody><tr><td align="center">nginx  ngx_cache_purge</td><td align="center">CentOS 7</td><td align="center">192.168.0.36</td></tr><tr><td align="center">web</td><td align="center">windows</td><td align="center">192.168.0.54</td></tr></tbody></table><h3 id="Nginx端配置"><a href="#Nginx端配置" class="headerlink" title="Nginx端配置"></a>Nginx端配置</h3><h4 id="源码安装Nginx"><a href="#源码安装Nginx" class="headerlink" title="源码安装Nginx"></a>源码安装Nginx</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line">[root@nginx ~]# yum -y install pcre-devel zlib-devel gcc gcc-c++ make</span><br><span class="line">[root@nginx ~]# wget https://nginx.org/download/nginx-1.18.0.tar.gz</span><br><span class="line">[root@nginx ~]# wget http://labs.frickle.com/files/ngx_cache_purge-2.3.tar.gz</span><br><span class="line">[root@nginx ~]# ls</span><br><span class="line">nginx-<span class="number">1.18</span><span class="number">.0</span>.tar.gz  ngx_cache_purge-<span class="number">2.3</span>.tar.gz</span><br><span class="line">[root@nginx ~]# yum -y install pcre-devel zlib-devel gcc gcc-c++ make</span><br><span class="line">[root@nginx ~]# tar -zvxf nginx-1.18.0.tar.gz -C /usr/local/</span><br><span class="line">[root@nginx ~]# tar -zvxf ngx_cache_purge-2.3.tar.gz -C /usr/local/</span><br><span class="line">[root@nginx ~]# cd /usr/local/nginx-1.18.0/</span><br><span class="line">[root@nginx nginx-1.18.0]# ./configure --prefix=/usr/local/nginx --user=nginx --group=nginx --with-http_stub_status_module --with-pcre --add-module=/usr/local/ngx_cache_purge-2.3/</span><br><span class="line">[root@nginx nginx-1.18.0]# make &amp;&amp; make install</span><br><span class="line">[root@nginx nginx-1.18.0]# ln -s /usr/local/nginx/sbin/nginx /usr/local/sbin/</span><br></pre></td></tr></table></figure><h4 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[root@nginx nginx-1.18.0]# cd /usr/local/nginx/conf/</span><br><span class="line">[root@nginx conf]# vim nginx.conf</span><br><span class="line">#user  nobody;</span><br><span class="line">user nginx nginx;</span><br><span class="line"># 以nginx用户和组运行</span><br><span class="line"></span><br><span class="line">worker_processes  <span class="number">1</span>;</span><br><span class="line"># 启动进程数，根据物理CPU个数设置</span><br><span class="line"></span><br><span class="line">#error_log  logs/error.log;</span><br><span class="line">#error_log  logs/error.log  notice;</span><br><span class="line">#error_log  logs/error.log  info;</span><br><span class="line">error_log  logs/error.log  crit;</span><br><span class="line"># 定义错误日志，级别为crit</span><br><span class="line"></span><br><span class="line">pid        logs/nginx.pid;</span><br><span class="line"></span><br><span class="line">worker_rlimit_nofile <span class="number">65535</span>;</span><br><span class="line"># 打开文件的最大句柄数，最好与ulimit -n的值保持一致，使用ulimit -SHn 进行设置</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    use epoll;</span><br><span class="line">    # Nginx 使用了最新的epoll网络I/O模型</span><br><span class="line">    worker_connections  <span class="number">65535</span>;</span><br><span class="line">    # 每个工作进程允许最大的同时连接数</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    # mime.types 内定义各文件类型映像</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line">    # 设置默认类型是二进制流，若没有设置，比如加载PHP时，是不预解析，用浏览器访问则出现下载窗口</span><br><span class="line">    #log_format  main  <span class="string">&#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span></span><br><span class="line">    #                  &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span><br><span class="line">    #                  &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;</span><br><span class="line"></span><br><span class="line">    #access_log  logs/access.log  main;</span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line">    # 打开系统函数sendfile()，支持下载</span><br><span class="line">    tcp_nopush     on;</span><br><span class="line">    # 只有先打开Linux下的tcp_cork,sendfile打开时才有效</span><br><span class="line">    </span><br><span class="line">    #keepalive_timeout  <span class="number">0</span>;</span><br><span class="line">    keepalive_timeout  <span class="number">65</span>;</span><br><span class="line">    # 会话保持时间，设置的低一些可以让nginx持续工作的时间更长</span><br><span class="line">    </span><br><span class="line">    #gzip  on;</span><br><span class="line">    </span><br><span class="line">    tcp_nodelay on;</span><br><span class="line">    # 不要缓存数据，而是一段一段的发送——当需要及时发送数据时，就应该设置这个属性，这样发送一小块数据信息时就不能立即得到返回值</span><br><span class="line">    client_body_buffer_size <span class="number">512</span>k;</span><br><span class="line">    # 指定连接请求实体的缓存大小</span><br><span class="line">    proxy_connect_timeout <span class="number">5</span>;</span><br><span class="line">    # 代理连接超时时间，单位秒</span><br><span class="line">    proxy_read_timeout <span class="number">60</span>;</span><br><span class="line">    # 代理接收超时</span><br><span class="line">    proxy_send_timeout <span class="number">5</span>;</span><br><span class="line">    # 代理发送超时</span><br><span class="line">    proxy_buffer_size <span class="number">16</span>k;</span><br><span class="line">    # 代理缓存文件大小</span><br><span class="line">    proxy_buffers <span class="number">4</span> <span class="number">64</span>k;</span><br><span class="line">    # 代理缓存区的数量及大小，默认一个缓冲区大小与页面大小相等</span><br><span class="line">    proxy_busy_buffers_size <span class="number">128</span>k;</span><br><span class="line">    # 高负荷下缓存区大小</span><br><span class="line">    proxy_temp_file_write_size <span class="number">128</span>k;   </span><br><span class="line">    # 代理临时文件大小</span><br><span class="line">    proxy_temp_path /<span class="keyword">var</span>/cache/nginx/cache_temp;</span><br><span class="line">    # 代理临时文件存放目录</span><br><span class="line">    proxy_cache_path /<span class="keyword">var</span>/cache/nginx/proxy_cache levels=<span class="number">1</span>:<span class="number">2</span> keys_zone=cache_one:<span class="number">200</span>m inactive=<span class="number">1</span>d max_size=<span class="number">30</span>g;</span><br><span class="line">    # 代理缓存存放路径，第一层目录只有一个字符，是由levels=1:2设置，总共二层目录，子目录名字由二个字符组成，键值名称为cache_one（名字随意），在内存中缓存的空间大小为200MB，1天内没有被访问的缓存将自动清除，硬盘缓存空间为30GB</span><br><span class="line">    # 注：proxy_temp_path与proxy_cache_path指定的路径必须在同一分区</span><br><span class="line">    </span><br><span class="line">    upstream backend_server &#123;</span><br><span class="line">         server <span class="number">192.168</span><span class="number">.0</span><span class="number">.54</span>:<span class="number">80</span> weight=<span class="number">1</span> max_fails=<span class="number">2</span> fail_timeout=<span class="number">30</span>s;</span><br><span class="line">    &#125;</span><br><span class="line">    # 上游服务器节点，权重1（数字越大权重越大），30秒内访问失败次数大于等于2次，将在30秒内停止访问此节点，30秒后计数器清零，可以重新访问。</span><br><span class="line">    </span><br><span class="line">    server &#123;</span><br><span class="line">        listen       <span class="number">80</span>;</span><br><span class="line">        server_name  localhost <span class="number">192.168</span><span class="number">.0</span><span class="number">.36</span>;</span><br><span class="line">  </span><br><span class="line">        #charset koi8-r;</span><br><span class="line">        charset utf-<span class="number">8</span>;</span><br><span class="line">        </span><br><span class="line">        #access_log  logs/host.access.log  main;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            root   html;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">            proxy_next_upstream http_502 http_504 error timeout invalid_header;</span><br><span class="line">            # 如果后端服务器返回502、504、错误等错误，自动跳转到upstream负载均衡池中的另一台服务器，实现故障转义</span><br><span class="line">        proxy_cache cache_one</span><br><span class="line">            proxy_cache_valid <span class="number">200</span> <span class="number">304</span> <span class="number">2</span>h;</span><br><span class="line">            # 对不同的HTTP状态码设置不同的缓存时间</span><br><span class="line">            proxy_cache_key $host$uri$is_args$args;</span><br><span class="line">            # 以域名、URI、参数组合成Web缓存的Key值，nginx根据Key值哈希，存储缓存内容到二级缓存目录内</span><br><span class="line">        proxy_set_header Host $host;</span><br><span class="line">        proxy_set_header X-Forwarded-For $remote_addr;</span><br><span class="line">            proxy_pass http:<span class="comment">//backend_server;</span></span><br><span class="line">            # 指定跳转服务器池，名字要与upstream设定的相同</span><br><span class="line">            expires <span class="number">1</span>d;</span><br><span class="line">            # 用于清除缓存</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        location ~ <span class="regexp">/purge(/</span>.*) &#123;</span><br><span class="line">        # 设置允许清除缓存的主机IP或网段</span><br><span class="line">            allow <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>;</span><br><span class="line">        allow <span class="number">192.168</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">24</span>;</span><br><span class="line">        deny all;</span><br><span class="line">        proxy_cache_purge cache_one $host$1$is_args$args;</span><br><span class="line">&#125;</span><br><span class="line">        </span><br><span class="line">        location ~ .*\.(php|jsp|cgi)?$ &#123;</span><br><span class="line">        # 扩展名以php、jsp、cgi结尾的动态应用程序不缓存</span><br><span class="line">        proxy_set_header Host $host;</span><br><span class="line">            proxy_set_header X-Forwarded-For $remote_addr;</span><br><span class="line">            proxy_pass http:<span class="comment">//backend_server;</span></span><br><span class="line">&#125;</span><br><span class="line">        access_log off;</span><br><span class="line">        #error_page  <span class="number">404</span>              /<span class="number">404.</span>html;</span><br><span class="line"></span><br><span class="line">        # redirect server error pages to the static page /50x.html</span><br><span class="line">        #</span><br><span class="line">        error_page   <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span>  /<span class="number">50</span>x.html;</span><br><span class="line">        location = /<span class="number">50</span>x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">[root@nginx conf]# useradd -M -s /sbin/nologin nginx</span><br><span class="line">[root@nginx conf]# mkdir /var/cache/nginx</span><br><span class="line">[root@nginx conf]# ulimit -SHn 65535</span><br><span class="line">[root@nginx conf]# nginx -t</span><br><span class="line">nginx: the configuration file /usr/local/nginx/conf/nginx.conf syntax is ok</span><br><span class="line">nginx: configuration file /usr/local/nginx/conf/nginx.conf test is successful</span><br><span class="line">[root@nginx conf]# netstat -antp |grep nginx</span><br><span class="line">tcp        <span class="number">0</span>      <span class="number">0</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:<span class="number">80</span>              <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:*               LISTEN      <span class="number">32540</span>/nginx: master </span><br></pre></td></tr></table></figure><h3 id="web端配置"><a href="#web端配置" class="headerlink" title="web端配置"></a>web端配置</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[root@web ~]# yum -y install httpd</span><br><span class="line">[root@web ~]# vim /etc/httpd/conf/httpd.conf</span><br><span class="line">···</span><br><span class="line">ServerName www.example.com:<span class="number">80</span></span><br><span class="line">···</span><br><span class="line">[root@web ~]# echo &quot;liangzai&quot; &gt;/var/www/html/index.html</span><br><span class="line">[root@web ~]# systemctl start httpd</span><br><span class="line">[root@web ~]# netstat -antp |grep httpd</span><br><span class="line">tcp6       <span class="number">0</span>      <span class="number">0</span> :::<span class="number">80</span>                   :::*                    LISTEN      <span class="number">28694</span>/httpd         </span><br></pre></td></tr></table></figure><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><h4 id="测试Nginx缓存服务器"><a href="#测试Nginx缓存服务器" class="headerlink" title="测试Nginx缓存服务器"></a>测试Nginx缓存服务器</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[root@nginx conf]# ll /var/cache/nginx/proxy_cache/</span><br><span class="line">total <span class="number">0</span></span><br></pre></td></tr></table></figure><h4 id="浏览器访问测试"><a href="#浏览器访问测试" class="headerlink" title="浏览器访问测试"></a>浏览器访问测试</h4><p><img src="https://pic.downk.cc/item/5fedc3d33ffa7d37b3b2ac1b.png"></p><h4 id="查看Nginx服务器缓存"><a href="#查看Nginx服务器缓存" class="headerlink" title="查看Nginx服务器缓存"></a>查看Nginx服务器缓存</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[root@nginx conf]# ls /var/cache/nginx/proxy_cache/0/</span><br><span class="line"><span class="number">4</span>c</span><br><span class="line">[root@nginx conf]# ls /var/cache/nginx/proxy_cache/0/4c</span><br><span class="line"><span class="number">29513</span>b424f76af259b61d73cbe4df4c0</span><br></pre></td></tr></table></figure><h4 id="清除浏览器缓存"><a href="#清除浏览器缓存" class="headerlink" title="清除浏览器缓存"></a>清除浏览器缓存</h4><p><img src="https://pic.downk.cc/item/5fedc3d73ffa7d37b3b2b288.png"></p><h4 id="查看Nginx服务器缓存-1"><a href="#查看Nginx服务器缓存-1" class="headerlink" title="查看Nginx服务器缓存"></a>查看Nginx服务器缓存</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[root@nginx conf]# ls /var/cache/nginx/proxy_cache/0/4c</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可以看到初步搭建成功</p>]]></content>
      
      
      <categories>
          
          <category> 缓存加速 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HAProxy+Nginx负载均衡介绍与搭建</title>
      <link href="2020/12/28/HAProxy+Nginx%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E4%BB%8B%E7%BB%8D%E4%B8%8E%E6%90%AD%E5%BB%BA/"/>
      <url>2020/12/28/HAProxy+Nginx%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E4%BB%8B%E7%BB%8D%E4%B8%8E%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h2 id="HAProxy简介"><a href="#HAProxy简介" class="headerlink" title="HAProxy简介"></a>HAProxy简介</h2><p>HAProxy提供高可用性、负载均衡以及基于TCP和HTTP的应用代理，支持虚拟主机，它是免费、快速并且可靠的一种负载均衡解决方案。适合处理高负载站点的七层数据请求。类似的代理服务可以屏蔽内部真实服务器，防止内部服务器遭受攻击。</p><h3 id="HAProxy主要优点"><a href="#HAProxy主要优点" class="headerlink" title="HAProxy主要优点:"></a>HAProxy主要优点:</h3><ul><li>HAProxy是支持虚拟主机的，通过frontend指令来实现</li><li>能够补充Nginx的一些缺点比如Session的保持，Cookie 的引导等工作</li><li>支持url检测后端的服务器出问题的检测会有很好的帮助。</li><li>它跟LVS一样，本身仅仅就只是款负载均衡软件;单纯从效率上来讲HAProxy 更会比Nginx有更出色的负载均衡速度，在并发处理上也是优于Nginx的。</li><li>HAProxy可以对MySQL读进行负载均衡，对后端的MySQL节点进行检测和负载均衡，不过在后端的MySQ slaves数量超过10台时性能不如LVS,所以更推荐LVS+Keepalived。</li><li>能对请求的url和header中的信息做匹配，有比Ivs有更好的7层实现<h2 id="HAProxy-Nginx负载均衡安装"><a href="#HAProxy-Nginx负载均衡安装" class="headerlink" title="HAProxy+Nginx负载均衡安装"></a>HAProxy+Nginx负载均衡安装</h2><h3 id="HAProxy安装"><a href="#HAProxy安装" class="headerlink" title="HAProxy安装"></a>HAProxy安装</h3></li></ul><table><thead><tr><th align="center">服务器名</th><th align="center">操作系统</th><th align="center">IP</th></tr></thead><tbody><tr><td align="center">HAProxy</td><td align="center">CentOS 7</td><td align="center">192.168.0.36</td></tr><tr><td align="center">Nginx1</td><td align="center">CentOS 7</td><td align="center">192.168.0.42</td></tr><tr><td align="center">Nginx2</td><td align="center">CentOS 7</td><td align="center">192.168.0.43</td></tr></tbody></table><h4 id="准备lua环境"><a href="#准备lua环境" class="headerlink" title="准备lua环境"></a>准备lua环境</h4><p>由于CentOS7 之前版本自带的lua版本比较低并不符合HAProxy要求的lua最低版本(5.3)的要求，因此需要编译安装较新版本的lua环境<br>参考<a href="http://www.lua.org/">lua官方网站</a></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[root@haproxy ~]# lua -v</span><br><span class="line">Lua <span class="number">5.1</span><span class="number">.4</span>  Copyright (C) <span class="number">1994</span>-<span class="number">2008</span> Lua.org, PUC-Rio</span><br><span class="line">[root@haproxy ~]# yum -y install gcc readline-devel </span><br><span class="line">[root@haproxy ~]# cd /usr/local/src</span><br><span class="line">[root@haproxy src]# wget http://www.lua.org/ftp/lua-5.4.2.tar.gz</span><br><span class="line">[root@haproxy src]# tar -zxvf lua-5.4.2.tar.gz </span><br><span class="line">[root@haproxy src]# cd lua-5.4.2/</span><br><span class="line">[root@haproxy lua-5.4.2]# make linux test</span><br><span class="line">[root@haproxy lua-5.4.2]# src/lua -v</span><br><span class="line">Lua <span class="number">5.4</span><span class="number">.2</span>  Copyright (C) <span class="number">1994</span>-<span class="number">2020</span> Lua.org, PUC-Rio</span><br></pre></td></tr></table></figure><h4 id="源码安装HAProxy"><a href="#源码安装HAProxy" class="headerlink" title="源码安装HAProxy"></a>源码安装HAProxy</h4><p>参考<a href="https://www.haproxy.com/">HAProxy官网</a></p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">[root@haproxy ~]# yum -y install gcc openssl-devel pcre-devel systemd-devel</span><br><span class="line">[root@haproxy ~]# ls</span><br><span class="line">haproxy-<span class="number">2.2</span><span class="number">.6</span>.tar.gz</span><br><span class="line">[root@haproxy ~]# tar -zxvf haproxy-2.2.6.tar.gz -C /usr/local/</span><br><span class="line">[root@haproxy ~]# cd /usr/local/haproxy-2.2.6/</span><br><span class="line">[root@haproxy haproxy-2.2.6]# make  ARCH=x86_64 TARGET=linux-glibc  USE_PCRE=1 USE_OPENSSL=1 USE_ZLIB=1  USE_SYSTEMD=1  USE_LUA=1 LUA_INC=/usr/local/src/lua-5.4.2/src/  LUA_LIB=/usr/local/src/lua-5.4.2/src/ </span><br><span class="line">[root@haproxy haproxy-2.2.6]# make install PREFIX=/usr/local/haproxy</span><br></pre></td></tr></table></figure><h4 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h4><p>[root@haproxy haproxy-2.2.6]# mkdir /etc/haproxy<br>[root@haproxy haproxy-2.2.6]# vim /etc/haproxy/haproxy.cfg</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">global</span></span><br><span class="line">     log <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> local2 info</span><br><span class="line">     chroot /usr/local/haproxy</span><br><span class="line">     user haproxy</span><br><span class="line">     group haproxy</span><br><span class="line">     daemon           ## 守护进程模式    可以使用非守护默认</span><br><span class="line">     maxconn 4000     ## 最大的连接数</span><br><span class="line"></span><br><span class="line">defaults              ## 默认配置</span><br><span class="line">     log global       ## 应用全局部分的日志配置</span><br><span class="line">     mode http        ## 模式为http</span><br><span class="line">     option httplog</span><br><span class="line">     option dontlognull</span><br><span class="line">     timeout connect 5000     ## 连接超时时间</span><br><span class="line">     timeout client <span class="number">50000</span></span><br><span class="line">     timeout server 50000     ## 客户端和服务器超时时间</span><br><span class="line"></span><br><span class="line">frontend http_front</span><br><span class="line">     bind *:<span class="number">80</span></span><br><span class="line">     stats uri /haproxy-status</span><br><span class="line">     stats auth    jjh:<span class="number">123456</span></span><br><span class="line">     default_backend http_back</span><br><span class="line"></span><br><span class="line">backend http_back</span><br><span class="line">     balance roundrobin</span><br><span class="line">     option httpchk GET /index.html</span><br><span class="line">     option forwardfor header X-Forwarded-For</span><br><span class="line">     server nginx1 192.168.0.42:80 check inter 2000 rise 3 fall 3 weight 30   ## 服务器节点的地址、名称、端口 、检查间隔时间3000毫秒、健康检查次数2次认为失败</span><br><span class="line">     server nginx2 <span class="number">192.168</span><span class="number">.0</span><span class="number">.43</span>:<span class="number">80</span> check inter <span class="number">2000</span> rise <span class="number">3</span> fall <span class="number">3</span> weight <span class="number">30</span> </span><br></pre></td></tr></table></figure><h4 id="启动-HAProxy"><a href="#启动-HAProxy" class="headerlink" title="启动 HAProxy"></a>启动 HAProxy</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[root@haproxy1 haproxy-2.2.6]# cp haproxy /usr/sbin/</span><br><span class="line">[root@haproxy2 haproxy-2.2.6]# useradd -r haproxy</span><br><span class="line">[root@haproxy2 haproxy-2.2.6]# cp ./examples/haproxy.init /etc/init.d/haproxy</span><br><span class="line">[root@haproxy2 haproxy-2.2.6]# chmod 755 /etc/init.d/haproxy </span><br><span class="line">[root@haproxy2 haproxy-2.2.6]# /etc/init.d/haproxy start</span><br><span class="line">Reloading systemd:                                         [  OK  ]</span><br><span class="line">Starting haproxy (via systemctl):                          [  OK  ]   </span><br></pre></td></tr></table></figure><p>访问 <a href="http://localhost/haproxy-status">http://localhost/haproxy-status</a><br>用户名/密码（haproxy.cfg配置文件）   jjh/123456<br><img src="https://pic.downk.cc/item/5fe95d1b3ffa7d37b36af6f5.jpg"></p><h3 id="Nginx安装"><a href="#Nginx安装" class="headerlink" title="Nginx安装"></a>Nginx安装</h3><p>参考<a href="https://nginx.com/">Nginx官方网站</a><br>点击<a href="https://nginx.org/">Nginx下载</a></p><h4 id="依赖包安装"><a href="#依赖包安装" class="headerlink" title="依赖包安装"></a>依赖包安装</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line">[root@nginx ~]# yum -y install pcre-devel zlib-devel gcc gcc-c++ make</span><br></pre></td></tr></table></figure><h4 id="源码安装Nginx"><a href="#源码安装Nginx" class="headerlink" title="源码安装Nginx"></a>源码安装Nginx</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line">[root@nginx ~]# ls</span><br><span class="line">nginx-<span class="number">1.18</span><span class="number">.0</span>.tar.gz</span><br><span class="line">[root@nginx ~]# tar -zxvf nginx-1.18.0.tar.gz -C /usr/local/</span><br><span class="line">[root@nginx ~]# useradd -M -s /sbin/nologin nginx</span><br><span class="line">[root@nginx1 ~]# cd /usr/local/nginx-1.18.0/</span><br><span class="line">[root@nginx1 nginx-1.18.0]# ./configure --prefix=/usr/local/nginx --user=nginx --group=nginx --with-http_stub_status_module &amp;&amp; make &amp;&amp; make install</span><br><span class="line">[root@nginx1 nginx-1.18.0]# ln -s /usr/local/nginx/sbin/nginx /usr/local/sbin/</span><br><span class="line">[root@nginx1 nginx-1.18.0]# echo &quot;shuaige/liangzai(nginx内容不同以作区分)&quot; &gt; /usr/local/nginx/html/index.html</span><br></pre></td></tr></table></figure><h4 id="Nginx-启动"><a href="#Nginx-启动" class="headerlink" title="Nginx 启动"></a>Nginx 启动</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[root@nginx1 nginx-1.18.0]# nginx -t</span><br><span class="line">nginx: the configuration file /usr/local/nginx/conf/nginx.conf syntax is ok</span><br><span class="line">nginx: configuration file /usr/local/nginx/conf/nginx.conf test is successful</span><br></pre></td></tr></table></figure><h4 id="重启报错及解决方法"><a href="#重启报错及解决方法" class="headerlink" title="重启报错及解决方法"></a>重启报错及解决方法</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line">[root@nginx1 nginx-1.18.0]# nginx -s reload</span><br><span class="line">nginx: [error] invalid PID number <span class="string">&quot;&quot;</span> <span class="keyword">in</span> <span class="string">&quot;/usr/local/nginx/logs/nginx.pid&quot;</span></span><br><span class="line">[root@nginx1 nginx-1.18.0]# /usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.conf</span><br><span class="line">[root@nginx1 nginx-1.18.0]# nginx -s reload</span><br></pre></td></tr></table></figure><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[root@jjh ~]# curl 192.168.0.36</span><br><span class="line">shuaige</span><br><span class="line">[root@jjh ~]# curl 192.168.0.36</span><br><span class="line">liangzai</span><br></pre></td></tr></table></figure><p>可以看到初步搭建成功</p>]]></content>
      
      
      <categories>
          
          <category> 负载均衡 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HAProxy </tag>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Squid缓存加速</title>
      <link href="2020/12/28/Squid%E7%BC%93%E5%AD%98%E5%8A%A0%E9%80%9F/"/>
      <url>2020/12/28/Squid%E7%BC%93%E5%AD%98%E5%8A%A0%E9%80%9F/</url>
      
        <content type="html"><![CDATA[<h2 id="Squid简介"><a href="#Squid简介" class="headerlink" title="Squid简介"></a>Squid简介</h2><p>参考<a href="http://www.squid-cache.org/">Squid官网</a></p><h3 id="工作机制"><a href="#工作机制" class="headerlink" title="工作机制"></a>工作机制</h3><p>当客户机通过代理来请求Web页面时，指定的代理服务器会先检查自己的缓存，如果缓存中已经有客户机需要的页面，则直接将缓存中的页面内容反馈给客户机<br>如果缓存中没有客户机要访问的页面，则由代理服务器向Internet发送请求，当获得返回的Web页面后，将网页数据保存到缓存中并发送给客户机，同时记录缓存</p><h3 id="代理基本类型"><a href="#代理基本类型" class="headerlink" title="代理基本类型"></a>代理基本类型</h3><ul><li>传统代理(普通代理)<br>内网&gt;普通代理服务器&gt;外网<br>内网客户机需配置浏览器的LAN代理IP及端口<br>无需设置防火墙规则及路由转发</li><li>透明代理<br>内网&gt;透明代理服务器&gt;外网<br>内网客户机无需添加配置<br>需要配置防火墙规则(REDIRECT 重定向)，开启路由转发功能</li><li>反向代理<br>内网服务器&lt;反向代理服务器&lt;外网客户机<br>外网客户机无需添加配置<br>无需添加防火墙规则<h3 id="使用Squid代理服务器访问外网的优点"><a href="#使用Squid代理服务器访问外网的优点" class="headerlink" title="使用Squid代理服务器访问外网的优点"></a>使用Squid代理服务器访问外网的优点</h3></li><li>减少重复请求，节约带宽</li><li>具有ACL (Access Control List)访问控制列表功能，对客户机上网行为灵活控制</li><li>对内网客户机具有保护作用<h2 id="传统代理"><a href="#传统代理" class="headerlink" title="传统代理"></a>传统代理</h2><h3 id="配置Squid"><a href="#配置Squid" class="headerlink" title="配置Squid"></a>配置Squid</h3></li></ul><table><thead><tr><th align="center">服务器名</th><th align="center">操作系统</th><th align="center">IP</th></tr></thead><tbody><tr><td align="center">squid</td><td align="center">CentOS 7</td><td align="center">192.168.0.36</td></tr><tr><td align="center">nginx</td><td align="center">CentOS 7</td><td align="center">192.168.0.48</td></tr><tr><td align="center">客户机</td><td align="center">windows</td><td align="center">192.168.0.52</td></tr></tbody></table><h4 id="源码安装Squid"><a href="#源码安装Squid" class="headerlink" title="源码安装Squid"></a>源码安装Squid</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line">[root@squid ~]# yum install -y perl autoconf automake make libxml2-devel libcap-devel libtool-ltdl-devel gcc gcc-c++</span><br><span class="line">[root@squid ~]# ls</span><br><span class="line">squid-<span class="number">4.13</span>.tar.gz</span><br><span class="line">[root@squid ~]# tar -zxvf squid-4.13.tar.gz -C /usr/local/</span><br><span class="line">[root@squid ~]# cd /usr/local/squid-4.13/</span><br><span class="line">[root@squid squid-4.13]# ./configure --prefix=/usr/local/squid</span><br><span class="line">[root@squid squid-4.13]# make &amp;&amp; make install</span><br><span class="line">[root@squid squid-4.13]# ln -s /usr/local/squid/sbin/ /usr/local/sbin/</span><br><span class="line">## 创建软链接</span><br><span class="line">[root@squid squid-4.13]# useradd -M -s /sbin/nologin squid</span><br><span class="line">## 创建管理进程的用户</span><br><span class="line">[root@squid squid-4.13]# chown -R squid.squid /usr/local/squid/var/</span><br><span class="line">## 修改文件的属主和属组</span><br></pre></td></tr></table></figure><h4 id="修改Squid的配置文件"><a href="#修改Squid的配置文件" class="headerlink" title="修改Squid的配置文件"></a>修改Squid的配置文件</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[root@squid squid-4.13]# vim /etc/squid.conf</span><br><span class="line">···</span><br><span class="line">cache_effective_user squid #添加指定程序用户</span><br><span class="line">cache_effective_group squid #添加指定账号基本组</span><br><span class="line">···</span><br></pre></td></tr></table></figure><h4 id="启动Squid"><a href="#启动Squid" class="headerlink" title="启动Squid"></a>启动Squid</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line">[root@squid squid-4.13]# export PATH=$PATH:/usr/local/squid/sbin/</span><br><span class="line">[root@squid squid-4.13]# squid -k parse</span><br><span class="line">## 检查配置文件语法</span><br><span class="line">[root@squid squid-4.13]# squid           </span><br><span class="line">## 启动Squid服务</span><br><span class="line">[root@squid squid-4.13]# netstat -ntap | grep squid    </span><br><span class="line">tcp6       <span class="number">0</span>      <span class="number">0</span> :::<span class="number">3128</span>                 :::*                    LISTEN      <span class="number">28971</span>/(squid-<span class="number">1</span>)       </span><br><span class="line">## 服务启动，Squid服务处于正常监听状态</span><br></pre></td></tr></table></figure><h3 id="配置Nginx"><a href="#配置Nginx" class="headerlink" title="配置Nginx"></a>配置Nginx</h3><p>nginx 的安装及修改之前有写过就不在这里详细说明了，记得打开日志</p><h3 id="配置客户机"><a href="#配置客户机" class="headerlink" title="配置客户机"></a>配置客户机</h3><p>客户机的代理配置，在IE浏览器中，选择”工具”-&gt;”Internet选项”,然后弹出的”Internet选项”对话框，在”连接”选项中的”局域网(LAN)设置”选项组中单击”局域网设置”按钮，弹出”局域网(LAN)设置”对话框，设置如下:<br><img src="https://pic.downk.cc/item/5fe9a3053ffa7d37b3ddc84d.png"><br>访问 nginx 服务<br><img src="https://pic.downk.cc/item/5fe9a30e3ffa7d37b3ddd7ca.png"></p><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[root@nginx logs]# tailf access.log </span><br><span class="line"><span class="number">192.168</span><span class="number">.0</span><span class="number">.36</span> - - [<span class="number">28</span>/Dec/<span class="number">2020</span>:<span class="number">17</span>:<span class="number">0</span>8:<span class="number">24</span> +<span class="number">0</span>800] <span class="string">&quot;GET / HTTP/1.1&quot;</span> <span class="number">304</span> <span class="number">0</span> <span class="string">&quot;-&quot;</span> <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; WOW64; Trident/7.0; rv:11.0) like Gecko&quot;</span></span><br><span class="line"><span class="number">192.168</span><span class="number">.0</span><span class="number">.36</span> - - [<span class="number">28</span>/Dec/<span class="number">2020</span>:<span class="number">17</span>:<span class="number">0</span>8:<span class="number">24</span> +<span class="number">0</span>800] <span class="string">&quot;GET / HTTP/1.1&quot;</span> <span class="number">304</span> <span class="number">0</span> <span class="string">&quot;-&quot;</span> <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; WOW64; Trident/7.0; rv:11.0) like Gecko&quot;</span></span><br><span class="line"><span class="number">192.168</span><span class="number">.0</span><span class="number">.36</span> - - [<span class="number">28</span>/Dec/<span class="number">2020</span>:<span class="number">17</span>:<span class="number">0</span>8:<span class="number">24</span> +<span class="number">0</span>800] <span class="string">&quot;GET / HTTP/1.1&quot;</span> <span class="number">304</span> <span class="number">0</span> <span class="string">&quot;-&quot;</span> <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; WOW64; Trident/7.0; rv:11.0) like Gecko&quot;</span></span><br></pre></td></tr></table></figure><p>可以看到的确是代理服务器访问的，说明传统代理部署成功</p>]]></content>
      
      
      <categories>
          
          <category> 缓存加速 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Squid </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis介绍与安装</title>
      <link href="2020/12/20/Redis%E4%BB%8B%E7%BB%8D%E4%B8%8E%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/"/>
      <url>2020/12/20/Redis%E4%BB%8B%E7%BB%8D%E4%B8%8E%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<h2 id="Redis简介"><a href="#Redis简介" class="headerlink" title="Redis简介"></a>Redis简介</h2><p>Redis是一个开源(BSD许可),内存数据结构存储，用作数据库、缓存和消息代理。它 支持数据结构很多，如strings, hashes, lists, sets 等等。Redis 具有内置复制，Lua 脚本，LRU 清除缓存，事务和不同级别的磁盘持久性，并通过Redis Sentinel 提供高可用性，以及使用 Redis Cluster自动分区。</p><p>Redis是当前比较热门的NOSQL系统之一， 它是一个key-value存储系统。和Memcache类似，但很大程度补偿了Memcache的不足，它支持存储的value类型相对更多，包括string 、list、set、zset和hash。这些数据类型都支持push/pop、add/remove 及取交集并集和差集及 更丰富的操作。在此基础上，Redis 支持各种不同方式的排序。</p><p>和Memcache 一样，Redis数据都是缓存在计算机内存中，不同的是，Memcache只能 将数据缓存到内存中，无法自动定期写入硬盘，这就表示 一旦断电或重启，内存清空，数据丢失。所以Memcache的应用场景适用于缓存无需持久化的数据。而Redis不同的是它会周期性的把更新的数据写入磁盘或者把修改操作写入追加的记录文件，实现数据的持久化。</p><p>参考<a href="https://redis.io/">Redis官网</a></p><h2 id="Redis安装"><a href="#Redis安装" class="headerlink" title="Redis安装"></a>Redis安装</h2><h3 id="环境安装"><a href="#环境安装" class="headerlink" title="环境安装"></a>环境安装</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">[root@jjh ~]# yum -y install gcc-c++ centos-release-scl</span><br><span class="line">[root@jjh ~]# yum -y install devtoolset-9-gcc devtoolset-9-gcc-c++ devtoolset-9-binutils</span><br><span class="line"># 升级gcc版本到9.0以上</span><br><span class="line">[root@jjh ~]# scl enable devtoolset-9 bash</span><br><span class="line"># 需要注意的是scl命令启用只是临时的，退出shell或重启就会恢复原系统gcc版本。如果要长期使用gcc 9.0的话：</span><br><span class="line">[root@jjh ~]# echo &quot;source /opt/rh/devtoolset-9/enable&quot; &gt;&gt;/etc/profile</span><br><span class="line"># 这样退出shell重新打开就是新版的gcc了，以下其他版本同理，修改devtoolset版本号即可</span><br></pre></td></tr></table></figure><h3 id="下载Redis-6-0-9"><a href="#下载Redis-6-0-9" class="headerlink" title="下载Redis 6.0.9"></a>下载Redis 6.0.9</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[root@jjh ~]# wget https://download.redis.io/releases/redis-6.0.9.tar.gz</span><br><span class="line">[root@jjh ~]# tar -zxvf redis-6.0.9.tar.gz -C /usr/local/</span><br><span class="line">[root@jjh ~]# cd /usr/local/redis-6.0.9/</span><br><span class="line">[root@jjh ~]# ln -s /usr/local/redis-6.0.9/ /usr/local/redis</span><br><span class="line">[root@jjh redis-6.0.9]# yum -y install tcl</span><br><span class="line">[root@jjh redis-6.0.9]#  make</span><br><span class="line">[root@jjh redis-6.0.9]#  make test</span><br><span class="line">···</span><br><span class="line">\o/ All tests passed without errors!</span><br><span class="line"></span><br><span class="line">Cleanup: may take some time... OK</span><br><span class="line">···</span><br><span class="line">[root@jjh redis-6.0.9]# make install</span><br><span class="line">[root@jjh redis-6.0.9]# mkdir conf bin</span><br><span class="line">[root@jjh redis-6.0.9]# cp redis.conf sentinel.conf conf/</span><br><span class="line">[root@jjh redis-6.0.9]# find src/ -perm 755 -type f -exec cp &#123;&#125; bin/ \;</span><br><span class="line">[root@jjh redis-6.0.9]# ls bin/</span><br><span class="line">redis-benchmark  redis-check-aof  redis-check-rdb  redis-cli  redis-sentinel  redis-server</span><br><span class="line">[root@jjh redis-6.0.9]# echo &#x27;PATH=$PATH:/usr/local/redis/bin/&#x27; &gt;&gt; /etc/profile</span><br><span class="line">[root@jjh redis-6.0.9]# bash /etc/profile</span><br><span class="line">[root@jjh redis-6.0.9]# redis-server</span><br><span class="line">15486:C 20 Dec 2020 15:53:14.105 # oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo</span><br><span class="line">15486:C 20 Dec 2020 15:53:14.105 # Redis version=6.0.9, bits=64, commit=00000000, modified=0, pid=15486, just started</span><br><span class="line">15486:C 20 Dec 2020 15:53:14.105 # Warning: no config file specified, using the default config. In order to specify a config file use redis-server /path/to/redis.conf</span><br><span class="line">                _._                                                  </span><br><span class="line">           _.-<span class="string">``</span>__ <span class="string">&#x27;&#x27;</span>-._                                             </span><br><span class="line">      _.-<span class="string">``</span>    <span class="string">`.  `</span>_.  <span class="string">&#x27;&#x27;</span>-._           Redis <span class="number">6.0</span><span class="number">.9</span> (<span class="number">0</span>0000000/<span class="number">0</span>) <span class="number">64</span> bit</span><br><span class="line">  .-<span class="string">``</span> .-<span class="string">``</span><span class="string">`.  `</span><span class="string">``</span>\/    _.,_ <span class="string">&#x27;&#x27;</span>-._                                   </span><br><span class="line"> (    <span class="string">&#x27;      ,       .-`  | `,    )     Running in standalone mode</span></span><br><span class="line"><span class="string"> |`-._`-...-` __...-.``-._|&#x27;</span><span class="string">` _.-&#x27;|     Port: 6379</span></span><br><span class="line"><span class="string"> |    `</span>-._   <span class="string">`._    /     _.-&#x27;    |     PID: 15486</span></span><br><span class="line"><span class="string">  `</span>-._    <span class="string">`-._  `</span>-./  _.-<span class="string">&#x27;    _.-&#x27;</span>                                   </span><br><span class="line"> |<span class="string">`-._`</span>-._    <span class="string">`-.__.-&#x27;    _.-&#x27;_.-&#x27;|                                  </span></span><br><span class="line"><span class="string"> |    `</span>-._<span class="string">`-._        _.-&#x27;_.-&#x27;    |           http://redis.io        </span></span><br><span class="line"><span class="string">  `</span>-._    <span class="string">`-._`</span>-.__.-<span class="string">&#x27;_.-&#x27;</span>    _.-<span class="string">&#x27;                                   </span></span><br><span class="line"><span class="string"> |`-._`-._    `-.__.-&#x27;</span>    _.-<span class="string">&#x27;_.-&#x27;</span>|                                  </span><br><span class="line"> |    <span class="string">`-._`</span>-._        _.-<span class="string">&#x27;_.-&#x27;</span>    |                                  </span><br><span class="line">  <span class="string">`-._    `</span>-._<span class="string">`-.__.-&#x27;_.-&#x27;    _.-&#x27;                                   </span></span><br><span class="line"><span class="string">      `</span>-._    <span class="string">`-.__.-&#x27;    _.-&#x27;                                       </span></span><br><span class="line"><span class="string">          `</span>-._        _.-<span class="string">&#x27;                                           </span></span><br><span class="line"><span class="string">              `-.__.-&#x27;</span>                                               </span><br><span class="line"></span><br><span class="line">15486:M 20 Dec 2020 15:53:14.106 # WARNING: The TCP backlog setting of 511 cannot be enforced because /proc/sys/net/core/somaxconn is set to the lower value of 128.</span><br><span class="line">15486:M 20 Dec 2020 15:53:14.106 # Server initialized</span><br><span class="line">15486:M 20 Dec 2020 15:53:14.106 # WARNING overcommit_memory is set to 0! Background save may fail under low memory condition. To fix this issue add &#x27;vm.overcommit_memory = 1&#x27; to /etc/sysctl.conf and then reboot or run the command &#x27;sysctl vm.overcommit_memory=1&#x27; for this to take effect.</span><br><span class="line">15486:M 20 Dec 2020 15:53:14.106 # WARNING you have Transparent Huge Pages (THP) support enabled in your kernel. This will create latency and memory usage issues with Redis. To fix this issue run the command &#x27;echo madvise &gt; /sys/kernel/mm/transparent_hugepage/enabled&#x27; as root, and add it to your /etc/rc.local in order to retain the setting after a reboot. Redis must be restarted after THP is disabled (set to &#x27;madvise&#x27; or &#x27;never&#x27;).</span><br><span class="line"><span class="number">15486</span>:M <span class="number">20</span> Dec <span class="number">2020</span> <span class="number">15</span>:<span class="number">53</span>:<span class="number">14.106</span> * Ready to accept connections</span><br></pre></td></tr></table></figure><h3 id="再开一个终端查看下端口"><a href="#再开一个终端查看下端口" class="headerlink" title="再开一个终端查看下端口"></a>再开一个终端查看下端口</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[root@jjh ~]# netstat -antp|grep :6379</span><br><span class="line">tcp        <span class="number">0</span>      <span class="number">0</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:<span class="number">6379</span>            <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:*               LISTEN      <span class="number">15486</span>/redis-server  </span><br><span class="line">tcp6       <span class="number">0</span>      <span class="number">0</span> :::<span class="number">6379</span>                 :::*                    LISTEN      <span class="number">15486</span>/redis-server  </span><br></pre></td></tr></table></figure><h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[root@jjh redis-6.0.9]# vim conf/redis.conf </span><br><span class="line">···</span><br><span class="line"><span class="number">68</span> bind <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line"><span class="number">89</span> protected-mode no</span><br><span class="line"><span class="number">224</span> daemonize yes</span><br><span class="line"><span class="number">255</span> loglevel warning</span><br><span class="line"><span class="number">260</span> logfile <span class="string">&quot;/usr/local/redis/redis.log&quot;</span></span><br><span class="line"><span class="number">283</span> always-show-logo no</span><br><span class="line"><span class="number">365</span> dir /usr/local/redis/</span><br><span class="line">···</span><br><span class="line">[root@jjh redis-6.0.9]# redis-server /usr/local/redis/conf/redis.conf </span><br><span class="line">[root@jjh redis-6.0.9]# netstat -antp|grep :6379</span><br><span class="line">tcp        <span class="number">0</span>      <span class="number">0</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:<span class="number">6379</span>            <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:*               LISTEN      <span class="number">15836</span>/redis-server  </span><br></pre></td></tr></table></figure><h3 id="客户端测试"><a href="#客户端测试" class="headerlink" title="客户端测试"></a>客户端测试</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[root@jjh redis-6.0.9]# redis-cli</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; set NAME jjh</span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; get NAME</span><br><span class="line"><span class="string">&quot;jjh&quot;</span></span><br></pre></td></tr></table></figure><h2 id="Redis-持久化"><a href="#Redis-持久化" class="headerlink" title="Redis 持久化"></a>Redis 持久化</h2><p>redis支持两种持久化方式，一种是Snapshotting (快照)也是默认方式，另一种是 Append-only file (缩写aof)的方式。</p><h3 id="Snapshotting"><a href="#Snapshotting" class="headerlink" title="Snapshotting"></a>Snapshotting</h3><p>快照是默认的持久化方式。这种方式是就是将内存中数据以快照的方式写入到二进制文件中，默认的文件名为dump.rdb。可以通过配置设置自动做快照持久化的方式。我们可以配置redis在n秒内如果超过m个key被修改就自动做快照，下面是默认的快照保存配置。</p><ul><li>save 900 1        #900秒内如果超过1个key被修改，则发起快照保存</li><li>save 300 10      #300秒内容如超过10个key被修改，则发起快照保存</li><li>save 60 10000  #60秒内容如超过100000个key被修改，则发起快照保存<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[root@jjh ~]# cat /usr/local/redis/conf/redis.conf </span><br><span class="line">···</span><br><span class="line"><span class="number">307</span> save <span class="number">900</span> <span class="number">1</span></span><br><span class="line"><span class="number">308</span> save <span class="number">300</span> <span class="number">10</span></span><br><span class="line"><span class="number">309</span> save <span class="number">60</span> <span class="number">10000</span></span><br><span class="line"></span><br><span class="line"><span class="number">342</span> dbfilename dump.rdb</span><br><span class="line">···</span><br></pre></td></tr></table></figure>如果需要恢复数据，只需要将备份文件（dump.rdb）移动到 redis 安装目录并启动服务即可。<br>想知道工作目录在哪<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[root@jjh ~]# redis-cli</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; config get dir</span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;dir&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;/usr/local/redis-6.0.9&quot;</span></span><br></pre></td></tr></table></figure>save操作是在主线程中保存快照的，由于redis是用一个主线程来处理，这种方式会阻塞所有 client 请求，所以不推荐使用。另一点需要注意的是，每次快照持久化都是将内存数据完整写入到磁盘， 并不是增量的只同步脏数据。如果数据量大且写操作比较多，必然会引起大量的磁盘 io 操作，可能会严重影响性能。</li></ul><p>另外由于快照方式存在一定间隔时间，如果 redis 意外 down 掉，就会丢失最后一次快照后的所有修改。</p><h3 id="Append-only-file"><a href="#Append-only-file" class="headerlink" title="Append-only file"></a>Append-only file</h3><p>aof 比快照方式有更好的持久化性，在使用 aof 持久化方式时，redis会将每一个收到的写命令都通过 write 函数追加到文件中(默认是appendonly.aof)。 当 redis 重启时会通过重新执行文件中保存的写命令来在内存中重建整个数据库的内容。</p><p>由于 os 会在内核中缓存 write 做的修改，所以可能不是立即写到磁盘上。这样aof方式的持久化也还是有可能会丢失部分修改。不过我们可以通过配置文件告诉redis我们想要通过 fsync 函数强制 os 写入到磁盘的时机。有三种方式如下(默认是:每秒 fsync 一次）</p><p>appendonly yes    //启用 aof 持久化方式</p><ul><li>appendfsync always      //每次收到写命令就立即强制写入磁盘，最慢的，但是保证完全的持久化，不推荐使用</li><li>appendfsync everysec   //每秒钟强制写入磁盘次，在性能和持久化方面做了很好的折中，推荐</li><li>appendfsync no             //完全依赖os,性能最好持久化没保证</li></ul><p>aof 的方式也同时带来了另一个问题：持久化文件会变的越来越大。例如我们调用 incr test 命令100次，文件中必须保存全部的100条命令，其实有99条都是多余的。因为要恢复数据库的状态其实文件中保存一条 set test 100就够了。为了压缩 aof 的持久化文件。redis 提供了 bgrewriteaof 命令。收到此命令 redis 将使用与快照类似的方式将内存中的数据以命令的方式保存到临时文件中，最后替换原来的文件。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[root@jjh ~]# cat /usr/local/redis/conf/redis.conf </span><br><span class="line">···</span><br><span class="line"><span class="number">307</span> #save <span class="number">900</span> <span class="number">1</span></span><br><span class="line"><span class="number">308</span> #save <span class="number">300</span> <span class="number">10</span></span><br><span class="line"><span class="number">309</span> #save <span class="number">60</span> <span class="number">10000</span></span><br><span class="line"></span><br><span class="line"><span class="number">1089</span> appendonly yes</span><br><span class="line"><span class="number">1093</span> appendfilename <span class="string">&quot;appendonly.aof&quot;</span></span><br><span class="line"><span class="number">1119</span> appendfsync everysec</span><br><span class="line">···</span><br></pre></td></tr></table></figure><h2 id="Redis-主从复制"><a href="#Redis-主从复制" class="headerlink" title="Redis 主从复制"></a>Redis 主从复制</h2><p>192.168.0.36 jjh<br>192.168.0.42 jjh2<br>需要注意，主从复制的开启，完全是在从节点发起的，不需要我们在主节点做任何事情<br>从节点开启主从复制，有3种方式：</p><ul><li>配置文件<br>在从服务器的配置文件中加入：slaveof <masterip> <masterport></li><li>启动命令<br>redis-server启动命令后加入 –slaveof <masterip> <masterport></li><li>客户端命令<br>Redis服务器启动后，直接通过客户端执行命令：slaveof <masterip> <masterport>，则该Redis实例成为从节点</li></ul><p>上述3种方式是等效的，下面以客户端命令的方式为例，看一下当执行了slaveof后，Redis主节点和从节点的变化</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[root@jjh2 ~]# redis-cli</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; slaveof <span class="number">192.168</span><span class="number">.0</span><span class="number">.36</span> <span class="number">6379</span></span><br><span class="line">OK</span><br></pre></td></tr></table></figure><p>在 master 上插入数据</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[root@jjh ~]# redis-cli</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; set file <span class="number">1.</span>txt</span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; get file</span><br><span class="line"><span class="string">&quot;1.txt&quot;</span></span><br></pre></td></tr></table></figure><p>查看是否成功</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[root@jjh2 ~]# redis-cli</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; get file</span><br><span class="line"><span class="string">&quot;1.txt&quot;</span></span><br></pre></td></tr></table></figure><h2 id="Redis-Sentinel-哨兵"><a href="#Redis-Sentinel-哨兵" class="headerlink" title="Redis Sentinel (哨兵)"></a>Redis Sentinel (哨兵)</h2><p>Redis Sentinl 为 Redis 提供高可用性。实际上，这意味使用 Sentinel 可以创建一个Redis 部署，可以在没有人为干预的情况下抵御某些类型的故障。Redts Sentinel 还提供其他附属任务，如监控、通知、并充当客户端的配置提供程序。</p><p>Sentinel 功能：</p><ul><li>监控：Sentinel 会不断检查主实例和从属实例是否按预期工作。</li><li>通知：Sentinel可以通过API通知系统管理员，另一台计算机程序，其中一个受监控的Redis实例出现问题。</li><li>自动故障转移：如果主服务器未按预期工作，Sentinel 可以启动故障转移过程，其中从服务器被提升为主服务器，其他其他服务器将重新配置为使用新主服务器，并且使用 Redis 服务器的应用程序会通知有关新服务器的地址连接。</li><li>配置提供商：Sentinel 充当客户端服务发现的权限来源：客户端连接到Sentinel ，以便询问负责给定服务的当前 Redis 主服务器的地址。如果发生故障转移，Sentinel 将报告新地址。</li></ul><p>主从节点配置 sentinel.conf 文件</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[root@jjh redis-6.0.9]# cat conf/sentinel.conf </span><br><span class="line"><span class="number">17</span> protected-mode no      <span class="comment">//设置为非保护模式</span></span><br><span class="line"><span class="number">26</span> daemonize yes          <span class="comment">//设置为守护线程方式运行</span></span><br><span class="line"><span class="number">68</span> sentinel monitor mymaster <span class="number">192.168</span><span class="number">.0</span><span class="number">.36</span> <span class="number">6379</span> <span class="number">2</span>   <span class="comment">//设置监听的master服务器(服务名，IP，端口，投票数)</span></span><br><span class="line"><span class="number">165</span> sentinel failover-timeout mymaster <span class="number">5000</span>  <span class="comment">//故障转移时间，设置为5秒，默认为3分钟</span></span><br></pre></td></tr></table></figure><p>启动 sentinel 服务，查看主从节点的状态</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[root@jjh redis-6.0.9]# redis-server /usr/local/redis/conf/sentinel.conf --sentinel</span><br><span class="line">[root@jjh redis-6.0.9]# redis-cli</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; info replication</span><br><span class="line"># Replication</span><br><span class="line">role:master</span><br><span class="line">connected_slaves:<span class="number">2</span></span><br><span class="line">slave0:ip=<span class="number">192.168</span><span class="number">.0</span><span class="number">.43</span>,port=<span class="number">6379</span>,state=online,offset=<span class="number">478558</span>,lag=<span class="number">1</span></span><br><span class="line">slave1:ip=<span class="number">192.168</span><span class="number">.0</span><span class="number">.42</span>,port=<span class="number">6379</span>,state=online,offset=<span class="number">478419</span>,lag=<span class="number">1</span></span><br><span class="line">master_replid:<span class="number">6</span>efce840d54c12d3e558966ec3adc6e41cfd422c</span><br><span class="line">master_replid2:<span class="number">0</span>1b5782acd9d0e503fded1438c05ec6c7ca58201</span><br><span class="line">master_repl_offset:<span class="number">478558</span></span><br><span class="line">second_repl_offset:<span class="number">8420</span></span><br><span class="line">repl_backlog_active:<span class="number">1</span></span><br><span class="line">repl_backlog_size:<span class="number">1048576</span></span><br><span class="line">repl_backlog_first_byte_offset:<span class="number">1</span></span><br><span class="line">repl_backlog_histlen:<span class="number">478558</span></span><br><span class="line"></span><br><span class="line">[root@jjh2 ~]# redis-cli</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; info replication</span><br><span class="line"># Replication</span><br><span class="line">role:slave</span><br><span class="line">master_host:<span class="number">192.168</span><span class="number">.0</span><span class="number">.36</span></span><br><span class="line">master_port:<span class="number">6379</span></span><br><span class="line">master_link_status:up</span><br><span class="line">master_last_io_seconds_ago:<span class="number">1</span></span><br><span class="line">master_sync_in_progress:<span class="number">0</span></span><br><span class="line">slave_repl_offset:<span class="number">522776</span></span><br><span class="line">slave_priority:<span class="number">100</span></span><br><span class="line">slave_read_only:<span class="number">1</span></span><br><span class="line">connected_slaves:<span class="number">0</span></span><br><span class="line">master_replid:<span class="number">6</span>efce840d54c12d3e558966ec3adc6e41cfd422c</span><br><span class="line">master_replid2:<span class="number">0</span>000000000000000000000000000000000000000</span><br><span class="line">master_repl_offset:<span class="number">522776</span></span><br><span class="line">second_repl_offset:-<span class="number">1</span></span><br><span class="line">repl_backlog_active:<span class="number">1</span></span><br><span class="line">repl_backlog_size:<span class="number">1048576</span></span><br><span class="line">repl_backlog_first_byte_offset:<span class="number">48185</span></span><br><span class="line">repl_backlog_histlen:<span class="number">474592</span></span><br><span class="line"></span><br><span class="line">[root@jjh3 redis-6.0.9]# redis-cli</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; info replication</span><br><span class="line"># Replication</span><br><span class="line">role:slave</span><br><span class="line">master_host:<span class="number">192.168</span><span class="number">.0</span><span class="number">.36</span></span><br><span class="line">master_port:<span class="number">6379</span></span><br><span class="line">master_link_status:up</span><br><span class="line">master_last_io_seconds_ago:<span class="number">1</span></span><br><span class="line">master_sync_in_progress:<span class="number">0</span></span><br><span class="line">slave_repl_offset:<span class="number">490443</span></span><br><span class="line">slave_priority:<span class="number">100</span></span><br><span class="line">slave_read_only:<span class="number">1</span></span><br><span class="line">connected_slaves:<span class="number">0</span></span><br><span class="line">master_replid:<span class="number">6</span>efce840d54c12d3e558966ec3adc6e41cfd422c</span><br><span class="line">master_replid2:<span class="number">0</span>1b5782acd9d0e503fded1438c05ec6c7ca58201</span><br><span class="line">master_repl_offset:<span class="number">490443</span></span><br><span class="line">second_repl_offset:<span class="number">8420</span></span><br><span class="line">repl_backlog_active:<span class="number">1</span></span><br><span class="line">repl_backlog_size:<span class="number">1048576</span></span><br><span class="line">repl_backlog_first_byte_offset:<span class="number">1</span></span><br><span class="line">repl_backlog_histlen:<span class="number">490443</span></span><br></pre></td></tr></table></figure><p>关闭主节点</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[root@jjh redis-6.0.9]# redis-cli</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; shutdown</span><br><span class="line">not connected&gt; </span><br></pre></td></tr></table></figure><p>查看从节点的状态</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[root@jjh2 ~]# redis-cli</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; info replication</span><br><span class="line"># Replication</span><br><span class="line">role:master</span><br><span class="line">connected_slaves:<span class="number">1</span></span><br><span class="line">slave0:ip=<span class="number">192.168</span><span class="number">.0</span><span class="number">.43</span>,port=<span class="number">6379</span>,state=online,offset=<span class="number">549683</span>,lag=<span class="number">1</span></span><br><span class="line">master_replid:f0287a0dd102e1283d53d362a53d13bbe7666771</span><br><span class="line">master_replid2:<span class="number">6</span>efce840d54c12d3e558966ec3adc6e41cfd422c</span><br><span class="line">master_repl_offset:<span class="number">549822</span></span><br><span class="line">second_repl_offset:<span class="number">532438</span></span><br><span class="line">repl_backlog_active:<span class="number">1</span></span><br><span class="line">repl_backlog_size:<span class="number">1048576</span></span><br><span class="line">repl_backlog_first_byte_offset:<span class="number">48185</span></span><br><span class="line">repl_backlog_histlen:<span class="number">501638</span></span><br><span class="line"></span><br><span class="line">[root@jjh3 ~]# redis-cli</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; info replication</span><br><span class="line"># Replication</span><br><span class="line">role:slave</span><br><span class="line">master_host:<span class="number">192.168</span><span class="number">.0</span><span class="number">.42</span></span><br><span class="line">master_port:<span class="number">6379</span></span><br><span class="line">master_link_status:up</span><br><span class="line">master_last_io_seconds_ago:<span class="number">1</span></span><br><span class="line">master_sync_in_progress:<span class="number">0</span></span><br><span class="line">slave_repl_offset:<span class="number">561568</span></span><br><span class="line">slave_priority:<span class="number">100</span></span><br><span class="line">slave_read_only:<span class="number">1</span></span><br><span class="line">connected_slaves:<span class="number">0</span></span><br><span class="line">master_replid:f0287a0dd102e1283d53d362a53d13bbe7666771</span><br><span class="line">master_replid2:<span class="number">6</span>efce840d54c12d3e558966ec3adc6e41cfd422c</span><br><span class="line">master_repl_offset:<span class="number">561568</span></span><br><span class="line">second_repl_offset:<span class="number">532438</span></span><br><span class="line">repl_backlog_active:<span class="number">1</span></span><br><span class="line">repl_backlog_size:<span class="number">1048576</span></span><br><span class="line">repl_backlog_first_byte_offset:<span class="number">1</span></span><br><span class="line">repl_backlog_histlen:<span class="number">561568</span></span><br></pre></td></tr></table></figure><p>可以看到主节点已经自动切换，说明 sentinel.conf 配置已经成功。</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kubernetes介绍与安装</title>
      <link href="2020/12/18/Kubernetes%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/"/>
      <url>2020/12/18/Kubernetes%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<h2 id="Kubernetes-介绍"><a href="#Kubernetes-介绍" class="headerlink" title="Kubernetes 介绍"></a>Kubernetes 介绍</h2><h3 id="Kubernetes-简介"><a href="#Kubernetes-简介" class="headerlink" title="Kubernetes 简介"></a>Kubernetes 简介</h3><p>Kubernetes 是 Google 在 2014 年 6 月开源的一个容器集群管理系统，使用 GO 语言开发，Kubernetes 简称 K8S。K8S 是 Google 内部一个叫 Borg 的容器集群管理系统衍生出来的，Borg已经在 Google 大规模生产运行十年之久。<br>K8S 主要用于自动化部署、扩展和管理容器应用，提供了资源调度、部署管理、服务发现、扩容缩容、监控等一整套功能。K8S 的目标是让部署容器化应用简单高效。2015 年 7月，Kubernetes v1.0 版本正式发布，最新版本详见<a href="https://kubernetes.io/zh/">Kubernetes官网</a></p><h3 id="Kubernetes-主要功能"><a href="#Kubernetes-主要功能" class="headerlink" title="Kubernetes 主要功能"></a>Kubernetes 主要功能</h3><ul><li>数据卷<br>Pod 中容器之间共享数据，可以使用数据卷。</li><li>应用程序监控检查<br>容器内服务可能进程阻塞无法处理请求，可以设置监控检查策略保证应用健壮性。</li><li>复制应用程序实例<br>控制器维护着 Pod 副本数量，保证一个 Pod 或一组同类的 Pod 数量始终可用。</li><li>弹性伸缩<br>根据设定的指标（CPU 利用率）自动缩放 Pod 副本数。</li><li>服务发现<br>使用环境变量或 DNS 服务插件保证容器中程序发现 Pod 入库访问地址。</li><li>负载均衡<br>一组 Pod 副本分配一个私有的集群 IP 地址，负载均衡转发请求到后端容器。在集群内部其他 Pod 可以通过这个 cluster IP 访问应用。</li><li>滚动更新<br>更新服务不中断，一次更新一个 Pod，而不是同时删除整个服务。类似于灰度发布。</li><li>服务编排<br>通过文件描述部署服务，使得应用程序部署变得更高效。</li><li>资源监控<br>node 节点组件集成 cAdvisor 资源收集工具，可通过 Heapster 汇总整个集群节点资源数据，然后存储到 InfluxDB 时序数据库，再由Grafana 展示。、</li><li>提供认证和授权<br>支持角色访问控制（RBAC 基于角色的权限访问控制 Role-Based Access Control）认证授权等策略。<h3 id="基本对象概念"><a href="#基本对象概念" class="headerlink" title="基本对象概念"></a>基本对象概念</h3></li><li>Pod<br>Pod 是最小部署单元，一个 Pod 由一个或多个容器组成，Pod 中容器共享存储和网络，<br>在同一台 docker 主机上运行。</li><li>Service<br>Service 是一个应用服务抽象，定义了 Pod 逻辑集合和访问这个 Pod 集合的策略。<br>Service 代理 Pod 集合对外表现是为一个访问入口，分配一个集群 IP 地址，来自这个 IP的请求将负载均衡转发后端 Pod 中的容器。<br>Service 通过 Label Selector 选择一组 Pod 提供服务。</li><li>Volume<br>数据卷，共享 Pod 中容器使用的数据。</li><li>Namespace<br>命名空间将对象逻辑上分配到不同 namespace，可以是不同的项目、用户等区分管理，并设定控制策略，从而实现多租户。<br>命名空间也成为虚拟集群。</li><li>Label<br>标签用户区分对象（如 Pod、Service），键/值对存在；每个对象可以有多个标签，通过标签关联对象。</li><li>ReplicaSet（RS）<br>下一代 Replication Controller（RC）。确保任何给定时间制定的 Pod 副本数量，并提供声明式更新等功能。<br>RC 与 RS 唯一区别就是 label selector 支持不同，RS 支持新的基于集合的标签，RC 仅支持基于等式的标签。推荐使用 RS，后面 RC 将可能被淘汰。</li><li>Deployment<br>Deployment 是一个更高层的 API 对象，它管理 ReplicaSets，意味着可能永远都不需要直接操作 RS 对象。</li><li>StatefulSet<br>StatefulSet 适合持久性的应用程序，有唯一的网络标志符（IP），持久存储，有序的部署、扩展、删除和滚动更新。</li><li>DaemonSet<br>DaemonSet 确保所有（或一些）节点运行同一个 Pod，当节点加入 Kubernetes 集群中，Pod 会被调度到该节点上运行，当节点从集群中移除时，DaemonSet 的 Pod 会被删除。删除DaemonSet 会清理它所有创建的 Pod。例如监控服务，可以使用 DaemonSet 对象管理。</li><li>Job<br>一次性任务，运行完成后 Pod 销毁，不再重新启动新容器。还可以任务定时运行。<h3 id="系统架构及组件功能"><a href="#系统架构及组件功能" class="headerlink" title="系统架构及组件功能"></a>系统架构及组件功能</h3><h4 id="Master-组件："><a href="#Master-组件：" class="headerlink" title="Master 组件："></a>Master 组件：</h4></li><li>kube-apiserver<br>Kubernetes API，集群的统一入口，各组件协调者，以 HTTP API 提供接口服务，所有对象资源的增删改查和监听操作都交给 APIServer 处理后再提交给 Etcd 存储。</li><li>kube-controller-manager<br>处理集群中常规后台任务，一个资源对应一个控制器，而 ControllerManager 就是负责管理这些控制器的。</li><li>kube-scheduler<br>根据调度算法为新创建的 Pod 选择一个 Node 节点。<h4 id="Node-组件："><a href="#Node-组件：" class="headerlink" title="Node 组件："></a>Node 组件：</h4></li><li>kubelet<br>kubelet 是 Master 在 Node 节点上的 Agent，管理本机运行容器的生命周期，比如创建容器、Pod 挂载数据卷、下载 secret、获取容器和节点状态等工作。kubelet 将每个 Pod 转换成一组容器。</li><li>kube-proxy<br>在 Node 节点上实现 Pod 网络代理，维护网络规则和四层负载均衡工作，代理 iptables做防火墙策略。</li><li>docker 或 rocket/rkt<br>运行容器。<h4 id="第三方服务："><a href="#第三方服务：" class="headerlink" title="第三方服务："></a>第三方服务：</h4></li><li>etcd<br>分布式键值存储系统，负责集群的持久化。<br>用于保持集群状态，比如 Pod、Service 等对象信息。<h2 id="使用-kubeadm-部署-kubenetes-集群"><a href="#使用-kubeadm-部署-kubenetes-集群" class="headerlink" title="使用 kubeadm 部署 kubenetes 集群"></a>使用 kubeadm 部署 kubenetes 集群</h2><h3 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[root@jjh ~]# cat /etc/hosts</span><br><span class="line"><span class="number">192.168</span><span class="number">.0</span><span class="number">.36</span> jjh1</span><br><span class="line"><span class="number">192.168</span><span class="number">.0</span><span class="number">.42</span> jjh2 </span><br><span class="line"><span class="number">192.168</span><span class="number">.0</span><span class="number">.43</span> jjh3</span><br></pre></td></tr></table></figure><h4 id="安装-docker"><a href="#安装-docker" class="headerlink" title="安装 docker"></a>安装 docker</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line">[root@jjh ~]# yum -y install yum-utils device-mapper-persistent-data lvm2</span><br><span class="line">[root@jjh ~]# yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class="line">[root@jjh ~]# yum -y install docker-ce</span><br><span class="line">[root@jjh ~]# systemctl start docker</span><br><span class="line">[root@jjh ~]# systemctl enable docker</span><br></pre></td></tr></table></figure>将 docker 的镜像仓库改为国内的<figure class="highlight"><table><tr><td class="code"><pre><span class="line">[root@jjh ~]# vim /etc/docker/daemon.json</span><br><span class="line">&#123;</span><br><span class="line"> <span class="string">&quot;registry-mirrors&quot;</span>: [<span class="string">&quot;https://registry.docker-cn.com&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line">[root@jjh ~]# systemctl restart docker</span><br></pre></td></tr></table></figure><h4 id="关闭-swap"><a href="#关闭-swap" class="headerlink" title="关闭 swap"></a>关闭 swap</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line">[root@jjh ~]# swapoff -a</span><br><span class="line">[root@jjh ~]# echo &quot;/usr/sbin/swapoff -a&quot; &gt;&gt; /etc/rc.local</span><br><span class="line">[root@jjh ~]# chmod +x /etc/rc.local</span><br></pre></td></tr></table></figure><h4 id="配置内核参数"><a href="#配置内核参数" class="headerlink" title="配置内核参数"></a>配置内核参数</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line">[root@jjh ~]# vim /etc/sysctl.d/k8s.conf</span><br><span class="line">net.bridge.bridge-nf-call-ip6tables = <span class="number">1</span></span><br><span class="line">net.bridge.bridge-nf-call-iptables = <span class="number">1</span></span><br><span class="line">net.ipv4.ip_nonlocal_bind = <span class="number">1</span></span><br><span class="line">net.ipv4.ip_forward = <span class="number">1</span></span><br><span class="line">vm.swappiness=<span class="number">0</span></span><br><span class="line">[root@jjh ~]# sysctl --system</span><br></pre></td></tr></table></figure><h4 id="加载必要的内核模块"><a href="#加载必要的内核模块" class="headerlink" title="加载必要的内核模块"></a>加载必要的内核模块</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line">[root@jjh ~]# vim /etc/sysconfig/modules/ipvs.modules</span><br><span class="line">#!/bin/bash</span><br><span class="line">modprobe -- ip_vs</span><br><span class="line">modprobe -- ip_vs_rr</span><br><span class="line">modprobe -- ip_vs_wrr</span><br><span class="line">modprobe -- ip_vs_sh</span><br><span class="line">modprobe -- nf_conntrack_ipv4</span><br><span class="line">[root@jjh ~]# chmod +x /etc/sysconfig/modules/ipvs.modules </span><br><span class="line">[root@jjh ~]# /etc/sysconfig/modules/ipvs.modules</span><br></pre></td></tr></table></figure>由于我们无法访问 kubeadm 官网上提供的源，所以选择阿里的镜像站<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[root@jjh ~]# vim /etc/yum.repos.d/kubernetes.repo</span><br><span class="line">[kubernetes]</span><br><span class="line">name=Kubernetes</span><br><span class="line">baseurl=https:<span class="comment">//mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/</span></span><br><span class="line">enabled=<span class="number">1</span></span><br><span class="line">gpgcheck=<span class="number">1</span></span><br><span class="line">repo_gpgcheck=<span class="number">1</span></span><br><span class="line">gpgkey=https:<span class="comment">//mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg</span></span><br></pre></td></tr></table></figure><h3 id="配置-master-节点"><a href="#配置-master-节点" class="headerlink" title="配置 master 节点"></a>配置 master 节点</h3><h4 id="安装所需软件包"><a href="#安装所需软件包" class="headerlink" title="安装所需软件包"></a>安装所需软件包</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line">[root@jjh1 ~]# yum install kubeadm kubectl kubelet ipvsadm -y</span><br></pre></td></tr></table></figure>使用 kubeadm config print init-defaults &gt; kubeadm-init.yaml 打印出默认配置，然后在根据自己的环境修改配置，尤其是镜像，在国外，默认的下不下来<figure class="highlight"><table><tr><td class="code"><pre><span class="line">[root@jjh1 ~]# kubeadm config print init-defaults &gt; kubeadm-init.yaml</span><br><span class="line">[root@jjh1 ~]# vim kubeadm-init.yaml</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apiVersion: kubeadm.k8s.io&#x2F;v1beta2</span><br><span class="line">bootstrapTokens:</span><br><span class="line">- groups:</span><br><span class="line">  - system:bootstrappers:kubeadm:default-node-token</span><br><span class="line">  token: abcdef.0123456789abcdef</span><br><span class="line">  ttl: 24h0m0s</span><br><span class="line">  usages:</span><br><span class="line">  - signing</span><br><span class="line">  - authentication</span><br><span class="line">kind: InitConfiguration</span><br><span class="line">localAPIEndpoint:</span><br><span class="line">  advertiseAddress: 192.168.0.36 ## master内网IP</span><br><span class="line">  bindPort: 6443</span><br><span class="line">nodeRegistration:</span><br><span class="line">  criSocket: &#x2F;var&#x2F;run&#x2F;dockershim.sock</span><br><span class="line">  name: jjh1</span><br><span class="line">  taints:</span><br><span class="line">  - effect: NoSchedule</span><br><span class="line">    key: node-role.kubernetes.io&#x2F;master</span><br><span class="line">---</span><br><span class="line">apiServer:</span><br><span class="line">  timeoutForControlPlane: 4m0s</span><br><span class="line">apiVersion: kubeadm.k8s.io&#x2F;v1beta2</span><br><span class="line">certificatesDir: &#x2F;etc&#x2F;kubernetes&#x2F;pki</span><br><span class="line">clusterName: kubernetes</span><br><span class="line">controllerManager: &#123;&#125;</span><br><span class="line">dns:</span><br><span class="line">  type: CoreDNS</span><br><span class="line">etcd:</span><br><span class="line">  local:</span><br><span class="line">    dataDir: &#x2F;var&#x2F;lib&#x2F;etcd</span><br><span class="line">imageRepository:  registry.cn-hangzhou.aliyuncs.com&#x2F;google_containers ## 更改</span><br><span class="line">kind: ClusterConfiguration</span><br><span class="line">kubernetesVersion: v1.20.0</span><br><span class="line">networking:</span><br><span class="line">  dnsDomain: cluster.local</span><br><span class="line">  serviceSubnet: 10.96.0.0&#x2F;12</span><br><span class="line">scheduler: &#123;&#125;</span><br><span class="line">---                                 </span><br><span class="line">apiVersion: kubeproxy.config.k8s.io&#x2F;v1alpha1   ## 添加</span><br><span class="line">kind: KubeProxyConfiguration</span><br><span class="line">mode: &quot;ipvs&quot;</span><br></pre></td></tr></table></figure><h4 id="可以预下载镜像"><a href="#可以预下载镜像" class="headerlink" title="可以预下载镜像"></a>可以预下载镜像</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[root@jjh1 ~]# kubeadm config images pull --config kubeadm-init.yaml</span><br><span class="line">[root@jjh1 ~]# docker image ls</span><br><span class="line">REPOSITORY                                                                    TAG        IMAGE ID       CREATED         SIZE</span><br><span class="line">registry.cn-hangzhou.aliyuncs.com/google_containers/kube-proxy                v1<span class="number">.20</span><span class="number">.0</span>    <span class="number">10</span>cc881966cf   <span class="number">9</span> days ago      <span class="number">118</span>MB</span><br><span class="line">registry.cn-hangzhou.aliyuncs.com/google_containers/kube-apiserver            v1<span class="number">.20</span><span class="number">.0</span>    ca9843d3b545   <span class="number">9</span> days ago      <span class="number">122</span>MB</span><br><span class="line">registry.cn-hangzhou.aliyuncs.com/google_containers/kube-controller-manager   v1<span class="number">.20</span><span class="number">.0</span>    b9fa1895dcaa   <span class="number">9</span> days ago      <span class="number">116</span>MB</span><br><span class="line">registry.cn-hangzhou.aliyuncs.com/google_containers/kube-scheduler            v1<span class="number">.20</span><span class="number">.0</span>    <span class="number">3138</span>b6e3d471   <span class="number">9</span> days ago      <span class="number">46.4</span>MB</span><br><span class="line">registry.cn-hangzhou.aliyuncs.com/google_containers/etcd                      <span class="number">3.4</span><span class="number">.13</span>-<span class="number">0</span>   <span class="number">0</span>369cf4303ff   <span class="number">3</span> months ago    <span class="number">253</span>MB</span><br><span class="line">registry.cn-hangzhou.aliyuncs.com/google_containers/coredns                   <span class="number">1.7</span><span class="number">.0</span>      bfe3a36ebd25   <span class="number">6</span> months ago    <span class="number">45.2</span>MB</span><br><span class="line">registry.cn-hangzhou.aliyuncs.com/google_containers/pause                     <span class="number">3.2</span>        <span class="number">80</span>d28bedfe5d   <span class="number">10</span> months ago   <span class="number">683</span>kB</span><br></pre></td></tr></table></figure><h4 id="初始化-master-节点"><a href="#初始化-master-节点" class="headerlink" title="初始化 master 节点"></a>初始化 master 节点</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[root@jjh1 ~]# systemctl start kubelet</span><br><span class="line">[root@jjh1 ~]# systemctl enable kubelet</span><br><span class="line">[root@jjh1 ~]# kubeadm init --pod-network-cidr=10.244.0.0/16 --image-repository=registry.cn-hangzhou.aliyuncs.com/google_containers</span><br><span class="line">......</span><br><span class="line">You should now deploy a pod network to the cluster.</span><br><span class="line">Run <span class="string">&quot;kubectl apply -f [podnetwork].yaml&quot;</span> <span class="keyword">with</span> one <span class="keyword">of</span> the options listed at:</span><br><span class="line">  https:<span class="comment">//kubernetes.io/docs/concepts/cluster-administration/addons/</span></span><br><span class="line"></span><br><span class="line">Then you can join any number <span class="keyword">of</span> worker nodes by running the following on each <span class="keyword">as</span> root:</span><br><span class="line"></span><br><span class="line">kubeadm join <span class="number">192.168</span><span class="number">.0</span><span class="number">.36</span>:<span class="number">6443</span> --token xzdklu.nf4lx1djq61i2kdx \</span><br><span class="line">    --discovery-token-ca-cert-hash sha256:<span class="number">9</span>cc9686dda3a41b283c7182fd13df1eb98992e5d74a7c7ac03bd25b0d63f90ce </span><br></pre></td></tr></table></figure>//10.244.0.0/16 是 flannel 网络的默认网段</li></ul><p>kubeadm init 主要执行了以下操作：<br>[init]：指定版本进行初始化操作<br>[preflight] ：初始化前的检查和下载所需要的 Docker 镜像文件<br>[kubelet-start] ：生成 kubelet 的配置文件”/var/lib/kubelet/config.yaml”，没有这个文件 kubelet无法启动，所以初始化之前的 kubelet 实际上启动失败。<br>[certificates]：生成 Kubernetes 使用的证书，存放在/etc/kubernetes/pki 目录中。<br>[kubeconfig] ：生成 KubeConfig 文件，存放在/etc/kubernetes 目录中，组件之间通信需要使用对应文件。<br>[control-plane]：使用/etc/kubernetes/manifest 目录下的 YAML 文件，安装 Master 组件。<br>[etcd]：使用/etc/kubernetes/manifest/etcd.yaml 安装 Etcd 服务。<br>[wait-control-plane]：等待 control-plan 部署的 Master 组件启动。<br>[apiclient]：检查 Master 组件服务状态。<br>[uploadconfig]：更新配置<br>[kubelet]：使用 configMap 配置 kubelet。<br>[patchnode]：更新 CNI 信息到 Node 上，通过注释的方式记录。<br>[mark-control-plane]：为当前节点打标签，打了角色 Master，和不可调度标签，这样默认就不会使用 Master 节点来运行 Pod。<br>[bootstrap-token]：生成 token 记录下来，后边使用 kubeadm join 往集群中添加节点时会用到<br>[addons]：安装附加组件 CoreDNS 和 kube-proxy</p><h4 id="为-kubectl-准备-Kubeconfig-文件"><a href="#为-kubectl-准备-Kubeconfig-文件" class="headerlink" title="为 kubectl 准备 Kubeconfig 文件"></a>为 kubectl 准备 Kubeconfig 文件</h4><p>kubectl 默认会在执行的用户家目录下面的.kube 目录下寻找 config 文件。这里是将在初始化时[kubeconfig]步骤生成的 admin.conf 拷到.kube/config</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">[root@jjh1 ~]# mkdir -p $HOME/.kube</span><br><span class="line">[root@jjh1 ~]# cp -i /etc/kubernetes/admin.conf $HOME/.kube/config</span><br><span class="line">[root@jjh1 ~]# chown $(id -u):$(id -g) $HOME/.kube/config</span><br></pre></td></tr></table></figure><p>在该配置文件中，记录了 API Server 的访问地址，所以后面直接执行 kubectl 命令就可以正常连接到 API Server 中</p><h4 id="验证-master-各组件运行状态"><a href="#验证-master-各组件运行状态" class="headerlink" title="验证 master 各组件运行状态"></a>验证 master 各组件运行状态</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[root@jjh1 ~]# kubectl get cs</span><br><span class="line">Warning: v1 ComponentStatus is deprecated <span class="keyword">in</span> v1<span class="number">.19</span>+</span><br><span class="line">NAME                 STATUS      MESSAGE                                                                                       ERROR</span><br><span class="line">scheduler            Unhealthy   Get <span class="string">&quot;http://127.0.0.1:10251/healthz&quot;</span>: dial tcp <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">10251</span>: connect: connection refused   </span><br><span class="line">controller-manager   Unhealthy   Get <span class="string">&quot;http://127.0.0.1:10252/healthz&quot;</span>: dial tcp <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">10252</span>: connect: connection refused   </span><br><span class="line">etcd-<span class="number">0</span>               Healthy     &#123;<span class="string">&quot;health&quot;</span>:<span class="string">&quot;true&quot;</span>&#125;                                       </span><br></pre></td></tr></table></figure><p>出现报错，解决思路：<br>注释掉/etc/kubernetes/manifests下的kube-controller-manager.yaml和kube-scheduler.yaml的- – port=0<br>确认kube-scheduler和kube-controller-manager组件配置是否禁用了非安全端口</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">[root@jjh1 ~]# cd /etc/kubernetes/manifests</span><br><span class="line">[root@jjh1 manifests]# ls</span><br><span class="line">etcd.yaml  kube-apiserver.yaml  kube-controller-manager.yaml  kube-scheduler.yaml</span><br><span class="line"># 搜索- – port=0更改为：#- – port=0</span><br><span class="line">[root@jjh1 ~]# systemctl restart kubelet</span><br><span class="line"># 重启kubelet</span><br></pre></td></tr></table></figure><p>重新验证一下</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[root@jjh1 ~]# kubectl get cs</span><br><span class="line">Warning: v1 ComponentStatus is deprecated <span class="keyword">in</span> v1<span class="number">.19</span>+</span><br><span class="line">NAME                 STATUS    MESSAGE             ERROR</span><br><span class="line">controller-manager   Healthy   ok                  </span><br><span class="line">scheduler            Healthy   ok                  </span><br><span class="line">etcd-<span class="number">0</span>               Healthy   &#123;<span class="string">&quot;health&quot;</span>:<span class="string">&quot;true&quot;</span>&#125;   </span><br><span class="line">[root@jjh1 ~]#  kubectl get pods -A</span><br><span class="line">NAMESPACE     NAME                           READY   STATUS    RESTARTS   AGE</span><br><span class="line">kube-system   coredns-<span class="number">54</span>d67798b7-lfzwm       <span class="number">0</span>/<span class="number">1</span>     Pending   <span class="number">0</span>          <span class="number">2</span>m32s</span><br><span class="line">kube-system   coredns-<span class="number">54</span>d67798b7-n2k5n       <span class="number">0</span>/<span class="number">1</span>     Pending   <span class="number">0</span>          <span class="number">2</span>m32s</span><br><span class="line">kube-system   etcd-jjh1                      <span class="number">1</span>/<span class="number">1</span>     Running   <span class="number">0</span>          <span class="number">2</span>m47s</span><br><span class="line">kube-system   kube-apiserver-jjh1            <span class="number">1</span>/<span class="number">1</span>     Running   <span class="number">0</span>          <span class="number">2</span>m47s</span><br><span class="line">kube-system   kube-controller-manager-jjh1   <span class="number">1</span>/<span class="number">1</span>     Running   <span class="number">0</span>          <span class="number">56</span>s</span><br><span class="line">kube-system   kube-proxy-k2wwb               <span class="number">1</span>/<span class="number">1</span>     Running   <span class="number">0</span>          <span class="number">2</span>m32s</span><br><span class="line">kube-system   kube-scheduler-jjh1            <span class="number">1</span>/<span class="number">1</span>     Running   <span class="number">0</span>          <span class="number">41</span>s</span><br><span class="line">[root@jjh1 ~]# kubectl get nodes</span><br><span class="line">NAME   STATUS     ROLES                  AGE     VERSION</span><br><span class="line">jjh1   NotReady   control-plane,master   <span class="number">3</span>m41s   v1<span class="number">.20</span><span class="number">.0</span></span><br></pre></td></tr></table></figure><h3 id="配置-node-节点"><a href="#配置-node-节点" class="headerlink" title="配置 node 节点"></a>配置 node 节点</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[root@jjh2 ~]# yum install kubeadm kubectl kubelet ipvsadm -y</span><br><span class="line">[root@jjh2 ~]# kubeadm join 192.168.0.36:6443 --token xzdklu.nf4lx1djq61i2kdx \</span><br><span class="line">    --discovery-token-ca-cert-hash sha256:<span class="number">9</span>cc9686dda3a41b283c7182fd13df1eb98992e5d74a7c7ac03bd25b0d63f90ce </span><br></pre></td></tr></table></figure><p>看见这段话表示成功：<br>This node has joined the cluster:</p><ul><li>Certificate signing request was sent to apiserver and a response was received.</li><li>The Kubelet was informed of the new secure connection details.<br>Run ‘kubectl get nodes’ on the control-plane to see this node join the cluster.<br>回到 master 节点看看 node 信息<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[root@jjh1 ~]# kubectl get nodes</span><br><span class="line">NAME   STATUS     ROLES                  AGE     VERSION</span><br><span class="line">jjh1   NotReady   control-plane,master   <span class="number">5</span>m21s   v1<span class="number">.20</span><span class="number">.0</span></span><br><span class="line">jjh2   NotReady   &lt;none&gt;                 <span class="number">23</span>s     v1<span class="number">.20</span><span class="number">.0</span></span><br><span class="line">jjh3   NotReady   &lt;none&gt;                 <span class="number">21</span>s     v1<span class="number">.20</span><span class="number">.0</span></span><br></pre></td></tr></table></figure><h3 id="部署网络插件-flannel"><a href="#部署网络插件-flannel" class="headerlink" title="部署网络插件 flannel"></a>部署网络插件 flannel</h3>Master 节点 NotReady 的原因就是因为没有使用任何的网络插件，此时 Node 和 Master的连接还不正常。目前最流行的 Kubernetes 网络插件有 Flannel、Calico、Canal、Weave 这里选择使用 flannel。<br>在 master 节点上都有执行，执行完成后需要等 flannel 的 pods 运行起来，这需要点时间：<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[root@jjh1 ~]# kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml</span><br><span class="line">The connection to the server raw.githubusercontent.com was refused - did you specify the right host or port?</span><br></pre></td></tr></table></figure>外网无法访问，就直接下到本地安装好了<br>链接： <a href="https://pan.baidu.com/s/13NwlWF24TUpDm23uj66V5Q">https://pan.baidu.com/s/13NwlWF24TUpDm23uj66V5Q</a><br>提取码： here <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[root@jjh1 ~]# ls</span><br><span class="line">flannel.yaml  kubeadm-init.yaml</span><br><span class="line">[root@jjh1 ~]# kubectl apply -f flannel.yaml</span><br><span class="line">podsecuritypolicy.policy/psp.flannel.unprivileged created</span><br><span class="line">Warning: rbac.authorization.k8s.io/v1beta1 ClusterRole is deprecated <span class="keyword">in</span> v1<span class="number">.17</span>+, unavailable <span class="keyword">in</span> v1<span class="number">.22</span>+; use rbac.authorization.k8s.io/v1 ClusterRole</span><br><span class="line">clusterrole.rbac.authorization.k8s.io/flannel created</span><br><span class="line">Warning: rbac.authorization.k8s.io/v1beta1 ClusterRoleBinding is deprecated <span class="keyword">in</span> v1<span class="number">.17</span>+, unavailable <span class="keyword">in</span> v1<span class="number">.22</span>+; use rbac.authorization.k8s.io/v1 ClusterRoleBinding</span><br><span class="line">clusterrolebinding.rbac.authorization.k8s.io/flannel created</span><br><span class="line">serviceaccount/flannel created</span><br><span class="line">configmap/kube-flannel-cfg created</span><br><span class="line">daemonset.apps/kube-flannel-ds-amd64 created</span><br><span class="line">daemonset.apps/kube-flannel-ds-arm64 created</span><br><span class="line">daemonset.apps/kube-flannel-ds-arm created</span><br><span class="line">daemonset.apps/kube-flannel-ds-ppc64le created</span><br><span class="line">daemonset.apps/kube-flannel-ds-s390x created</span><br></pre></td></tr></table></figure>现在重新 get 验证一下，看看是否安装成功<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[root@jjh1 ~]# kubectl get nodes</span><br><span class="line">NAME   STATUS   ROLES                  AGE     VERSION</span><br><span class="line">jjh1    Ready    control-plane,master   <span class="number">35</span>m     v1<span class="number">.20</span><span class="number">.0</span></span><br><span class="line">jjh2   Ready    &lt;none&gt;                 <span class="number">7</span>m43s   v1<span class="number">.20</span><span class="number">.0</span></span><br><span class="line">jjh3   Ready    &lt;none&gt;                 <span class="number">7</span>m44s   v1<span class="number">.20</span><span class="number">.0</span></span><br><span class="line">[root@jjh1 ~]# kubectl get pods -n kube-system</span><br><span class="line">NAME                           READY   STATUS    RESTARTS   AGE</span><br><span class="line">coredns-<span class="number">54</span>d67798b7-lfzwm       <span class="number">1</span>/<span class="number">1</span>     Running   <span class="number">0</span>          <span class="number">9</span>m6s</span><br><span class="line">coredns-<span class="number">54</span>d67798b7-n2k5n       <span class="number">1</span>/<span class="number">1</span>     Running   <span class="number">0</span>          <span class="number">9</span>m6s</span><br><span class="line">etcd-jjh1                      <span class="number">1</span>/<span class="number">1</span>     Running   <span class="number">0</span>          <span class="number">9</span>m21s</span><br><span class="line">kube-apiserver-jjh1            <span class="number">1</span>/<span class="number">1</span>     Running   <span class="number">0</span>          <span class="number">9</span>m21s</span><br><span class="line">kube-controller-manager-jjh1   <span class="number">1</span>/<span class="number">1</span>     Running   <span class="number">0</span>          <span class="number">7</span>m30s</span><br><span class="line">kube-flannel-ds-amd64-<span class="number">7</span>x9v6    <span class="number">1</span>/<span class="number">1</span>     Running   <span class="number">0</span>          <span class="number">117</span>s</span><br><span class="line">kube-flannel-ds-amd64-<span class="number">8</span>pxgf    <span class="number">1</span>/<span class="number">1</span>     Running   <span class="number">0</span>          <span class="number">117</span>s</span><br><span class="line">kube-flannel-ds-amd64-jfpxb    <span class="number">1</span>/<span class="number">1</span>     Running   <span class="number">0</span>          <span class="number">117</span>s</span><br><span class="line">kube-proxy-<span class="number">679</span>sb               <span class="number">1</span>/<span class="number">1</span>     Running   <span class="number">0</span>          <span class="number">4</span>m24s</span><br><span class="line">kube-proxy-<span class="number">8</span>xm25               <span class="number">1</span>/<span class="number">1</span>     Running   <span class="number">0</span>          <span class="number">4</span>m26s</span><br><span class="line">kube-proxy-k2wwb               <span class="number">1</span>/<span class="number">1</span>     Running   <span class="number">0</span>          <span class="number">9</span>m6s</span><br><span class="line">kube-scheduler-jjh1            <span class="number">1</span>/<span class="number">1</span>     Running   <span class="number">0</span>          <span class="number">7</span>m15s</span><br></pre></td></tr></table></figure>到此K8S基本安装完成</li></ul>]]></content>
      
      
      <categories>
          
          <category> Kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker配置MySQL主从复制</title>
      <link href="2020/12/11/Docker%E9%85%8D%E7%BD%AEMySQL%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/"/>
      <url>2020/12/11/Docker%E9%85%8D%E7%BD%AEMySQL%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="MySQL主从复制工作原理"><a href="#MySQL主从复制工作原理" class="headerlink" title="MySQL主从复制工作原理"></a>MySQL主从复制工作原理</h2><p>1.MySql主库在事务提交时会把数据变更作为事件记录在二进制日志Binlog中；<br>2.主库推送二进制日志文件Binlog中的事件到从库的中继日志Relay Log中，之后从库根据中继日志重做数据变更操作，通过逻辑复制来达到主库和从库的数据一致性；<br>3.MySql通过三个线程来完成主从库间的数据复制，其中Binlog Dump线程跑在主库上，I/O线程和SQL线程跑着从库上；<br>4.当在从库上启动复制时，首先创建I/O线程连接主库，主库随后创建Binlog Dump线程读取数据库事件并发送给I/O线程，I/O线程获取到事件数据后更新到从库的中继日志Relay Log中去，之后从库上的SQL线程读取中继日志Relay Log中更新的数据库事件并应用</p><h3 id="复制类型"><a href="#复制类型" class="headerlink" title="复制类型"></a>复制类型</h3><h4 id="基于语句的复制"><a href="#基于语句的复制" class="headerlink" title="基于语句的复制"></a>基于语句的复制</h4><p>MySQL中的复制功能最初基于从主设备到从设备的SQl语句传播。这称为基于语句的日志记录。您可以通过启动服务器来使用此格式–binlog_format=STATEMENT</p><h4 id="基于行的复制"><a href="#基于行的复制" class="headerlink" title="基于行的复制"></a>基于行的复制</h4><p>在基于行的日志记录中，主服务器将事件写入二进制日志，以指示各个表行的影响方式。因此，重要的是表始终使用主键来确保可以有效地识别行。您可以通过启动它来使服务器使用基于行的日志记录 –binlog_format=ROW</p><h4 id="混合类型的复制"><a href="#混合类型的复制" class="headerlink" title="混合类型的复制"></a>混合类型的复制</h4><p>混合日志记录。对于混合日志记录，默认情况下使用基于语句的日志记录，但在某些情况下，日志记录模式会自动切换到基于行的日志，您可以通过使用该选项启动mysqld,使MySQL显式使用混合日志记录–binlog_format=MIXED</p><h4 id="基于GTIDS复制"><a href="#基于GTIDS复制" class="headerlink" title="基于GTIDS复制"></a>基于GTIDS复制</h4><p>GTID即全局事务ID (global transaction identifier)，实际上是由UUID+TID (即transactionId)组成的。其中UUID(即server_uuid) 产生于auto.conf文件(cat /data/mysql/data/auto.cnf)，是一个MySQL实例的唯一标识。TID代表了该实例上已经提交的事务数量，并且随着事务提交单调递增，所以GTID能够保证每个MySQL实例事务的执行（不会重复执行同一个事务，并且会补全没有执行的事务）。GTID在一组复制中，全局唯一。<br>使用GTID需要注意: 在构建主从复制之前，在一台将成为主的实例上进行一些操作（如数据清理等），通过GTID复制，这些在主从成立之前的操作也会被复制到从服务器上，引起复制失败。也就是说通过GTID复制都是从最先开始的事务日志开始，即使这些操作在复制之前执行。</p><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><h3 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[root@jjh ~]# docker pull docker </span><br><span class="line">[root@jjh ~]# docker images</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">docker.io/mysql     latest              dd7265748b5d        <span class="number">2</span> weeks ago         <span class="number">545</span> MB</span><br></pre></td></tr></table></figure><h3 id="创建主从文件夹及修改相关配置"><a href="#创建主从文件夹及修改相关配置" class="headerlink" title="创建主从文件夹及修改相关配置"></a>创建主从文件夹及修改相关配置</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">[root@jjh ~]# mkdir -p /docker/mysql/&#123;master,slave&#125;/data</span><br></pre></td></tr></table></figure><h4 id="添加主库配置文件"><a href="#添加主库配置文件" class="headerlink" title="添加主库配置文件"></a>添加主库配置文件</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[root@jjh ~]# cat /docker/mysql/master/my.cnf</span><br><span class="line">[mysqld]</span><br><span class="line">user=mysql</span><br><span class="line">log-bin=mysql-bin</span><br><span class="line">## 开启二进制日志功能</span><br><span class="line">server-id=<span class="number">1</span></span><br><span class="line">## 同一局域网内注意要唯一</span><br><span class="line">character-set-server=utf8mb4</span><br><span class="line">default_authentication_plugin=mysql_native_password</span><br><span class="line">## MySQL8.O 更改默认的身份认证插件</span><br><span class="line">table_definition_cache=<span class="number">400</span></span><br><span class="line">[client]</span><br><span class="line"><span class="keyword">default</span>-character-set=utf8mb4</span><br><span class="line">[mysql]</span><br><span class="line"><span class="keyword">default</span>-character-set=utf8mb4</span><br></pre></td></tr></table></figure><h4 id="添加从库配置文件"><a href="#添加从库配置文件" class="headerlink" title="添加从库配置文件"></a>添加从库配置文件</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[root@jjh ~]# cat /docker/mysql/slave/my.cnf</span><br><span class="line">[mysqld]                                                                             </span><br><span class="line">user=mysql</span><br><span class="line">server-id=<span class="number">2</span></span><br><span class="line">character-set-server=utf8mb4</span><br><span class="line">default_authentication_plugin=mysql_native_password</span><br><span class="line">table_definition_cache=<span class="number">400</span></span><br><span class="line">[client]</span><br><span class="line"><span class="keyword">default</span>-character-set=utf8mb4</span><br><span class="line">[mysql]</span><br><span class="line"><span class="keyword">default</span>-character-set=utf8mb4</span><br></pre></td></tr></table></figure><h3 id="创建Mysql桥接网络，用于主从容器直接互联"><a href="#创建Mysql桥接网络，用于主从容器直接互联" class="headerlink" title="创建Mysql桥接网络，用于主从容器直接互联"></a>创建Mysql桥接网络，用于主从容器直接互联</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">[root@jjh ~]# docker network create mysql</span><br></pre></td></tr></table></figure><h4 id="创建Mysql主库容器"><a href="#创建Mysql主库容器" class="headerlink" title="创建Ｍysql主库容器"></a>创建Ｍysql主库容器</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line">[root@jjh ~]# docker run -d --privileged=true -p 3307:3306 -v /docker/mysql/master/my.cnf:/etc/mysql/my.cnf -v /docker/mysql/master/data:/var/lib/mysql -v /docker/mysql/master/mysql-files:/var/lib/mysql-files -e MYSQL_ROOT_PASSWORD=密码 --name mysql-master --network mysql --network-alias mysql-master docker.io/mysql </span><br></pre></td></tr></table></figure><h4 id="创建Mysql从库容器"><a href="#创建Mysql从库容器" class="headerlink" title="创建Ｍysql从库容器"></a>创建Ｍysql从库容器</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line">[root@jjh ~]# docker run -d --privileged=true -p 3308:3306 -v /docker/mysql/slave/my.cnf:/etc/mysql/my.cnf -v /docker/mysql/slave1/data:/var/lib/mysql -v /docker/mysql/slave/mysql-files:/var/lib/mysql-files -e MYSQL_ROOT_PASSWORD=密码 --name mysql-slave --network mysql --network-alias mysql-slave docker.io/mysql </span><br></pre></td></tr></table></figure><h3 id="配置Mysql主从复制"><a href="#配置Mysql主从复制" class="headerlink" title="配置Mysql主从复制"></a>配置Mysql主从复制</h3><h4 id="配置主服务器"><a href="#配置主服务器" class="headerlink" title="配置主服务器"></a>配置主服务器</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line">[root@jjh ~]# docker exec -it mysql-master bash</span><br><span class="line">root@2150cac30563:/# mysql -u root -p</span><br><span class="line">Enter password: </span><br><span class="line">密码</span><br><span class="line">mysql&gt; GRANT REPLICATION SLAVE ON *.* TO <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;</span><br><span class="line">Query OK, <span class="number">0</span> rows affected (<span class="number">0.00</span> sec)</span><br><span class="line"># 这里使用root用户进行主从复制, %为允许所有ip进行复制</span><br><span class="line"></span><br><span class="line">mysql&gt; flush privileges;</span><br><span class="line">Query OK, <span class="number">0</span> rows affected (<span class="number">0.00</span> sec)</span><br><span class="line"># 刷新权限</span><br><span class="line"></span><br><span class="line">mysql&gt; show master status;</span><br><span class="line">+------------------+----------+--------------+------------------+-------------------+</span><br><span class="line">| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |</span><br><span class="line">+------------------+----------+--------------+------------------+-------------------+</span><br><span class="line">| mysql-bin<span class="number">.000003</span> |      <span class="number">543</span> |              |                  |                   |</span><br><span class="line">+------------------+----------+--------------+------------------+-------------------+</span><br><span class="line"><span class="number">1</span> row <span class="keyword">in</span> set (<span class="number">0.00</span> sec)</span><br><span class="line">#需要记录其中的File,  Position字段内容</span><br></pre></td></tr></table></figure><h4 id="配置从服务器"><a href="#配置从服务器" class="headerlink" title="配置从服务器"></a>配置从服务器</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[root@jjh ~]# docker exec -it mysql-slave bash</span><br><span class="line">root@2150cac30563:/# mysql -u root -p</span><br><span class="line">Enter password: </span><br><span class="line">密码</span><br><span class="line">#输入以下内容</span><br><span class="line">mysql&gt; change master to master_host=<span class="string">&#x27;mysql-master&#x27;</span>,master_user=<span class="string">&#x27;root&#x27;</span>,master_password=<span class="string">&#x27;密码&#x27;</span>,master_log_file=<span class="string">&#x27;File列的内容&#x27;</span>,master_log_pos=position的内容(不用加引号),master_port=<span class="number">3306</span>;</span><br><span class="line">Query OK, <span class="number">0</span> rows affected, <span class="number">2</span> warnings (<span class="number">0.02</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; start slave;</span><br><span class="line">Query OK, <span class="number">0</span> rows affected, <span class="number">1</span> warning (<span class="number">0.01</span> sec)</span><br><span class="line"># 启动slave</span><br><span class="line"></span><br><span class="line">mysql&gt; show slave status\G;</span><br><span class="line"># 查看slave状态</span><br><span class="line">*************************** <span class="number">1.</span> row ***************************</span><br><span class="line">               Slave_IO_State: Waiting <span class="keyword">for</span> master to send event</span><br><span class="line">                  Master_Host: mysql-master</span><br><span class="line">                  Master_User: root</span><br><span class="line">                  Master_Port: <span class="number">3306</span></span><br><span class="line">                Connect_Retry: <span class="number">60</span></span><br><span class="line">              Master_Log_File: mysql-bin<span class="number">.000003</span></span><br><span class="line">          Read_Master_Log_Pos: <span class="number">543</span></span><br><span class="line">               Relay_Log_File: <span class="number">5671</span>fb724964-relay-bin<span class="number">.000002</span></span><br><span class="line">                Relay_Log_Pos: <span class="number">324</span></span><br><span class="line">        Relay_Master_Log_File: mysql-bin<span class="number">.000003</span></span><br><span class="line">             Slave_IO_Running: Yes</span><br><span class="line">            Slave_SQL_Running: Yes</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>当Slave_IO_Running和Slave SQL Ruing都是Yes时，说明配置成功了，可以在主库创个库，添加下数据，看看能否在从库中查到</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Zabbix5.0安装</title>
      <link href="2020/12/05/Zabbix5.0%E5%AE%89%E8%A3%85/"/>
      <url>2020/12/05/Zabbix5.0%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<p>详细安装说明详见<a href="https://www.zabbix.com/cn">zabbix官网</a><br>官网上有yum安装的方式，如果是学习使用可以使用yum方式，方便简单。建议在生产环境使用源码方式安装。以下，演示为yum方式安装zabbix服务端与客户端。</p><h3 id="准备LAMP"><a href="#准备LAMP" class="headerlink" title="准备LAMP"></a>准备LAMP</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">[root@jjh ~]# yum -y install httpd mariadb-server mariadb php</span><br><span class="line">[root@jjh ~]# systemctl start httpd.service mariadb.service</span><br><span class="line">[root@jjh ~]# systemctl enable httpd.service mariadb.service</span><br></pre></td></tr></table></figure><h3 id="安装数据库"><a href="#安装数据库" class="headerlink" title="安装数据库"></a>安装数据库</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">[root@jjh ~]# rpm -Uvh https://repo.zabbix.com/zabbix/5.0/rhel/7/x86_64/zabbix-release-5.0-1.el7.noarch.rpm</span><br><span class="line">[root@jjh ~]# yum clean all</span><br></pre></td></tr></table></figure><h3 id="安装Zabbix服务器和代理"><a href="#安装Zabbix服务器和代理" class="headerlink" title="安装Zabbix服务器和代理"></a>安装Zabbix服务器和代理</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">[root@jjh ~]# yum install zabbix-server-mysql zabbix-agent -y</span><br></pre></td></tr></table></figure><h3 id="安装Zabbix前端"><a href="#安装Zabbix前端" class="headerlink" title="安装Zabbix前端"></a>安装Zabbix前端</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">[root@jjh ~]# yum install centos-release-scl -y</span><br></pre></td></tr></table></figure><h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[root@jjh ~]# vim /etc/yum.repos.d/zabbix.repo </span><br><span class="line">[zabbix-frontend]</span><br><span class="line">...</span><br><span class="line">enabled=<span class="number">1</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="安装Zabbix前端软件包"><a href="#安装Zabbix前端软件包" class="headerlink" title="安装Zabbix前端软件包"></a>安装Zabbix前端软件包</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">[root@jjh ~]# yum install zabbix-web-mysql-scl zabbix-apache-conf-scl -y</span><br></pre></td></tr></table></figure><h3 id="创建数据库并导入初始数据"><a href="#创建数据库并导入初始数据" class="headerlink" title="创建数据库并导入初始数据"></a>创建数据库并导入初始数据</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[root@jjh ~]# mysql_secure_installation #初始化数据库信息</span><br><span class="line">[root@jjh ~]# mysql -uroot -p</span><br><span class="line">MariaDB [(none)]&gt; create database zabbix character set utf8 collate utf8_bin;</span><br><span class="line">MariaDB [(none)]&gt; grant all privileges on zabbix.* to zabbix@localhost identified by <span class="string">&#x27;zabbix&#x27;</span>;</span><br><span class="line">MariaDB [(none)]&gt; quit;</span><br></pre></td></tr></table></figure><h3 id="导入初始架构和数据"><a href="#导入初始架构和数据" class="headerlink" title="导入初始架构和数据"></a>导入初始架构和数据</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">[root@jjh ~]# zcat /usr/share/doc/zabbix-server-mysql-*/create.sql.gz |mysql -uzabbix -pzabbix zabbix</span><br></pre></td></tr></table></figure><h3 id="查看和编辑配置文件"><a href="#查看和编辑配置文件" class="headerlink" title="查看和编辑配置文件"></a>查看和编辑配置文件</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[root@jjh ~]# vim /etc/zabbix/zabbix_server.conf </span><br><span class="line">DBName=zabbix</span><br><span class="line">DBUser=zabbix</span><br><span class="line">DBPassword=zabbix#添加此行</span><br><span class="line">AlertScriptsPath=/usr/lib/zabbix/alertscripts#自定义动作脚本存放路径</span><br><span class="line">[root@jjh zabbix]# vim /etc/opt/rh/rh-php72/php-fpm.d/zabbix.conf</span><br><span class="line">php_value[date.timezone] = Asia/Shanghai</span><br></pre></td></tr></table></figure><h3 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">[root@jjh zabbix]# systemctl restart zabbix-server zabbix-agent httpd rh-php72-php-fpm</span><br><span class="line">[root@jjh zabbix]# systemctl enable zabbix-server zabbix-agent httpd rh-php72-php-fpm </span><br></pre></td></tr></table></figure><h3 id="web界面安装"><a href="#web界面安装" class="headerlink" title="web界面安装"></a>web界面安装</h3><p>浏览器访问：<a href="http://localhost/zabbix">http://localhost/zabbix</a><br>数据库密码：zabbix<br><img src="https://pic.downk.cc/item/5fcb9026394ac52378a1cfc8.png"><br>用户名：Admin<br>密码：zabbix<br><img src="https://pic.downk.cc/item/5fcc725b394ac52378375174.png"><br>如果主机可用性为未知，可以查看下日志<br>可能是数据库密码错误导致没连上，在配置文件中修改下密码就OK了</p>]]></content>
      
      
      <categories>
          
          <category> 监控 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Zabbix </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker安装部署ElK教程</title>
      <link href="2020/12/03/Docker%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2ElK%E6%95%99%E7%A8%8B/"/>
      <url>2020/12/03/Docker%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2ElK%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><h3 id="核心组成"><a href="#核心组成" class="headerlink" title="核心组成"></a>核心组成</h3><p>ELK由<strong>Elasticsearch</strong>，<strong>Logstash</strong>和<strong>Kibana</strong>三部分组件组成；</p><p>Elasticsearch是一个开源分布式搜索引擎，它的特点是：分布式，零配置，自动发现，索引自动分片，索引副本机制，restful风格接口，多数据源，自动搜索负载等。</p><p>Logstash是一个完全开源的工具，它可以对您的日志进行收集，分析，将其存储供以后使用Kibana是一个开源和免费的工具，它可以为Logstash和ElasticSearch提供的日志分析友好的Web界面，可以帮助您汇总，分析和搜索重要数据日志。</p><h3 id="四大组件"><a href="#四大组件" class="headerlink" title="四大组件"></a>四大组件</h3><p>Logstash：logstash服务器端</p><p>Elasticsearch：存储类别日志</p><p>Kibana：网络化接口</p><p>Logstash转发器：logstash客户端端通过木材服务器网络协议发送日志到logstash服务器</p><h3 id="ELK工作流程"><a href="#ELK工作流程" class="headerlink" title="ELK工作流程"></a>ELK工作流程</h3><p>在需要收集日志的所有服务上部署logstash，作为logstash代理（logstash shipper）用于监控并过滤收集日志，将过滤后的内容发送到Redis，然后logstash indexer将日志收集在一起并提供全文搜索服务ElasticSearch，可以用ElasticSearch进行自定义搜索通过Kibana来结合自定义搜索进行页面展示。</p><h2 id="Docker安装ELK"><a href="#Docker安装ELK" class="headerlink" title="Docker安装ELK"></a>Docker安装ELK</h2><p>参考<a href="https://www.elastic.co/">ELK官网</a></p><h3 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[root@jjh ~]# docker pull docker.elastic.co/elasticsearch/elasticsearch:7.10.0</span><br><span class="line">[root@jjh ~]# docker pull docker.elastic.co/logstash/logstash:7.10.0</span><br><span class="line">[root@jjh ~]# docker pull docker.elastic.co/kibana/kibana:7.10.0</span><br><span class="line">[root@jjh ~]# docker images</span><br><span class="line">REPOSITORY                                      TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">docker.elastic.co/logstash/logstash             <span class="number">7.10</span><span class="number">.0</span>              bc71baf6997e        <span class="number">3</span> weeks ago         <span class="number">843</span> MB</span><br><span class="line">docker.elastic.co/kibana/kibana                 <span class="number">7.10</span><span class="number">.0</span>              da7fcd592595        <span class="number">3</span> weeks ago         <span class="number">1</span> GB</span><br><span class="line">docker.elastic.co/elasticsearch/elasticsearch   <span class="number">7.10</span><span class="number">.0</span>              <span class="number">37190</span>fe5beea        <span class="number">3</span> weeks ago         <span class="number">774</span> MB</span><br></pre></td></tr></table></figure><h3 id="运行容器"><a href="#运行容器" class="headerlink" title="运行容器"></a>运行容器</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[root@jjh ~]# docker run -d --name es -p 9200:9200 -p 9300:9300 -e &quot;discovery.type=single-node&quot; docker.elastic.co/elasticsearch/elasticsearch:7.10.0</span><br><span class="line">[root@jjh ~]# docker run --name es_logstash docker.elastic.co/logstash/logstash:7.10.0</span><br><span class="line">[root@jjh ~]# docker run --name es_kibana -p 5601:5601 -d -e ELASTICSEARCH_URL=http://localhost:9200 docker.elastic.co/kibana/kibana:7.10.0</span><br><span class="line">[root@jjh ~]# docker ps</span><br><span class="line">CONTAINER ID        IMAGE                                                  COMMAND                  CREATED             STATUS              PORTS                                            NAMES</span><br><span class="line">f017ffdeb0d5        docker.elastic.co/kibana/kibana:<span class="number">7.10</span><span class="number">.0</span>                 <span class="string">&quot;/usr/local/bin/du...&quot;</span>   <span class="number">4</span> hours ago         Up <span class="number">4</span> hours          <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:<span class="number">5601</span>-&gt;<span class="number">5601</span>/tcp                           es_kibana</span><br><span class="line">b7249be98850        docker.elastic.co/logstash/logstash:<span class="number">7.10</span><span class="number">.0</span>             <span class="string">&quot;/usr/local/bin/do...&quot;</span>   <span class="number">4</span> hours ago         Up <span class="number">3</span> hours          <span class="number">5044</span>/tcp, <span class="number">9600</span>/tcp                               es_logstash</span><br><span class="line"><span class="number">1242</span>f863cf94        docker.elastic.co/elasticsearch/elasticsearch:<span class="number">7.10</span><span class="number">.0</span>   <span class="string">&quot;/tini -- /usr/loc...&quot;</span>   <span class="number">4</span> hours ago         Up <span class="number">3</span> hours          <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:<span class="number">9200</span>-&gt;<span class="number">9200</span>/tcp, <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:<span class="number">9300</span>-&gt;<span class="number">9300</span>/tcp   es</span><br></pre></td></tr></table></figure><h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><h4 id="Elasticsearch"><a href="#Elasticsearch" class="headerlink" title="Elasticsearch"></a>Elasticsearch</h4><p>进入容器，修改 elasticsearch.yml 文件</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[root@1242f863cf94 elasticsearch]# cat config/elasticsearch.yml </span><br><span class="line">cluster.name: <span class="string">&quot;docker-cluster&quot;</span></span><br><span class="line">network.host: <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line"># 加入跨域配置</span><br><span class="line">http.cors.enabled: <span class="literal">true</span></span><br><span class="line">http.cors.allow-origin: <span class="string">&quot;*&quot;</span></span><br></pre></td></tr></table></figure><p>访问  <a href="http://localhost:9200/">http://localhost:9200</a>  ,显示如下：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;name&quot;</span> : <span class="string">&quot;1242f863cf94&quot;</span>,</span><br><span class="line">  <span class="string">&quot;cluster_name&quot;</span> : <span class="string">&quot;docker-cluster&quot;</span>,</span><br><span class="line">  <span class="string">&quot;cluster_uuid&quot;</span> : <span class="string">&quot;svVoSL31SwCdpvize03tGA&quot;</span>,</span><br><span class="line">  <span class="string">&quot;version&quot;</span> : &#123;</span><br><span class="line">    <span class="string">&quot;number&quot;</span> : <span class="string">&quot;7.10.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;build_flavor&quot;</span> : <span class="string">&quot;default&quot;</span>,</span><br><span class="line">    <span class="string">&quot;build_type&quot;</span> : <span class="string">&quot;docker&quot;</span>,</span><br><span class="line">    <span class="string">&quot;build_hash&quot;</span> : <span class="string">&quot;51e9d6f22758d0374a0f3f5c6e8f3a7997850f96&quot;</span>,</span><br><span class="line">    <span class="string">&quot;build_date&quot;</span> : <span class="string">&quot;2020-11-09T21:30:33.964949Z&quot;</span>,</span><br><span class="line">    <span class="string">&quot;build_snapshot&quot;</span> : <span class="literal">false</span>,</span><br><span class="line">    <span class="string">&quot;lucene_version&quot;</span> : <span class="string">&quot;8.7.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;minimum_wire_compatibility_version&quot;</span> : <span class="string">&quot;6.8.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;minimum_index_compatibility_version&quot;</span> : <span class="string">&quot;6.0.0-beta1&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;tagline&quot;</span> : <span class="string">&quot;You Know, for Search&quot;</span></span><br></pre></td></tr></table></figure><h4 id="Logstash"><a href="#Logstash" class="headerlink" title="Logstash"></a>Logstash</h4><p>进入容器，修改 logstash.yml 文件</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">bash-<span class="number">4.2</span>$ cat config/logstash.yml </span><br><span class="line">http.host: <span class="string">&quot;0.0.0.0&quot;</span></span><br><span class="line">xpack.monitoring.elasticsearch.hosts: <span class="string">&quot;http://localhost:9200&quot;</span></span><br></pre></td></tr></table></figure><h4 id="Kibana"><a href="#Kibana" class="headerlink" title="Kibana"></a>Kibana</h4><p>进入容器，修改 logstash.yml 文件</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">bash-<span class="number">4.4</span>$ cat config/kibana.yml </span><br><span class="line"># ** THIS IS AN AUTO-GENERATED FILE **</span><br><span class="line">#Default Kibana configuration <span class="keyword">for</span> docker target</span><br><span class="line">server.name: kibana</span><br><span class="line">server.host: <span class="string">&quot;0&quot;</span></span><br><span class="line">elasticsearch.hosts: <span class="string">&quot;http://localhost:9200&quot;</span></span><br><span class="line">monitoring.ui.container.elasticsearch.enabled: <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>访问  <a href="http://localhost:5601/">http://localhost:5601</a>  ,显示如下：<br><img src="https://pic.downk.cc/item/5fc8e611394ac5237869fc1a.png"><br>记得修改IP地址，不然你会看到访问页面出现如下几个大字：<br>“kibana server is not ready yet”</p><h3 id="ElasticSearch-Head（可选）"><a href="#ElasticSearch-Head（可选）" class="headerlink" title="ElasticSearch-Head（可选）"></a>ElasticSearch-Head（可选）</h3><p>参考<a href="https://github.com/mobz/elasticsearch-head">ElasticSearch-Head</a><br>为什么要安装ElasticSearch-Head呢，原因是需要有一个管理界面进行查看ElasticSearch相关信息，用于监控 Elasticsearch 状态的客户端插件，包括数据可视化、执行增删改查操作等。</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">[root@jjh ~]# docker pull mobz/elasticsearch-head:5</span><br><span class="line">[root@jjh ~]# docker run -d --name es_admin -p 9100:9100 mobz/elasticsearch-head:5</span><br></pre></td></tr></table></figure><p>访问  <a href="http://localhost:9100/">http://localhost:9100</a>  ,显示如下：<br><img src="https://pic.downk.cc/item/5fc8ede4394ac523786f1e09.png"><br>记得修改页面左上角IP地址，否则集群健康值无法测量</p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Elasticsearch </tag>
            
            <tag> Logstash </tag>
            
            <tag> Kibana </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GitLab+Jenkins持续集成</title>
      <link href="2020/11/28/GitLab+Jenkins%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/"/>
      <url>2020/11/28/GitLab+Jenkins%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/</url>
      
        <content type="html"><![CDATA[<p><strong>预安装Docker环境</strong><br><strong>记得更改国内镜像源</strong></p><h2 id="Docker安装Jenkins"><a href="#Docker安装Jenkins" class="headerlink" title="Docker安装Jenkins"></a>Docker安装Jenkins</h2><p>参考<a href="https://hub.docker.com/r/jenkins/jenkins/">官方Docker使用说明</a></p><h3 id="拉取-Jenkins镜像"><a href="#拉取-Jenkins镜像" class="headerlink" title="拉取 Jenkins镜像"></a>拉取 Jenkins镜像</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">[root@jjh ~]# docker pull jenkins/jenkins</span><br></pre></td></tr></table></figure><h3 id="创建本地Jenkins配置文件目录"><a href="#创建本地Jenkins配置文件目录" class="headerlink" title="创建本地Jenkins配置文件目录"></a>创建本地Jenkins配置文件目录</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">[root@jjh ~]# mkdir /var/jenkins_home</span><br><span class="line">[root@jjh ~]# chmod 777 /var/jenkins_home  ##注意这里必须配置本地卷的权限，否则启动失败</span><br></pre></td></tr></table></figure><h3 id="运行Jenkins镜像"><a href="#运行Jenkins镜像" class="headerlink" title="运行Jenkins镜像"></a>运行Jenkins镜像</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[root@jjh ~]#  docker run -d -v /var/jenkins_home:/var/jenkins_home -p 8080:8080 --name jenkins docker.io/jenkins/jenkins</span><br><span class="line"><span class="number">7917</span>d5151c9d1b66c2fcbec4e32bd573565fb4c4ff6ef51a1546f883d7ce3a22</span><br><span class="line">[root@jjh ~]# docker ps</span><br><span class="line">CONTAINER ID        IMAGE                       COMMAND                  CREATED             STATUS              PORTS                               NAMES</span><br><span class="line"><span class="number">7917</span>d5151c9d        docker.io/jenkins/jenkins   <span class="string">&quot;/sbin/tini -- /us...&quot;</span>   <span class="number">21</span> seconds ago      Up <span class="number">20</span> seconds       <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:<span class="number">8080</span>-&gt;<span class="number">8080</span>/tcp, <span class="number">50000</span>/tcp   jenkins</span><br></pre></td></tr></table></figure><p>#-d：后台运行<br>#-p：将容器内部端口向外映射<br>#–name：命名容器名称<br>#-v：将容器内数据文件夹或者日志、配置等文件夹挂载到宿主机指定目录</p><h2 id="Docker安装GitLab"><a href="#Docker安装GitLab" class="headerlink" title="Docker安装GitLab"></a>Docker安装GitLab</h2><h3 id="拉取-GitLab镜像"><a href="#拉取-GitLab镜像" class="headerlink" title="拉取 GitLab镜像"></a>拉取 GitLab镜像</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">[root@jjh ~]# docker pull gitlab/gitlab-ce</span><br></pre></td></tr></table></figure><h3 id="创建本地GitLab配置文件目录"><a href="#创建本地GitLab配置文件目录" class="headerlink" title="创建本地GitLab配置文件目录"></a>创建本地GitLab配置文件目录</h3><p>通常会将 GitLab 的配置 (etc) 、 日志 (log) 、数据 (data) 放到容器之外， 便于日后升级， 因此请先准备这三个目录。</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">[root@jjh ~]# mkdir -p /var/gitlab/etc</span><br><span class="line">[root@jjh ~]# mkdir -p /var/gitlab/log</span><br><span class="line">[root@jjh ~]# mkdir -p /var/gitlab/data</span><br></pre></td></tr></table></figure><h3 id="运行GitLab镜像并修改配置文件"><a href="#运行GitLab镜像并修改配置文件" class="headerlink" title="运行GitLab镜像并修改配置文件"></a>运行GitLab镜像并修改配置文件</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">[root@jjh ~]# docker run -d -p 443:443 -p 222:22 -p 8090:80  --name gitlab -v /var/gitlab/etc:/etc/gitlab -v /var/gitlab/log:/var/log/gitlab -v /var/gitlab/data:/var/opt/gitlab docker.io/gitlab/gitlab-ce</span><br></pre></td></tr></table></figure><p>在gitlab上创建项目的时候，生成项目的URL访问地址是按容器的hostname来生成的，也就是容器的id。作为gitlab服务器，我们需要一个固定的URL访问地址，于是需要配置gitlab.rb</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">[root@jjh ~]#  vim /var/gitlab/etc/gitlab.rb</span><br><span class="line"># 配置http协议所使用的访问地址,不加端口号默认为80</span><br><span class="line">external_url <span class="string">&#x27;http://localhost&#x27;</span></span><br><span class="line"></span><br><span class="line"># 配置ssh协议所使用的访问地址和端口</span><br><span class="line">gitlab_rails[<span class="string">&#x27;gitlab_ssh_host&#x27;</span>] = <span class="string">&#x27;localhost&#x27;</span></span><br><span class="line">gitlab_rails[&#x27;gitlab_shell_ssh_port&#x27;] = 222 # 此端口是run时22端口映射的222端口</span><br></pre></td></tr></table></figure><h2 id="搭建GitLab-Jenkins持续集成环境"><a href="#搭建GitLab-Jenkins持续集成环境" class="headerlink" title="搭建GitLab+Jenkins持续集成环境"></a>搭建GitLab+Jenkins持续集成环境</h2><h3 id="创建GitLab项目组"><a href="#创建GitLab项目组" class="headerlink" title="创建GitLab项目组"></a>创建GitLab项目组</h3><p>打开 <a href="http://localhost:8090/">http://localhost:8090</a> ，登录进去（详见下面），点击new group创建一个项目组，信息可以自己看着填<br><img src="https://pic.downk.cc/item/5fc26697d590d4788a82467b.png"></p><h3 id="获取GitLab个人访问令牌"><a href="#获取GitLab个人访问令牌" class="headerlink" title="获取GitLab个人访问令牌"></a>获取GitLab个人访问令牌</h3><p>打开GitLab，点击“setting”——“Account”，复制“Private token”备用，如下所示：<br><img src="https://pic.downk.cc/item/5fc2718cd590d4788a86eadf.png"></p><h3 id="创建Jenkins-Job"><a href="#创建Jenkins-Job" class="headerlink" title="创建Jenkins Job"></a>创建Jenkins Job</h3><p>打开 <a href="http://localhost:8080/">http://localhost:8080</a> ,“item name”可以随便起，然后点击“构建一个自由风格的软件项目”<br><img src="https://pic.downk.cc/item/5fc271c1d590d4788a870281.png"></p><h3 id="Jenkins安装Git-GitLab插件"><a href="#Jenkins安装Git-GitLab插件" class="headerlink" title="Jenkins安装Git GitLab插件"></a>Jenkins安装Git GitLab插件</h3><p>切换到“可选插件”，分别搜索“GitLab Plugin”和“Git Plugin”,然后点击“直接安装”。如果在“可选插件”里没有搜到，可能默认你已经安装了，可以在“已安装”里查看<br><img src="https://pic.downk.cc/item/5fc271f8d590d4788a871adf.png"></p><h3 id="配置Jenkins设定系统"><a href="#配置Jenkins设定系统" class="headerlink" title="配置Jenkins设定系统"></a>配置Jenkins设定系统</h3><p>配置GitLab，”Connection Name”随便填，“Git Host URL”填GitLab的访问地址，然后点“Add”——“jenkins”，如下所示：<br><img src="https://pic.downk.cc/item/5fc2725ad590d4788a874229.png"><br>设置完了，要测试一下能否连接成功，点击“test connection”,要看到返回“Success”才行</p><h3 id="配置Job"><a href="#配置Job" class="headerlink" title="配置Job"></a>配置Job</h3><h4 id="配置Job的源码管理"><a href="#配置Job的源码管理" class="headerlink" title="配置Job的源码管理"></a>配置Job的源码管理</h4><p>选择“源码管理”，选择“Git”,然后去GitLab中复制项目地址，粘贴到“Repository URL”,然后点击“credentials”后面的“Add”按钮<br><img src="https://pic.downk.cc/item/5fc272bed590d4788a876d73.png"><br>之前连接存储库一直失败，后来发现是端口出错，这个要注意一下</p><h4 id="配置Job的构建触发器"><a href="#配置Job的构建触发器" class="headerlink" title="配置Job的构建触发器"></a>配置Job的构建触发器</h4><p>选择“构建触发器”，勾选“Pull SCM”，这个选项会每隔一段时间检查一下GitLab仓库中代码是否有更新，有的话就执行构建操作。日程表如何设置，在这个输入框下面有说明。<br><img src="https://pic.downk.cc/item/5fc27310d590d4788a879849.png"><br>点击进阶生成秘密令牌<br><img src="https://pic.downk.cc/item/5fc27352d590d4788a87b838.png"><br><img src="https://pic.downk.cc/item/5fc27374d590d4788a87c5c8.png"><br>返回gitlab界面贴上令牌和job的url<br><img src="https://pic.downk.cc/item/5fc27391d590d4788a87d318.png"></p><h4 id="配置Job的构建脚本"><a href="#配置Job的构建脚本" class="headerlink" title="配置Job的构建脚本"></a>配置Job的构建脚本</h4><p>在build栏目里，选择“jenkins execute shell”,然后输入你项目的构建命令（这依赖于你的项目，如Maven的maven build，gulp的gulp xxx 等等）<br><img src="https://pic.downk.cc/item/5fc273f1d590d4788a87fbfe.png"><br>jenkins支持多种构建脚本，可以自己试一下</p><h4 id="将构建状态推送回git"><a href="#将构建状态推送回git" class="headerlink" title="将构建状态推送回git"></a>将构建状态推送回git</h4><p>点击“进阶”，填写“build name”<br><img src="https://pic.downk.cc/item/5fc27410d590d4788a8809f2.png"><br>点击“应用”，点击“保存”。<br>至此，所有工作已经完成，现在你提交代码到GitLab，jenkins会每隔一段时间帮你运行一次构建命令，这样大家的代码自动集成到一起，出了错的话很快就知道了。</p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jenkins </tag>
            
            <tag> GitLab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建自己专属的VPN</title>
      <link href="2020/11/20/%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E4%B8%93%E5%B1%9E%E7%9A%84VPN/"/>
      <url>2020/11/20/%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E4%B8%93%E5%B1%9E%E7%9A%84VPN/</url>
      
        <content type="html"><![CDATA[<p>首先你需要准备一台海外服务器</p><h2 id="安装Shadowsocks服务端"><a href="#安装Shadowsocks服务端" class="headerlink" title="安装Shadowsocks服务端"></a>安装Shadowsocks服务端</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@jjh ~]# yum install python-setuptools &amp;&amp; easy_install pip</span><br><span class="line">[root@jjh ~]# pip install shadowsocks</span><br></pre></td></tr></table></figure><p>参考<a href="https://github.com/shadowsocks/shadowsocks/wiki/Shadowsocks-%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E">官方Shadowsocks使用说明</a></p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>修改配置文件 /etc/shadowsocks.json，如果没有可以新建<br>内容如下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">        &quot;server&quot;:&quot;0.0.0.0&quot;,</span><br><span class="line">        &quot;server_port&quot;:&quot; 你的端口 &quot;,</span><br><span class="line">        &quot;password&quot;:&quot; 你的密码 &quot;,</span><br><span class="line">        &quot;timeout&quot;:300,</span><br><span class="line">        &quot;method&quot;:&quot;aes-256-cfb&quot;,</span><br><span class="line">        &quot;fast_open&quot;:false,</span><br><span class="line">        &quot;workers&quot;:4</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者设置多个账号</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">        &quot;server&quot;:&quot;0.0.0.0&quot;,</span><br><span class="line">        &quot;port_password&quot;:&#123;</span><br><span class="line">        &quot;端口一&quot;:&quot;密码&quot;,</span><br><span class="line">        &quot;端口二&quot;:&quot;密码&quot;,</span><br><span class="line">        &#125;，</span><br><span class="line">        &quot;timeout&quot;:300,</span><br><span class="line">        &quot;method&quot;:&quot;aes-256-cfb&quot;,</span><br><span class="line">        &quot;fast_open&quot;:false,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置说明</p><table><thead><tr><th>字段</th><th>说明</th></tr></thead><tbody><tr><td>server</td><td>ss服务监听地址</td></tr><tr><td>server_port</td><td>ss服务监听端口</td></tr><tr><td>local_address</td><td>本地监听地址</td></tr><tr><td>local_port</td><td>本地服务监听地址</td></tr><tr><td>password</td><td>密码</td></tr><tr><td>timeout</td><td>超时时间，单位 秒</td></tr><tr><td>method</td><td>加密方法，默认是aes-256-cfb</td></tr><tr><td>fast_open</td><td>使用TCP_FASTOPEN，true/false</td></tr><tr><td>workers</td><td>workers数，只支持Unix/Linux系统</td></tr></tbody></table><p>参考<a href="https://github.com/shadowsocks/shadowsocks/wiki/Configuration-via-Config-File">Configuration via Config File</a></p><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><p>前台启动</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssserver -c &#x2F;etc&#x2F;shadowsocks.json</span><br></pre></td></tr></table></figure><p>后台启动与停止</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssserver -c &#x2F;etc&#x2F;shadowsacks.json -d start</span><br><span class="line">ssserver -c &#x2F;etc&#x2F;shadowsacks.json -d stop</span><br></pre></td></tr></table></figure><p>设置开机自启<br>修改/etc/rc.local，加入如下内容</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssserver -c &#x2F;etc&#x2F;shadowsacks.json -d start</span><br></pre></td></tr></table></figure><p>日志<br>shadowsocks的日志保存在 /var/log/shadowsocks.log</p><h2 id="安装Shadowsocks客户端"><a href="#安装Shadowsocks客户端" class="headerlink" title="安装Shadowsocks客户端"></a>安装Shadowsocks客户端</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@jjh ~]# yum install python-setuptools &amp;&amp; easy_install pip</span><br><span class="line">[root@jjh ~]# pip install git+https:&#x2F;&#x2F;github.com&#x2F;shadowsocks&#x2F;shadowsocks.git@master</span><br></pre></td></tr></table></figure><h3 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h3><p>创建一个/etc/shadowsocks.json文件，格式如下</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;server&quot;:&quot;服务器 IP 或是域名&quot;,</span><br><span class="line">    &quot;server_port&quot;:端口号,</span><br><span class="line">    &quot;local_address&quot;: &quot;127.0.0.1&quot;,</span><br><span class="line">    &quot;local_port&quot;:1080,</span><br><span class="line">    &quot;password&quot;:&quot;密码&quot;,</span><br><span class="line">    &quot;timeout&quot;:300,</span><br><span class="line">    &quot;method&quot;:&quot;加密方式 (chacha20-ietf-poly1305 &#x2F; aes-256-cfb)&quot;,</span><br><span class="line">    &quot;fast_open&quot;: false</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="启动-1"><a href="#启动-1" class="headerlink" title="启动"></a>启动</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sslocal -c &#x2F;etc&#x2F;shadowsocks.json -d start</span><br></pre></td></tr></table></figure><h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@jjh ~]# curl --socks5 127.0.0.1:1080 http:&#x2F;&#x2F;httpbin.org&#x2F;ip</span><br><span class="line">&#123;</span><br><span class="line">  &quot;origin&quot;: &quot;xxx.xxx.xxx.xxx&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果返回你的ss服务器ip,则测试成功。</p><p>此文章仅用于技术交流，请勿作非法之事！</p>]]></content>
      
      
      <categories>
          
          <category> VPN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Shadowsocks </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GitHub备份迁移Hexo</title>
      <link href="2020/11/12/github%E5%A4%87%E4%BB%BD%E8%BF%81%E7%A7%BBhexo/"/>
      <url>2020/11/12/github%E5%A4%87%E4%BB%BD%E8%BF%81%E7%A7%BBhexo/</url>
      
        <content type="html"><![CDATA[<h2 id="创建备份文件"><a href="#创建备份文件" class="headerlink" title="创建备份文件"></a>创建备份文件</h2><p>先新建一个hexo文件夹，作为分支的工作目录，用于保存将要备份的文件和文件夹</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">[root@jjh ~]# mkdir hexo</span><br></pre></td></tr></table></figure><p>把GitHub上的Hexo仓库clone到hexo文件夹中</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">[root@jjh ~]# git clone https://github.com/hehe-tui/hehe-tui.github.io hexo</span><br></pre></td></tr></table></figure><p>删除<strong>除了.git文件夹</strong>的其它所有文件和文件夹，主要是为了得到版本管理的.git。下面命令不会删除隐藏文件和文件夹。</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">[root@jjh ~]# cd hexo</span><br><span class="line">[root@jjh hexo]# rm -r *</span><br></pre></td></tr></table></figure><p>创建.gitignore文件</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">[root@jjh hexo]# touch .gitignore</span><br></pre></td></tr></table></figure><p>最后把需要备份的文件和文件夹都复制到hexo文件夹下，hexo的目录结构应该如下</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[root@jjh hexo]# ll -a</span><br><span class="line">total <span class="number">32</span></span><br><span class="line">drwxr-xr-x  <span class="number">6</span> root root <span class="number">4096</span> Oct <span class="number">27</span> <span class="number">0</span>9:<span class="number">57</span> .</span><br><span class="line">dr-xr-x---. <span class="number">8</span> root root <span class="number">4096</span> Oct <span class="number">27</span> <span class="number">10</span>:<span class="number">0</span>0 ..</span><br><span class="line">-rw-r--r--  <span class="number">1</span> root root <span class="number">3210</span> Oct <span class="number">27</span> <span class="number">0</span>9:<span class="number">56</span> _config.yml</span><br><span class="line">drwxr-xr-x  <span class="number">8</span> root root <span class="number">4096</span> Oct <span class="number">27</span> <span class="number">10</span>:<span class="number">0</span>2 .git</span><br><span class="line">-rw-r--r--  <span class="number">1</span> root root    <span class="number">0</span> Oct <span class="number">27</span> <span class="number">0</span>9:<span class="number">56</span> .gitignore</span><br><span class="line">-rw-r--r--  <span class="number">1</span> root root  <span class="number">842</span> Oct <span class="number">27</span> <span class="number">0</span>9:<span class="number">57</span> package.json</span><br><span class="line">drwxr-xr-x  <span class="number">2</span> root root <span class="number">4096</span> Oct <span class="number">27</span> <span class="number">0</span>9:<span class="number">56</span> scaffolds</span><br><span class="line">drwxr-xr-x  <span class="number">6</span> root root <span class="number">4096</span> Oct <span class="number">27</span> <span class="number">0</span>9:<span class="number">57</span> source</span><br><span class="line">drwxr-xr-x  <span class="number">4</span> root root <span class="number">4096</span> Oct <span class="number">27</span> <span class="number">0</span>9:<span class="number">56</span> themes</span><br></pre></td></tr></table></figure><p>如果使用的主题是从GitHub克隆的，那么主题文件夹下有Git管理文件，需要将它们移除，否则上传github会为空目录。我使用的是hexo-butterfly，需要移除的文件如下</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">[root@jjh butterfly]# rm -rf .git*</span><br></pre></td></tr></table></figure><h2 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h2><p>创建一个叫hexo的分支</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">[root@jjh hexo]# git checkout -b hexo</span><br></pre></td></tr></table></figure><p>保存所有文件到暂存区</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">[root@jjh hexo]# git add --all</span><br></pre></td></tr></table></figure><p>提交变更</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">[root@jjh hexo]# git commit -m &quot;创建hexo分支&quot;</span><br></pre></td></tr></table></figure><p>推送到GitHub，并用–set-upstream与origin创建关联，将hexo设置为默认分支</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">[root@jjh hexo]# git push --set-upstream origin hexo</span><br></pre></td></tr></table></figure><h2 id="迁移博客"><a href="#迁移博客" class="headerlink" title="迁移博客"></a>迁移博客</h2><p>预先安装环境<br>将hexo分支克隆下来</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">[root@jjh ~]# git clone -b hexo https://github.com/hehe-tui/hehe-tui.github.io</span><br></pre></td></tr></table></figure><p>然后安装Hexo依赖</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure><p>启动服务，访问 <a href="http://localhost:4000/">http://localhost:4000</a> 判断备份是否成功。</p>]]></content>
      
      
      <categories>
          
          <category> GitHub </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
